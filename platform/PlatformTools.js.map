{"version":3,"sources":["../../src/platform/PlatformTools.ts"],"names":[],"mappings":"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","file":"PlatformTools.js","sourcesContent":["import * as path from \"path\";\r\nimport * as fs from \"fs\";\r\nimport {highlight, Theme} from \"cli-highlight\";\r\nexport {ReadStream} from \"fs\";\r\nexport {EventEmitter} from \"events\";\r\nexport {Readable, Writable} from \"stream\";\r\n\r\nconst chalk = require(\"chalk\");\r\n\r\n/**\r\n * Platform-specific tools.\r\n */\r\nexport class PlatformTools {\r\n\r\n    /**\r\n     * Type of the currently running platform.\r\n     */\r\n    static type: \"browser\"|\"node\" = \"node\";\r\n\r\n    /**\r\n     * Gets global variable where global stuff can be stored.\r\n     */\r\n    static getGlobalVariable(): any {\r\n        return global;\r\n    }\r\n\r\n    /**\r\n     * Loads (\"require\"-s) given file or package.\r\n     * This operation only supports on node platform\r\n     */\r\n    static load(name: string): any {\r\n\r\n        // if name is not absolute or relative, then try to load package from the node_modules of the directory we are currently in\r\n        // this is useful when we are using typeorm package globally installed and it accesses drivers\r\n        // that are not installed globally\r\n\r\n        try {\r\n\r\n            // switch case to explicit require statements for webpack compatibility.\r\n\r\n            switch (name) {\r\n\r\n                /**\r\n                * mongodb\r\n                */\r\n                case \"mongodb\":\r\n                    return require(\"mongodb\");\r\n\r\n                /**\r\n                * mysql\r\n                */\r\n                case \"mysql\":\r\n                    return require(\"mysql\");\r\n\r\n                case \"mysql2\":\r\n                    return require(\"mysql2\");\r\n\r\n                /**\r\n                * oracle\r\n                */\r\n                case \"oracledb\":\r\n                    return require(\"oracledb\");\r\n\r\n                /**\r\n                * postgres\r\n                */\r\n                case \"pg\":\r\n                    return require(\"pg\");\r\n\r\n                case \"pg-native\":\r\n                    return require(\"pg-native\");\r\n\r\n                case \"pg-query-stream\":\r\n                    return require(\"pg-query-stream\");\r\n\r\n                /**\r\n                * redis\r\n                */\r\n                case \"redis\":\r\n                    return require(\"redis\");\r\n\r\n                /**\r\n                * sqlite\r\n                */\r\n                case \"sqlite3\":\r\n                    return require(\"sqlite3\");\r\n\r\n                /**\r\n                * sqlserver\r\n                */\r\n                case \"mssql\":\r\n                    return require(\"mssql\");\r\n\r\n                /**\r\n                * other modules\r\n                */\r\n                case \"mkdirp\":\r\n                    return require(\"mkdirp\");\r\n\r\n                case \"path\":\r\n                    return require(\"path\");\r\n\r\n                case \"debug\":\r\n                    return require(\"debug\");\r\n\r\n                /**\r\n                * default\r\n                */\r\n                default:\r\n                    return require(name);\r\n\r\n            }\r\n\r\n        } catch (err) {\r\n            if (!path.isAbsolute(name) && name.substr(0, 2) !== \"./\" && name.substr(0, 3) !== \"../\") {\r\n                return require(path.resolve(process.cwd() + \"/node_modules/\" + name));\r\n            }\r\n\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Normalizes given path. Does \"path.normalize\".\r\n     */\r\n    static pathNormalize(pathStr: string): string {\r\n        return path.normalize(pathStr);\r\n    }\r\n\r\n    /**\r\n     * Gets file extension. Does \"path.extname\".\r\n     */\r\n    static pathExtname(pathStr: string): string {\r\n        return path.extname(pathStr);\r\n    }\r\n\r\n    /**\r\n     * Resolved given path. Does \"path.resolve\".\r\n     */\r\n    static pathResolve(pathStr: string): string {\r\n        return path.resolve(pathStr);\r\n    }\r\n\r\n    /**\r\n     * Synchronously checks if file exist. Does \"fs.existsSync\".\r\n     */\r\n    static fileExist(pathStr: string): boolean {\r\n        return fs.existsSync(pathStr);\r\n    }\r\n    \r\n    static readFileSync(filename: string): Buffer {\r\n        return fs.readFileSync(filename);\r\n    }\r\n\r\n    static appendFileSync(filename: string, data: any): void {\r\n        fs.appendFileSync(filename, data);\r\n    }\r\n\r\n    static async writeFile(path: string, data: any): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            fs.writeFile(path, data, (err) => {\r\n                if (err) fail(err);\r\n                ok();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets environment variable.\r\n     */\r\n    static getEnvVariable(name: string): any {\r\n        return process.env[name];\r\n    }\r\n\r\n    /**\r\n     * Highlights sql string to be print in the console.\r\n     */\r\n    static highlightSql(sql: string) {\r\n        const theme: Theme = {\r\n            \"keyword\": chalk.blueBright,\r\n            \"literal\": chalk.blueBright,\r\n            \"string\": chalk.white,\r\n            \"type\": chalk.magentaBright,\r\n            \"built_in\": chalk.magentaBright,\r\n            \"comment\": chalk.gray,\r\n        };\r\n        return highlight(sql, { theme: theme, language: \"sql\" });\r\n    }\r\n\r\n    /**\r\n     * Highlights json string to be print in the console.\r\n     */\r\n    static highlightJson(json: string) {\r\n        return highlight(json, { language: \"json\" });\r\n    }\r\n\r\n    /**\r\n     * Logging functions needed by AdvancedConsoleLogger\r\n     */\r\n    static logInfo(prefix: string, info: any) {\r\n        console.log(chalk.gray.underline(prefix), info);\r\n    }\r\n\r\n    static logError(prefix: string, error: any) {\r\n        console.log(chalk.underline.red(prefix), error);\r\n    }\r\n    \r\n    static logWarn(prefix: string, warning: any) {\r\n        console.log(chalk.underline.yellow(prefix), warning);\r\n    }\r\n    \r\n    static log(message: string) {\r\n        console.log(chalk.underline(message));\r\n    }\r\n\r\n    static warn(message: string) {\r\n        return chalk.yellow(message);\r\n    }\r\n}\r\n"],"sourceRoot":".."}