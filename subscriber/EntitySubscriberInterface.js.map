{"version":3,"sources":["../../src/subscriber/EntitySubscriberInterface.ts"],"names":[],"mappings":"","file":"EntitySubscriberInterface.js","sourcesContent":["import {UpdateEvent} from \"./event/UpdateEvent\";\r\nimport {RemoveEvent} from \"./event/RemoveEvent\";\r\nimport {InsertEvent} from \"./event/InsertEvent\";\r\n\r\n/**\r\n * Classes that implement this interface are subscribers that subscribe for the specific events in the ORM.\r\n */\r\nexport interface EntitySubscriberInterface<Entity = any> {\r\n\r\n    /**\r\n     * Returns the class of the entity to which events will listen.\r\n     * If this method is omitted, then subscriber will listen to events of all entities.\r\n     */\r\n    listenTo?(): Function;\r\n\r\n    /**\r\n     * Called after entity is loaded from the database.\r\n     */\r\n    afterLoad?(entity: Entity): Promise<any>|void;\r\n\r\n    /**\r\n     * Called before entity is inserted to the database.\r\n     */\r\n    beforeInsert?(event: InsertEvent<Entity>): Promise<any>|void;\r\n\r\n    /**\r\n     * Called after entity is inserted to the database.\r\n     */\r\n    afterInsert?(event: InsertEvent<Entity>): Promise<any>|void;\r\n\r\n    /**\r\n     * Called before entity is updated in the database.\r\n     */\r\n    beforeUpdate?(event: UpdateEvent<Entity>): Promise<any>|void;\r\n\r\n    /**\r\n     * Called after entity is updated in the database.\r\n     */\r\n    afterUpdate?(event: UpdateEvent<Entity>): Promise<any>|void;\r\n\r\n    /**\r\n     * Called before entity is removed from the database.\r\n     */\r\n    beforeRemove?(event: RemoveEvent<Entity>): Promise<any>|void;\r\n\r\n    /**\r\n     * Called after entity is removed from the database.\r\n     */\r\n    afterRemove?(event: RemoveEvent<Entity>): Promise<any>|void;\r\n\r\n}"],"sourceRoot":".."}