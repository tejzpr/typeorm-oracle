{"version":3,"sources":["../../src/util/DepGraph.ts"],"names":[],"mappings":"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","file":"DepGraph.js","sourcesContent":["/**\r\n * This source code is from https://github.com/jriecken/dependency-graph\r\n * Just added \"any\" types here, wrapper everything into exported class.\r\n * We cant use a package itself because we want to package \"everything-in-it\" for the frontend users of TypeORM.\r\n */\r\n\r\n/**\r\n * A simple dependency graph\r\n */\r\n\r\n/**\r\n * Helper for creating a Depth-First-Search on\r\n * a set of edges.\r\n *\r\n * Detects cycles and throws an Error if one is detected.\r\n *\r\n * @param edges The set of edges to DFS through\r\n * @param leavesOnly Whether to only return \"leaf\" nodes (ones who have no edges)\r\n * @param result An array in which the results will be populated\r\n */\r\nfunction createDFS(edges: any, leavesOnly: any, result: any) {\r\n    let currentPath: any[] = [];\r\n    let visited: any = {};\r\n    return function DFS(currentNode: any) {\r\n        visited[currentNode] = true;\r\n        currentPath.push(currentNode);\r\n        edges[currentNode].forEach(function (node: any) {\r\n            if (!visited[node]) {\r\n                DFS(node);\r\n            } else if (currentPath.indexOf(node) >= 0) {\r\n                currentPath.push(node);\r\n                throw new Error(`Dependency Cycle Found: ${currentPath.join(\" -> \")}`);\r\n            }\r\n        });\r\n        currentPath.pop();\r\n        if ((!leavesOnly || edges[currentNode].length === 0) && result.indexOf(currentNode) === -1) {\r\n            result.push(currentNode);\r\n        }\r\n    };\r\n}\r\n\r\n\r\nexport class DepGraph {\r\n    nodes: any = {};\r\n    outgoingEdges: any = {}; // Node -> [Dependency Node]\r\n    incomingEdges: any = {}; // Node -> [Dependant Node]\r\n\r\n    /**\r\n     * Add a node to the dependency graph. If a node already exists, this method will do nothing.\r\n     */\r\n    addNode(node: any, data?: any) {\r\n        if (!this.hasNode(node)) {\r\n            // Checking the arguments length allows the user to add a node with undefined data\r\n            if (arguments.length === 2) {\r\n                this.nodes[node] = data;\r\n            } else {\r\n                this.nodes[node] = node;\r\n            }\r\n            this.outgoingEdges[node] = [];\r\n            this.incomingEdges[node] = [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove a node from the dependency graph. If a node does not exist, this method will do nothing.\r\n     */\r\n    removeNode(node: any) {\r\n        if (this.hasNode(node)) {\r\n            delete this.nodes[node];\r\n            delete this.outgoingEdges[node];\r\n            delete this.incomingEdges[node];\r\n            [this.incomingEdges, this.outgoingEdges].forEach(function (edgeList) {\r\n                Object.keys(edgeList).forEach(function (key: any) {\r\n                    let idx = edgeList[key].indexOf(node);\r\n                    if (idx >= 0) {\r\n                        edgeList[key].splice(idx, 1);\r\n                    }\r\n                }, this);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if a node exists in the graph\r\n     */\r\n    hasNode(node: any) {\r\n        return this.nodes.hasOwnProperty(node);\r\n    }\r\n\r\n    /**\r\n     * Get the data associated with a node name\r\n     */\r\n    getNodeData(node: any) {\r\n        if (this.hasNode(node)) {\r\n            return this.nodes[node];\r\n        } else {\r\n            throw new Error(`Node does not exist: ${node}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the associated data for a given node name. If the node does not exist, this method will throw an error\r\n     */\r\n    setNodeData(node: any, data: any) {\r\n        if (this.hasNode(node)) {\r\n            this.nodes[node] = data;\r\n        } else {\r\n            throw new Error(`Node does not exist: ${node}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a dependency between two nodes. If either of the nodes does not exist,\r\n     * an Error will be thrown.\r\n     */\r\n    addDependency(from: any, to: any) {\r\n        if (!this.hasNode(from)) {\r\n            throw new Error(`Node does not exist: ${from}`);\r\n        }\r\n        if (!this.hasNode(to)) {\r\n            throw new Error(`Node does not exist: ${to}`);\r\n        }\r\n        if (this.outgoingEdges[from].indexOf(to) === -1) {\r\n            this.outgoingEdges[from].push(to);\r\n        }\r\n        if (this.incomingEdges[to].indexOf(from) === -1) {\r\n            this.incomingEdges[to].push(from);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Remove a dependency between two nodes.\r\n     */\r\n    removeDependency(from: any, to: any) {\r\n        let idx: any;\r\n        if (this.hasNode(from)) {\r\n            idx = this.outgoingEdges[from].indexOf(to);\r\n            if (idx >= 0) {\r\n                this.outgoingEdges[from].splice(idx, 1);\r\n            }\r\n        }\r\n\r\n        if (this.hasNode(to)) {\r\n            idx = this.incomingEdges[to].indexOf(from);\r\n            if (idx >= 0) {\r\n                this.incomingEdges[to].splice(idx, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get an array containing the nodes that the specified node depends on (transitively).\r\n     *\r\n     * Throws an Error if the graph has a cycle, or the specified node does not exist.\r\n     *\r\n     * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned\r\n     * in the array.\r\n     */\r\n    dependenciesOf(node: any, leavesOnly: any) {\r\n        if (this.hasNode(node)) {\r\n            let result: any[] = [];\r\n            let DFS = createDFS(this.outgoingEdges, leavesOnly, result);\r\n            DFS(node);\r\n            let idx = result.indexOf(node);\r\n            if (idx >= 0) {\r\n                result.splice(idx, 1);\r\n            }\r\n            return result;\r\n        }\r\n        else {\r\n            throw new Error(`Node does not exist: ${node}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get an array containing the nodes that depend on the specified node (transitively).\r\n     *\r\n     * Throws an Error if the graph has a cycle, or the specified node does not exist.\r\n     *\r\n     * If `leavesOnly` is true, only nodes that do not have any dependants will be returned in the array.\r\n     */\r\n    dependantsOf(node: any, leavesOnly: any) {\r\n        if (this.hasNode(node)) {\r\n            let result: any[] = [];\r\n            let DFS = createDFS(this.incomingEdges, leavesOnly, result);\r\n            DFS(node);\r\n            let idx = result.indexOf(node);\r\n            if (idx >= 0) {\r\n                result.splice(idx, 1);\r\n            }\r\n            return result;\r\n        } else {\r\n            throw new Error(`Node does not exist: ${node}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Construct the overall processing order for the dependency graph.\r\n     *\r\n     * Throws an Error if the graph has a cycle.\r\n     *\r\n     * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned.\r\n     */\r\n    overallOrder(leavesOnly?: any) {\r\n        let self = this;\r\n        let result: any[] = [];\r\n        let keys = Object.keys(this.nodes);\r\n        if (keys.length === 0) {\r\n            return result; // Empty graph\r\n        } else {\r\n            // Look for cycles - we run the DFS starting at all the nodes in case there\r\n            // are several disconnected subgraphs inside this dependency graph.\r\n            let CycleDFS = createDFS(this.outgoingEdges, false, []);\r\n            keys.forEach(function (n: any) {\r\n                CycleDFS(n);\r\n            });\r\n\r\n            let DFS = createDFS(this.outgoingEdges, leavesOnly, result);\r\n            // Find all potential starting points (nodes with nothing depending on them) an\r\n            // run a DFS starting at these points to get the order\r\n            keys.filter(function (node) {\r\n                return self.incomingEdges[node].length === 0;\r\n            }).forEach(function (n) {\r\n                DFS(n);\r\n            });\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n}"],"sourceRoot":".."}