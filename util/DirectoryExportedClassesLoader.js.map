{"version":3,"sources":["../../src/util/DirectoryExportedClassesLoader.ts"],"names":[],"mappings":";;AAAA,2DAAwD;AACxD,kCAAsC;AAEtC;;GAEG;AACH,sCAA6C,WAAqB,EAAE,OAAwB;IAAxB,wBAAA,EAAA,WAAW,KAAK,EAAE,KAAK,CAAC;IAExF,yBAAyB,QAAa,EAAE,SAAqB;QACzD,IAAI,OAAO,QAAQ,KAAK,UAAU,IAAI,QAAQ,YAAY,oBAAY,EAAE;YACpE,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAE5B;aAAM,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YAChC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAM,IAAK,OAAA,eAAe,CAAC,CAAC,EAAE,SAAS,CAAC,EAA7B,CAA6B,CAAC,CAAC;SAE/D;aAAM,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;YACrC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,EAAzC,CAAyC,CAAC,CAAC;SAEnF;QACD,OAAO,SAAS,CAAC;IACrB,CAAC;IAED,IAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,UAAC,OAAO,EAAE,GAAG;QAC7C,OAAO,OAAO,CAAC,MAAM,CAAC,6BAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,6BAAa,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC7F,CAAC,EAAE,EAAc,CAAC,CAAC;IAEnB,IAAM,IAAI,GAAG,QAAQ;SAChB,MAAM,CAAC,UAAA,IAAI;QACR,IAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAClE,OAAO,OAAO,CAAC,OAAO,CAAC,6BAAa,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,YAAY,KAAK,OAAO,CAAC;IAC/F,CAAC,CAAC;SACD,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,6BAAa,CAAC,IAAI,CAAC,6BAAa,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,EAAnD,CAAmD,CAAC,CAAC;IAEtE,OAAO,eAAe,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AACrC,CAAC;AA5BD,oEA4BC;AAED;;GAEG;AACH,oCAA2C,WAAqB,EAAE,MAAgB;IAAhB,uBAAA,EAAA,gBAAgB;IAE9E,IAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,UAAC,OAAO,EAAE,GAAG;QAC7C,OAAO,OAAO,CAAC,MAAM,CAAC,6BAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,6BAAa,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC7F,CAAC,EAAE,EAAc,CAAC,CAAC;IAEnB,OAAO,QAAQ;SACV,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,6BAAa,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,MAAM,EAA1C,CAA0C,CAAC;SAC1D,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,6BAAa,CAAC,IAAI,CAAC,6BAAa,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,EAAnD,CAAmD,CAAC,CAAC;AAC1E,CAAC;AATD,gEASC","file":"DirectoryExportedClassesLoader.js","sourcesContent":["import {PlatformTools} from \"../platform/PlatformTools\";\r\nimport {EntitySchema} from \"../index\";\r\n\r\n/**\r\n * Loads all exported classes from the given directory.\r\n */\r\nexport function importClassesFromDirectories(directories: string[], formats = [\".js\", \".ts\"]): Function[] {\r\n\r\n    function loadFileClasses(exported: any, allLoaded: Function[]) {\r\n        if (typeof exported === \"function\" || exported instanceof EntitySchema) {\r\n            allLoaded.push(exported);\r\n\r\n        } else if (Array.isArray(exported)) {\r\n            exported.forEach((i: any) => loadFileClasses(i, allLoaded));\r\n\r\n        } else if (typeof exported === \"object\") {\r\n            Object.keys(exported).forEach(key => loadFileClasses(exported[key], allLoaded));\r\n\r\n        }\r\n        return allLoaded;\r\n    }\r\n\r\n    const allFiles = directories.reduce((allDirs, dir) => {\r\n        return allDirs.concat(PlatformTools.load(\"glob\").sync(PlatformTools.pathNormalize(dir)));\r\n    }, [] as string[]);\r\n\r\n    const dirs = allFiles\r\n        .filter(file => {\r\n            const dtsExtension = file.substring(file.length - 5, file.length);\r\n            return formats.indexOf(PlatformTools.pathExtname(file)) !== -1 && dtsExtension !== \".d.ts\";\r\n        })\r\n        .map(file => PlatformTools.load(PlatformTools.pathResolve(file)));\r\n\r\n    return loadFileClasses(dirs, []);\r\n}\r\n\r\n/**\r\n * Loads all json files from the given directory.\r\n */\r\nexport function importJsonsFromDirectories(directories: string[], format = \".json\"): any[] {\r\n\r\n    const allFiles = directories.reduce((allDirs, dir) => {\r\n        return allDirs.concat(PlatformTools.load(\"glob\").sync(PlatformTools.pathNormalize(dir)));\r\n    }, [] as string[]);\r\n\r\n    return allFiles\r\n        .filter(file => PlatformTools.pathExtname(file) === format)\r\n        .map(file => PlatformTools.load(PlatformTools.pathResolve(file)));\r\n}"],"sourceRoot":".."}