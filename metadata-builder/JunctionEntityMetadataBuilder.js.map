{"version":3,"sources":["../../src/metadata-builder/JunctionEntityMetadataBuilder.ts"],"names":[],"mappings":"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","file":"JunctionEntityMetadataBuilder.js","sourcesContent":["import {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\r\nimport {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\r\nimport {IndexMetadata} from \"../metadata/IndexMetadata\";\r\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\r\nimport {JoinTableMetadataArgs} from \"../metadata-args/JoinTableMetadataArgs\";\r\nimport {Connection} from \"../connection/Connection\";\r\n\r\n/**\r\n * Creates EntityMetadata for junction tables.\r\n * Junction tables are tables generated by many-to-many relations.\r\n */\r\nexport class JunctionEntityMetadataBuilder {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private connection: Connection) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds EntityMetadata for the junction of the given many-to-many relation.\r\n     */\r\n    build(relation: RelationMetadata, joinTable: JoinTableMetadataArgs): EntityMetadata {\r\n        const referencedColumns = this.collectReferencedColumns(relation, joinTable);\r\n        const inverseReferencedColumns = this.collectInverseReferencedColumns(relation, joinTable);\r\n\r\n        const joinTableName = joinTable.name || this.connection.namingStrategy.joinTableName(\r\n            relation.entityMetadata.tableNameWithoutPrefix,\r\n            relation.inverseEntityMetadata.tableNameWithoutPrefix,\r\n            relation.propertyPath,\r\n            relation.inverseRelation ? relation.inverseRelation.propertyName : \"\"\r\n        );\r\n\r\n        const entityMetadata = new EntityMetadata({\r\n            connection: this.connection,\r\n            args: {\r\n                target: \"\",\r\n                name: joinTableName,\r\n                type: \"junction\",\r\n                database: joinTable.database || relation.entityMetadata.database,\r\n                schema: joinTable.schema || relation.entityMetadata.schema,\r\n            }\r\n        });\r\n        entityMetadata.build();\r\n\r\n        // create original side junction columns\r\n        const junctionColumns = referencedColumns.map(referencedColumn => {\r\n            const joinColumn = joinTable.joinColumns ? joinTable.joinColumns.find(joinColumnArgs => {\r\n                return (!joinColumnArgs.referencedColumnName || joinColumnArgs.referencedColumnName === referencedColumn.propertyName) &&\r\n                    !!joinColumnArgs.name;\r\n            }) : undefined;\r\n            const columnName = joinColumn && joinColumn.name ? joinColumn.name\r\n                : this.connection.namingStrategy.joinTableColumnName(relation.entityMetadata.tableNameWithoutPrefix, referencedColumn.propertyName, referencedColumn.databaseName);\r\n\r\n            return new ColumnMetadata({\r\n                connection: this.connection,\r\n                entityMetadata: entityMetadata,\r\n                referencedColumn: referencedColumn,\r\n                args: {\r\n                    target: \"\",\r\n                    mode: \"virtual\",\r\n                    propertyName: columnName,\r\n                    options: {\r\n                        name: columnName,\r\n                        length: referencedColumn.length,\r\n                        width: referencedColumn.width,\r\n                        type: referencedColumn.type,\r\n                        precision: referencedColumn.precision,\r\n                        scale: referencedColumn.scale,\r\n                        charset: referencedColumn.charset,\r\n                        collation: referencedColumn.collation,\r\n                        zerofill: referencedColumn.zerofill,\r\n                        unsigned: referencedColumn.zerofill ? true : referencedColumn.unsigned,\r\n                        nullable: false,\r\n                        primary: true,\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        // create inverse side junction columns\r\n        const inverseJunctionColumns = inverseReferencedColumns.map(inverseReferencedColumn => {\r\n            const joinColumn = joinTable.inverseJoinColumns ? joinTable.inverseJoinColumns.find(joinColumnArgs => {\r\n                return (!joinColumnArgs.referencedColumnName || joinColumnArgs.referencedColumnName === inverseReferencedColumn.propertyName) &&\r\n                    !!joinColumnArgs.name;\r\n            }) : undefined;\r\n            const columnName = joinColumn && joinColumn.name ? joinColumn.name\r\n                : this.connection.namingStrategy.joinTableInverseColumnName(relation.inverseEntityMetadata.tableNameWithoutPrefix, inverseReferencedColumn.propertyName, inverseReferencedColumn.databaseName);\r\n\r\n            return new ColumnMetadata({\r\n                connection: this.connection,\r\n                entityMetadata: entityMetadata,\r\n                referencedColumn: inverseReferencedColumn,\r\n                args: {\r\n                    target: \"\",\r\n                    mode: \"virtual\",\r\n                    propertyName: columnName,\r\n                    options: {\r\n                        length: inverseReferencedColumn.length,\r\n                        type: inverseReferencedColumn.type,\r\n                        precision: inverseReferencedColumn.precision,\r\n                        scale: inverseReferencedColumn.scale,\r\n                        charset: inverseReferencedColumn.charset,\r\n                        collation: inverseReferencedColumn.collation,\r\n                        zerofill: inverseReferencedColumn.zerofill,\r\n                        unsigned: inverseReferencedColumn.zerofill ? true : inverseReferencedColumn.unsigned,\r\n                        name: columnName,\r\n                        nullable: false,\r\n                        primary: true,\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        this.changeDuplicatedColumnNames(junctionColumns, inverseJunctionColumns);\r\n\r\n        // set junction table columns\r\n        entityMetadata.ownerColumns = junctionColumns;\r\n        entityMetadata.inverseColumns = inverseJunctionColumns;\r\n        entityMetadata.ownColumns = [...junctionColumns, ...inverseJunctionColumns];\r\n        entityMetadata.ownColumns.forEach(column => column.relationMetadata = relation);\r\n\r\n        // create junction table foreign keys\r\n        entityMetadata.foreignKeys = [\r\n            new ForeignKeyMetadata({\r\n                entityMetadata: entityMetadata,\r\n                referencedEntityMetadata: relation.entityMetadata,\r\n                columns: junctionColumns,\r\n                referencedColumns: referencedColumns,\r\n                onDelete: \"CASCADE\"\r\n            }),\r\n            new ForeignKeyMetadata({\r\n                entityMetadata: entityMetadata,\r\n                referencedEntityMetadata: relation.inverseEntityMetadata,\r\n                columns: inverseJunctionColumns,\r\n                referencedColumns: inverseReferencedColumns,\r\n                onDelete: \"CASCADE\"\r\n            }),\r\n        ];\r\n\r\n        // create junction table indices\r\n        entityMetadata.indices = [\r\n            new IndexMetadata({\r\n                entityMetadata: entityMetadata,\r\n                columns: junctionColumns,\r\n                args: {\r\n                    target: \"\",\r\n                    unique: false\r\n                }\r\n            }),\r\n\r\n            new IndexMetadata({\r\n                entityMetadata: entityMetadata,\r\n                columns: inverseJunctionColumns,\r\n                args: {\r\n                    target: \"\",\r\n                    unique: false\r\n                }\r\n            })\r\n        ];\r\n\r\n        // finally return entity metadata\r\n        return entityMetadata;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Collects referenced columns from the given join column args.\r\n     */\r\n    protected collectReferencedColumns(relation: RelationMetadata, joinTable: JoinTableMetadataArgs): ColumnMetadata[] {\r\n        const hasAnyReferencedColumnName = joinTable.joinColumns ? joinTable.joinColumns.find(joinColumn => !!joinColumn.referencedColumnName) : false;\r\n        if (!joinTable.joinColumns || (joinTable.joinColumns && !hasAnyReferencedColumnName)) {\r\n            return relation.entityMetadata.columns.filter(column => column.isPrimary);\r\n        } else {\r\n            return joinTable.joinColumns.map(joinColumn => {\r\n                const referencedColumn = relation.entityMetadata.columns.find(column => column.propertyName === joinColumn.referencedColumnName);\r\n                if (!referencedColumn)\r\n                    throw new Error(`Referenced column ${joinColumn.referencedColumnName} was not found in entity ${relation.entityMetadata.name}`);\r\n\r\n                return referencedColumn;\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Collects inverse referenced columns from the given join column args.\r\n     */\r\n    protected collectInverseReferencedColumns(relation: RelationMetadata, joinTable: JoinTableMetadataArgs): ColumnMetadata[] {\r\n        const hasInverseJoinColumns = !!joinTable.inverseJoinColumns;\r\n        const hasAnyInverseReferencedColumnName = hasInverseJoinColumns ? joinTable.inverseJoinColumns!.find(joinColumn => !!joinColumn.referencedColumnName) : false;\r\n        if (!hasInverseJoinColumns || (hasInverseJoinColumns && !hasAnyInverseReferencedColumnName)) {\r\n            return relation.inverseEntityMetadata.primaryColumns;\r\n        } else {\r\n            return joinTable.inverseJoinColumns!.map(joinColumn => {\r\n                const referencedColumn = relation.inverseEntityMetadata.ownColumns.find(column => column.propertyName === joinColumn.referencedColumnName);\r\n                if (!referencedColumn)\r\n                    throw new Error(`Referenced column ${joinColumn.referencedColumnName} was not found in entity ${relation.inverseEntityMetadata.name}`);\r\n\r\n                return referencedColumn;\r\n            });\r\n        }\r\n    }\r\n\r\n    protected changeDuplicatedColumnNames(junctionColumns: ColumnMetadata[], inverseJunctionColumns: ColumnMetadata[]) {\r\n        junctionColumns.forEach(junctionColumn => {\r\n            inverseJunctionColumns.forEach(inverseJunctionColumn => {\r\n                if (junctionColumn.givenDatabaseName === inverseJunctionColumn.givenDatabaseName) {\r\n                    const junctionColumnName = this.connection.namingStrategy.joinTableColumnDuplicationPrefix(junctionColumn.propertyName, 1);\r\n                    junctionColumn.propertyName = junctionColumnName;\r\n                    junctionColumn.givenDatabaseName = junctionColumnName;\r\n\r\n                    const inverseJunctionColumnName = this.connection.namingStrategy.joinTableColumnDuplicationPrefix(inverseJunctionColumn.propertyName, 2);\r\n                    inverseJunctionColumn.propertyName = inverseJunctionColumnName;\r\n                    inverseJunctionColumn.givenDatabaseName = inverseJunctionColumnName;\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n}"],"sourceRoot":".."}