{"version":3,"sources":["../../src/repository/TreeRepository.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAAwC;AAGxC,uFAAoF;AAEpF;;;;GAIG;AACH;IAA4C,kCAAkB;IAA9D;;IAkRA,CAAC;IAhRG,yBAAyB;IACzB,2BAA2B;IAE3B,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACG,kCAAS,GAAf;;;;;;4BACkB,qBAAM,IAAI,CAAC,SAAS,EAAE,EAAA;;wBAA9B,KAAK,GAAG,SAAsB;wBACpC,qBAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAA9B,CAA8B,CAAC,CAAC,EAAA;;wBAApE,SAAoE,CAAC;wBACrE,sBAAO,KAAK,EAAC;;;;KAChB;IAED;;OAEG;IACH,kCAAS,GAAT;QAAA,iBAUC;QATG,IAAM,WAAW,GAAG,UAAC,KAAa,IAAK,OAAA,KAAI,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAA5C,CAA4C,CAAC;QACpF,IAAM,YAAY,GAAG,UAAC,MAAc,IAAK,OAAA,KAAI,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAA7C,CAA6C,CAAC;QACvF,IAAM,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CAC9E,IAAI,CAAC,QAAQ,CAAC,kBAAmB,CAAC,YAAY,EAAE,IAAI,CACrD,CAAC;QAEF,OAAO,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC;aACvC,KAAK,CAAI,WAAW,CAAC,YAAY,CAAC,SAAI,YAAY,CAAC,kBAAkB,CAAC,aAAU,CAAC;aACjF,OAAO,EAAE,CAAC;IACnB,CAAC;IAED;;OAEG;IACH,wCAAe,GAAf,UAAgB,MAAc;QAC1B,OAAO,IAAI;aACN,6BAA6B,CAAC,YAAY,EAAE,aAAa,EAAE,MAAM,CAAC;aAClE,OAAO,EAAE,CAAC;IACnB,CAAC;IAED;;OAEG;IACH,4CAAmB,GAAnB,UAAoB,MAAc;QAAlC,iBAUC;QATG,gEAAgE;QAChE,OAAO,IAAI;aACN,6BAA6B,CAAC,YAAY,EAAE,aAAa,EAAE,MAAM,CAAC;aAClE,iBAAiB,EAAE;aACnB,IAAI,CAAC,UAAA,kBAAkB;YACpB,IAAM,YAAY,GAAG,KAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,kBAAkB,CAAC,GAAG,CAAC,CAAC;YACnF,KAAI,CAAC,uBAAuB,CAAC,MAAM,EAAE,kBAAkB,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;YAChF,OAAO,MAAM,CAAC;QAClB,CAAC,CAAC,CAAC;IACX,CAAC;IAED;;OAEG;IACH,yCAAgB,GAAhB,UAAiB,MAAc;QAC3B,OAAO,IAAI;aACN,6BAA6B,CAAC,YAAY,EAAE,aAAa,EAAE,MAAM,CAAC;aAClE,QAAQ,EAAE,CAAC;IACpB,CAAC;IAED;;OAEG;IACH,sDAA6B,GAA7B,UAA8B,KAAa,EAAE,iBAAyB,EAAE,MAAc;QAAtF,iBA0DC;QAxDG,0CAA0C;QAC1C,IAAM,MAAM,GAAG,UAAC,KAAa,IAAK,OAAA,KAAI,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAA5C,CAA4C,CAAC;QAE/E,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,KAAK,eAAe,EAAE;YAE5C,IAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAA,MAAM;gBACjF,OAAO,MAAM,CAAC,iBAAiB,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,gBAAiB,CAAC,YAAY,CAAC,CAAC;YACvJ,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAEjB,IAAM,YAAU,GAAkB,EAAE,CAAC;YACrC,IAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,eAAe,CAAC,GAAG,CAAC,UAAA,MAAM;gBAChF,YAAU,CAAC,MAAM,CAAC,gBAAiB,CAAC,YAAY,CAAC,GAAG,MAAM,CAAC,gBAAiB,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;gBACpG,OAAO,MAAM,CAAC,iBAAiB,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,MAAM,GAAG,MAAM,CAAC,gBAAiB,CAAC,YAAY,CAAC;YAC1H,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAEjB,OAAO,IAAI;iBACN,kBAAkB,CAAC,KAAK,CAAC;iBACzB,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,SAAS,EAAE,iBAAiB,EAAE,aAAa,CAAC;iBACzF,KAAK,CAAC,cAAc,CAAC;iBACrB,aAAa,CAAC,YAAU,CAAC,CAAC;SAElC;aAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,KAAK,YAAY,EAAE;YAEhD,IAAM,cAAc,GAAG,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,mBAAoB,CAAC,YAAY,GAAG,WAAW;gBAC9F,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,mBAAoB,CAAC,YAAY,GAAG,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,oBAAqB,CAAC,YAAY,CAAC;YACpI,IAAM,YAAU,GAAkB,EAAE,CAAC;YACrC,IAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,kBAAmB,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU;gBAC9E,IAAM,aAAa,GAAG,UAAU,CAAC,gBAAiB,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;gBAClF,YAAU,CAAC,aAAa,CAAC,GAAG,UAAU,CAAC,gBAAiB,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;gBAChF,OAAO,SAAS,GAAG,UAAU,CAAC,gBAAiB,CAAC,YAAY,GAAG,MAAM,GAAG,aAAa,CAAC;YAC1F,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAEjB,OAAO,IAAI;iBACN,kBAAkB,CAAC,KAAK,CAAC;iBACzB,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,EAAE,cAAc,CAAC;iBAC7D,KAAK,CAAC,aAAa,EAAE,YAAU,CAAC,CAAC;SAEzC;aAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,KAAK,mBAAmB,EAAE;YACvD,OAAO,IAAI;iBACN,kBAAkB,CAAC,KAAK,CAAC;iBACzB,KAAK,CAAC,UAAA,EAAE;gBACL,IAAM,QAAQ,GAAG,EAAE,CAAC,QAAQ,EAAE;qBACzB,MAAM,CAAI,KAAI,CAAC,QAAQ,CAAC,UAAU,SAAI,KAAI,CAAC,QAAQ,CAAC,sBAAuB,CAAC,YAAc,EAAE,MAAM,CAAC;qBACnG,IAAI,CAAC,KAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;qBACpD,UAAU,CAAC,KAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;gBAEtD,EAAE,CAAC,mBAAmB,CAAC,QAAQ,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;gBAChE,IAAI,KAAI,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,YAAY,2CAAoB,EAAE;oBAChE,OAAU,KAAK,SAAI,KAAI,CAAC,QAAQ,CAAC,sBAAuB,CAAC,YAAY,cAAS,QAAQ,CAAC,QAAQ,EAAE,YAAS,CAAC;iBAC9G;qBAAM;oBACH,OAAU,KAAK,SAAI,KAAI,CAAC,QAAQ,CAAC,sBAAuB,CAAC,YAAY,qBAAgB,QAAQ,CAAC,QAAQ,EAAE,WAAQ,CAAC;iBACpH;YACL,CAAC,CAAC,CAAC;SACV;QAED,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;IACvD,CAAC;IAED;;OAEG;IACH,sCAAa,GAAb,UAAc,MAAc;QACxB,OAAO,IAAI;aACN,2BAA2B,CAAC,YAAY,EAAE,aAAa,EAAE,MAAM,CAAC;aAChE,OAAO,EAAE,CAAC;IACnB,CAAC;IAED;;OAEG;IACH,0CAAiB,GAAjB,UAAkB,MAAc;QAAhC,iBAUC;QATG,gEAAgE;QAChE,OAAO,IAAI;aACN,2BAA2B,CAAC,YAAY,EAAE,aAAa,EAAE,MAAM,CAAC;aAChE,iBAAiB,EAAE;aACnB,IAAI,CAAC,UAAA,kBAAkB;YACpB,IAAM,YAAY,GAAG,KAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,kBAAkB,CAAC,GAAG,CAAC,CAAC;YACnF,KAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,kBAAkB,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;YAC9E,OAAO,MAAM,CAAC;QAClB,CAAC,CAAC,CAAC;IACX,CAAC;IAED;;OAEG;IACH,uCAAc,GAAd,UAAe,MAAc;QACzB,OAAO,IAAI;aACN,2BAA2B,CAAC,YAAY,EAAE,aAAa,EAAE,MAAM,CAAC;aAChE,QAAQ,EAAE,CAAC;IACpB,CAAC;IAED;;OAEG;IACH,oDAA2B,GAA3B,UAA4B,KAAa,EAAE,iBAAyB,EAAE,MAAc;QAEhF,0CAA0C;QAC1C,kFAAkF;QAHtF,iBA4DC;QAvDG,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,KAAK,eAAe,EAAE;YAC5C,IAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,eAAe,CAAC,GAAG,CAAC,UAAA,MAAM;gBAC/E,OAAO,iBAAiB,GAAG,GAAG,GAAG,MAAM,CAAC,YAAY,GAAG,KAAK,GAAG,KAAK,GAAG,GAAG,GAAG,MAAM,CAAC,gBAAiB,CAAC,YAAY,CAAC;YACvH,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAEjB,IAAM,YAAU,GAAkB,EAAE,CAAC;YACrC,IAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAA,MAAM;gBAClF,YAAU,CAAC,MAAM,CAAC,gBAAiB,CAAC,YAAY,CAAC,GAAG,MAAM,CAAC,gBAAiB,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;gBACpG,OAAO,iBAAiB,GAAG,GAAG,GAAG,MAAM,CAAC,YAAY,GAAG,MAAM,GAAG,MAAM,CAAC,gBAAiB,CAAC,YAAY,CAAC;YAC1G,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAEjB,OAAO,IAAI;iBACN,kBAAkB,CAAC,KAAK,CAAC;iBACzB,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,SAAS,EAAE,iBAAiB,EAAE,aAAa,CAAC;iBACzF,KAAK,CAAC,cAAc,CAAC;iBACrB,aAAa,CAAC,YAAU,CAAC,CAAC;SAElC;aAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,KAAK,YAAY,EAAE;YAEhD,IAAM,aAAa,GAAG,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,mBAAoB,CAAC,YAAY,GAAG,WAAW;gBAC3F,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,mBAAoB,CAAC,YAAY,GAAG,OAAO,GAAG,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,oBAAqB,CAAC,YAAY,CAAC;YAC7I,IAAM,YAAU,GAAkB,EAAE,CAAC;YACrC,IAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,kBAAmB,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU;gBAC/E,IAAM,aAAa,GAAG,UAAU,CAAC,gBAAiB,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;gBAClF,YAAU,CAAC,aAAa,CAAC,GAAG,UAAU,CAAC,gBAAiB,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;gBAChF,OAAO,SAAS,GAAG,UAAU,CAAC,gBAAiB,CAAC,YAAY,GAAG,MAAM,GAAG,aAAa,CAAC;YAC1F,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAEjB,OAAO,IAAI;iBACN,kBAAkB,CAAC,KAAK,CAAC;iBACzB,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,EAAE,aAAa,CAAC;iBAC5D,KAAK,CAAC,cAAc,EAAE,YAAU,CAAC,CAAC;SAG1C;aAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,KAAK,mBAAmB,EAAE;YACvD,+HAA+H;YAC/H,OAAO,IAAI;iBACN,kBAAkB,CAAC,KAAK,CAAC;iBACzB,KAAK,CAAC,UAAA,EAAE;gBACL,IAAM,QAAQ,GAAG,EAAE,CAAC,QAAQ,EAAE;qBACzB,MAAM,CAAI,KAAI,CAAC,QAAQ,CAAC,UAAU,SAAI,KAAI,CAAC,QAAQ,CAAC,sBAAuB,CAAC,YAAc,EAAE,MAAM,CAAC;qBACnG,IAAI,CAAC,KAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;qBACpD,UAAU,CAAC,KAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;gBAEtD,EAAE,CAAC,mBAAmB,CAAC,QAAQ,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;gBAChE,IAAI,KAAI,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,YAAY,2CAAoB,EAAE;oBAChE,OAAU,QAAQ,CAAC,QAAQ,EAAE,cAAS,KAAK,SAAI,KAAI,CAAC,QAAQ,CAAC,sBAAuB,CAAC,YAAY,YAAS,CAAC;iBAE9G;qBAAM;oBACH,OAAU,QAAQ,CAAC,QAAQ,EAAE,qBAAgB,KAAK,SAAI,KAAI,CAAC,QAAQ,CAAC,sBAAuB,CAAC,YAAY,WAAQ,CAAC;iBACpH;YACL,CAAC,CAAC,CAAC;SACV;QAED,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;IACvD,CAAC;IAED;;;;;QAKI;IAEJ,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAElE,2CAAkB,GAA5B,UAA6B,KAAa,EAAE,UAAiB;QAA7D,iBAOC;QANG,OAAO,UAAU,CAAC,GAAG,CAAC,UAAA,SAAS;YAC3B,OAAO;gBACH,EAAE,EAAE,SAAS,CAAC,KAAK,GAAG,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;gBACzE,QAAQ,EAAE,SAAS,CAAC,KAAK,GAAG,GAAG,GAAG,KAAI,CAAC,QAAQ,CAAC,kBAAmB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC;aACxG,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAES,gDAAuB,GAAjC,UAAkC,MAAW,EAAE,QAAe,EAAE,YAA0C;QAA1G,iBASC;QARG,IAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,oBAAqB,CAAC,YAAY,CAAC;QACvE,IAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC9E,IAAM,iBAAiB,GAAG,YAAY,CAAC,MAAM,CAAC,UAAA,WAAW,IAAI,OAAA,WAAW,CAAC,QAAQ,KAAK,cAAc,EAAvC,CAAuC,CAAC,CAAC;QACtG,IAAM,QAAQ,GAAG,iBAAiB,CAAC,GAAG,CAAC,UAAA,WAAW,IAAI,OAAA,WAAW,CAAC,EAAE,EAAd,CAAc,CAAC,CAAC;QACtE,MAAM,CAAC,aAAa,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,EAAlC,CAAkC,CAAC,CAAC;QACtF,MAAM,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,UAAC,WAAgB;YAC3C,KAAI,CAAC,uBAAuB,CAAC,WAAW,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;IACP,CAAC;IAES,8CAAqB,GAA/B,UAAgC,MAAW,EAAE,QAAe,EAAE,YAA0C;QAAxG,iBAcC;QAbG,IAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,kBAAmB,CAAC,YAAY,CAAC;QACtE,IAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QACxE,IAAM,iBAAiB,GAAG,YAAY,CAAC,IAAI,CAAC,UAAA,WAAW,IAAI,OAAA,WAAW,CAAC,EAAE,KAAK,QAAQ,EAA3B,CAA2B,CAAC,CAAC;QACxF,IAAM,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAA,MAAM;YACrC,IAAI,CAAC,iBAAiB;gBAClB,OAAO,KAAK,CAAC;YAEjB,OAAO,MAAM,CAAC,KAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,KAAK,iBAAiB,CAAC,QAAQ,CAAC;QAC/F,CAAC,CAAC,CAAC;QACH,IAAI,YAAY,EAAE;YACd,MAAM,CAAC,cAAc,CAAC,GAAG,YAAY,CAAC;YACtC,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;SAC9E;IACL,CAAC;IAEL,qBAAC;AAAD,CAlRA,AAkRC,CAlR2C,uBAAU,GAkRrD;AAlRY,wCAAc","file":"TreeRepository.js","sourcesContent":["import {Repository} from \"./Repository\";\r\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {AbstractSqliteDriver} from \"../driver/sqlite-abstract/AbstractSqliteDriver\";\r\n\r\n/**\r\n * Repository with additional functions to work with trees.\r\n *\r\n * @see Repository\r\n */\r\nexport class TreeRepository<Entity> extends Repository<Entity> {\r\n\r\n    // todo: implement moving\r\n    // todo: implement removing\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets complete trees for all roots in the table.\r\n     */\r\n    async findTrees(): Promise<Entity[]> {\r\n        const roots = await this.findRoots();\r\n        await Promise.all(roots.map(root => this.findDescendantsTree(root)));\r\n        return roots;\r\n    }\r\n\r\n    /**\r\n     * Roots are entities that have no ancestors. Finds them all.\r\n     */\r\n    findRoots(): Promise<Entity[]> {\r\n        const escapeAlias = (alias: string) => this.manager.connection.driver.escape(alias);\r\n        const escapeColumn = (column: string) => this.manager.connection.driver.escape(column);\r\n        const parentPropertyName = this.manager.connection.namingStrategy.joinColumnName(\r\n          this.metadata.treeParentRelation!.propertyName, \"id\"\r\n        );\r\n\r\n        return this.createQueryBuilder(\"treeEntity\")\r\n            .where(`${escapeAlias(\"treeEntity\")}.${escapeColumn(parentPropertyName)} IS NULL`)\r\n            .getMany();\r\n    }\r\n\r\n    /**\r\n     * Gets all children (descendants) of the given entity. Returns them all in a flat array.\r\n     */\r\n    findDescendants(entity: Entity): Promise<Entity[]> {\r\n        return this\r\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\r\n            .getMany();\r\n    }\r\n\r\n    /**\r\n     * Gets all children (descendants) of the given entity. Returns them in a tree - nested into each other.\r\n     */\r\n    findDescendantsTree(entity: Entity): Promise<Entity> {\r\n        // todo: throw exception if there is no column of this relation?\r\n        return this\r\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\r\n            .getRawAndEntities()\r\n            .then(entitiesAndScalars => {\r\n                const relationMaps = this.createRelationMaps(\"treeEntity\", entitiesAndScalars.raw);\r\n                this.buildChildrenEntityTree(entity, entitiesAndScalars.entities, relationMaps);\r\n                return entity;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Gets number of descendants of the entity.\r\n     */\r\n    countDescendants(entity: Entity): Promise<number> {\r\n        return this\r\n            .createDescendantsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\r\n            .getCount();\r\n    }\r\n\r\n    /**\r\n     * Creates a query builder used to get descendants of the entities in a tree.\r\n     */\r\n    createDescendantsQueryBuilder(alias: string, closureTableAlias: string, entity: Entity): SelectQueryBuilder<Entity> {\r\n\r\n        // create shortcuts for better readability\r\n        const escape = (alias: string) => this.manager.connection.driver.escape(alias);\r\n\r\n        if (this.metadata.treeType === \"closure-table\") {\r\n\r\n            const joinCondition = this.metadata.closureJunctionTable.descendantColumns.map(column => {\r\n                return escape(closureTableAlias) + \".\" + escape(column.propertyPath) + \" = \" + escape(alias) + \".\" + escape(column.referencedColumn!.propertyPath);\r\n            }).join(\" AND \");\r\n\r\n            const parameters: ObjectLiteral = {};\r\n            const whereCondition = this.metadata.closureJunctionTable.ancestorColumns.map(column => {\r\n                parameters[column.referencedColumn!.propertyName] = column.referencedColumn!.getEntityValue(entity);\r\n                return escape(closureTableAlias) + \".\" + escape(column.propertyPath) + \" = :\" + column.referencedColumn!.propertyName;\r\n            }).join(\" AND \");\r\n\r\n            return this\r\n                .createQueryBuilder(alias)\r\n                .innerJoin(this.metadata.closureJunctionTable.tableName, closureTableAlias, joinCondition)\r\n                .where(whereCondition)\r\n                .setParameters(parameters);\r\n\r\n        } else if (this.metadata.treeType === \"nested-set\") {\r\n\r\n            const whereCondition = alias + \".\" + this.metadata.nestedSetLeftColumn!.propertyPath + \" BETWEEN \" +\r\n                \"joined.\" + this.metadata.nestedSetLeftColumn!.propertyPath + \" AND joined.\" + this.metadata.nestedSetRightColumn!.propertyPath;\r\n            const parameters: ObjectLiteral = {};\r\n            const joinCondition = this.metadata.treeParentRelation!.joinColumns.map(joinColumn => {\r\n                const parameterName = joinColumn.referencedColumn!.propertyPath.replace(\".\", \"_\");\r\n                parameters[parameterName] = joinColumn.referencedColumn!.getEntityValue(entity);\r\n                return \"joined.\" + joinColumn.referencedColumn!.propertyPath + \" = :\" + parameterName;\r\n            }).join(\" AND \");\r\n\r\n            return this\r\n                .createQueryBuilder(alias)\r\n                .innerJoin(this.metadata.targetName, \"joined\", whereCondition)\r\n                .where(joinCondition, parameters);\r\n\r\n        } else if (this.metadata.treeType === \"materialized-path\") {\r\n            return this\r\n                .createQueryBuilder(alias)\r\n                .where(qb => {\r\n                    const subQuery = qb.subQuery()\r\n                        .select(`${this.metadata.targetName}.${this.metadata.materializedPathColumn!.propertyPath}`, \"path\")\r\n                        .from(this.metadata.target, this.metadata.targetName)\r\n                        .whereInIds(this.metadata.getEntityIdMap(entity));\r\n\r\n                    qb.setNativeParameters(subQuery.expressionMap.nativeParameters);\r\n                    if (this.manager.connection.driver instanceof AbstractSqliteDriver) {\r\n                        return `${alias}.${this.metadata.materializedPathColumn!.propertyPath} LIKE ${subQuery.getQuery()} || '%'`;\r\n                    } else {\r\n                        return `${alias}.${this.metadata.materializedPathColumn!.propertyPath} LIKE CONCAT(${subQuery.getQuery()}, '%')`;\r\n                    }\r\n                });\r\n        }\r\n\r\n        throw new Error(`Supported only in tree entities`);\r\n    }\r\n\r\n    /**\r\n     * Gets all parents (ancestors) of the given entity. Returns them all in a flat array.\r\n     */\r\n    findAncestors(entity: Entity): Promise<Entity[]> {\r\n        return this\r\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\r\n            .getMany();\r\n    }\r\n\r\n    /**\r\n     * Gets all parents (ancestors) of the given entity. Returns them in a tree - nested into each other.\r\n     */\r\n    findAncestorsTree(entity: Entity): Promise<Entity> {\r\n        // todo: throw exception if there is no column of this relation?\r\n        return this\r\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\r\n            .getRawAndEntities()\r\n            .then(entitiesAndScalars => {\r\n                const relationMaps = this.createRelationMaps(\"treeEntity\", entitiesAndScalars.raw);\r\n                this.buildParentEntityTree(entity, entitiesAndScalars.entities, relationMaps);\r\n                return entity;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Gets number of ancestors of the entity.\r\n     */\r\n    countAncestors(entity: Entity): Promise<number> {\r\n        return this\r\n            .createAncestorsQueryBuilder(\"treeEntity\", \"treeClosure\", entity)\r\n            .getCount();\r\n    }\r\n\r\n    /**\r\n     * Creates a query builder used to get ancestors of the entities in the tree.\r\n     */\r\n    createAncestorsQueryBuilder(alias: string, closureTableAlias: string, entity: Entity): SelectQueryBuilder<Entity> {\r\n\r\n        // create shortcuts for better readability\r\n        // const escape = (alias: string) => this.manager.connection.driver.escape(alias);\r\n\r\n        if (this.metadata.treeType === \"closure-table\") {\r\n            const joinCondition = this.metadata.closureJunctionTable.ancestorColumns.map(column => {\r\n                return closureTableAlias + \".\" + column.propertyPath + \" = \" + alias + \".\" + column.referencedColumn!.propertyPath;\r\n            }).join(\" AND \");\r\n\r\n            const parameters: ObjectLiteral = {};\r\n            const whereCondition = this.metadata.closureJunctionTable.descendantColumns.map(column => {\r\n                parameters[column.referencedColumn!.propertyName] = column.referencedColumn!.getEntityValue(entity);\r\n                return closureTableAlias + \".\" + column.propertyPath + \" = :\" + column.referencedColumn!.propertyName;\r\n            }).join(\" AND \");\r\n\r\n            return this\r\n                .createQueryBuilder(alias)\r\n                .innerJoin(this.metadata.closureJunctionTable.tableName, closureTableAlias, joinCondition)\r\n                .where(whereCondition)\r\n                .setParameters(parameters);\r\n\r\n        } else if (this.metadata.treeType === \"nested-set\") {\r\n\r\n            const joinCondition = \"joined.\" + this.metadata.nestedSetLeftColumn!.propertyPath + \" BETWEEN \" +\r\n                alias + \".\" + this.metadata.nestedSetLeftColumn!.propertyPath + \" AND \" + alias + \".\" + this.metadata.nestedSetRightColumn!.propertyPath;\r\n            const parameters: ObjectLiteral = {};\r\n            const whereCondition = this.metadata.treeParentRelation!.joinColumns.map(joinColumn => {\r\n                const parameterName = joinColumn.referencedColumn!.propertyPath.replace(\".\", \"_\");\r\n                parameters[parameterName] = joinColumn.referencedColumn!.getEntityValue(entity);\r\n                return \"joined.\" + joinColumn.referencedColumn!.propertyPath + \" = :\" + parameterName;\r\n            }).join(\" AND \");\r\n\r\n            return this\r\n                .createQueryBuilder(alias)\r\n                .innerJoin(this.metadata.targetName, \"joined\", joinCondition)\r\n                .where(whereCondition, parameters);\r\n\r\n\r\n        } else if (this.metadata.treeType === \"materialized-path\") {\r\n            // example: SELECT * FROM category category WHERE (SELECT mpath FROM `category` WHERE id = 2) LIKE CONCAT(category.mpath, '%');\r\n            return this\r\n                .createQueryBuilder(alias)\r\n                .where(qb => {\r\n                    const subQuery = qb.subQuery()\r\n                        .select(`${this.metadata.targetName}.${this.metadata.materializedPathColumn!.propertyPath}`, \"path\")\r\n                        .from(this.metadata.target, this.metadata.targetName)\r\n                        .whereInIds(this.metadata.getEntityIdMap(entity));\r\n\r\n                    qb.setNativeParameters(subQuery.expressionMap.nativeParameters);\r\n                    if (this.manager.connection.driver instanceof AbstractSqliteDriver) {\r\n                        return `${subQuery.getQuery()} LIKE ${alias}.${this.metadata.materializedPathColumn!.propertyPath} || '%'`;\r\n\r\n                    } else {\r\n                        return `${subQuery.getQuery()} LIKE CONCAT(${alias}.${this.metadata.materializedPathColumn!.propertyPath}, '%')`;\r\n                    }\r\n                });\r\n        }\r\n\r\n        throw new Error(`Supported only in tree entities`);\r\n    }\r\n\r\n    /**\r\n     * Moves entity to the children of then given entity.\r\n     *\r\n    move(entity: Entity, to: Entity): Promise<void> {\r\n        return Promise.resolve();\r\n    } */\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected createRelationMaps(alias: string, rawResults: any[]): { id: any, parentId: any }[] {\r\n        return rawResults.map(rawResult => {\r\n            return {\r\n                id: rawResult[alias + \"_\" + this.metadata.primaryColumns[0].databaseName],\r\n                parentId: rawResult[alias + \"_\" + this.metadata.treeParentRelation!.joinColumns[0].givenDatabaseName]\r\n            };\r\n        });\r\n    }\r\n\r\n    protected buildChildrenEntityTree(entity: any, entities: any[], relationMaps: { id: any, parentId: any }[]): void {\r\n        const childProperty = this.metadata.treeChildrenRelation!.propertyName;\r\n        const parentEntityId = this.metadata.primaryColumns[0].getEntityValue(entity);\r\n        const childRelationMaps = relationMaps.filter(relationMap => relationMap.parentId === parentEntityId);\r\n        const childIds = childRelationMaps.map(relationMap => relationMap.id);\r\n        entity[childProperty] = entities.filter(entity => childIds.indexOf(entity.id) !== -1);\r\n        entity[childProperty].forEach((childEntity: any) => {\r\n            this.buildChildrenEntityTree(childEntity, entities, relationMaps);\r\n        });\r\n    }\r\n\r\n    protected buildParentEntityTree(entity: any, entities: any[], relationMaps: { id: any, parentId: any }[]): void {\r\n        const parentProperty = this.metadata.treeParentRelation!.propertyName;\r\n        const entityId = this.metadata.primaryColumns[0].getEntityValue(entity);\r\n        const parentRelationMap = relationMaps.find(relationMap => relationMap.id === entityId);\r\n        const parentEntity = entities.find(entity => {\r\n            if (!parentRelationMap)\r\n                return false;\r\n\r\n            return entity[this.metadata.primaryColumns[0].propertyName] === parentRelationMap.parentId;\r\n        });\r\n        if (parentEntity) {\r\n            entity[parentProperty] = parentEntity;\r\n            this.buildParentEntityTree(entity[parentProperty], entities, relationMaps);\r\n        }\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}