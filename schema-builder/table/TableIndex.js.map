{"version":3,"sources":["../../src/schema-builder/table/TableIndex.ts"],"names":[],"mappings":";;AAGA;;GAEG;AACH;IAsCI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,oBAAY,OAA0B;QA/BtC;;WAEG;QACH,gBAAW,GAAa,EAAE,CAAC;QA6BvB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;QACvC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QACjC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;QACnC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;QACrC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;IAC/B,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,0BAAK,GAAL;QACI,OAAO,IAAI,UAAU,CAAoB;YACrC,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,WAAW,EAAM,IAAI,CAAC,WAAW,QAAC;YAClC,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,KAAK,EAAE,IAAI,CAAC,KAAK;SACpB,CAAC,CAAC;IACP,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACI,iBAAM,GAAb,UAAc,aAA4B;QACtC,OAAO,IAAI,UAAU,CAAoB;YACrC,IAAI,EAAE,aAAa,CAAC,IAAI;YACxB,WAAW,EAAE,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,YAAY,EAAnB,CAAmB,CAAC;YACrE,QAAQ,EAAE,aAAa,CAAC,QAAQ;YAChC,SAAS,EAAE,aAAa,CAAC,SAAS;YAClC,UAAU,EAAE,aAAa,CAAC,UAAU;YACpC,KAAK,EAAE,aAAa,CAAC,KAAK;SAC7B,CAAC,CAAC;IACP,CAAC;IAEL,iBAAC;AAAD,CAvFA,AAuFC,IAAA;AAvFY,gCAAU","file":"TableIndex.js","sourcesContent":["import {IndexMetadata} from \"../../metadata/IndexMetadata\";\r\nimport {TableIndexOptions} from \"../options/TableIndexOptions\";\r\n\r\n/**\r\n * Database's table index stored in this class.\r\n */\r\nexport class TableIndex {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Index name.\r\n     */\r\n    name?: string;\r\n\r\n    /**\r\n     * Columns included in this index.\r\n     */\r\n    columnNames: string[] = [];\r\n\r\n    /**\r\n     * Indicates if this index is unique.\r\n     */\r\n    isUnique?: boolean;\r\n\r\n    /**\r\n     * The SPATIAL modifier indexes the entire column and does not allow indexed columns to contain NULL values.\r\n     * Works only in MySQL.\r\n     */\r\n    isSpatial?: boolean;\r\n\r\n    /**\r\n     * The FULLTEXT modifier indexes the entire column and does not allow prefixing.\r\n     * Works only in MySQL.\r\n     */\r\n    isFulltext?: boolean;\r\n\r\n    /**\r\n     * Index filter condition.\r\n     */\r\n    where?: string;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(options: TableIndexOptions) {\r\n        this.name = options.name;\r\n        this.columnNames = options.columnNames;\r\n        this.isUnique = options.isUnique;\r\n        this.isSpatial = options.isSpatial;\r\n        this.isFulltext = options.isFulltext;\r\n        this.where = options.where;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new copy of this index with exactly same properties.\r\n     */\r\n    clone(): TableIndex {\r\n        return new TableIndex(<TableIndexOptions>{\r\n            name: this.name,\r\n            columnNames: [...this.columnNames],\r\n            isUnique: this.isUnique,\r\n            isSpatial: this.isSpatial,\r\n            isFulltext: this.isFulltext,\r\n            where: this.where\r\n        });\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates index from the index metadata object.\r\n     */\r\n    static create(indexMetadata: IndexMetadata): TableIndex {\r\n        return new TableIndex(<TableIndexOptions>{\r\n            name: indexMetadata.name,\r\n            columnNames: indexMetadata.columns.map(column => column.databaseName),\r\n            isUnique: indexMetadata.isUnique,\r\n            isSpatial: indexMetadata.isSpatial,\r\n            isFulltext: indexMetadata.isFulltext,\r\n            where: indexMetadata.where\r\n        });\r\n    }\r\n\r\n}"],"sourceRoot":"../.."}