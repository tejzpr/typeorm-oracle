{"version":3,"sources":["../../src/persistence/subject-builder/OneToManySubjectBuilder.ts"],"names":[],"mappings":"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","file":"OneToManySubjectBuilder.js","sourcesContent":["import {Subject} from \"../Subject\";\r\nimport {OrmUtils} from \"../../util/OrmUtils\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\r\n\r\n/**\r\n * Builds operations needs to be executed for one-to-many relations of the given subjects.\r\n *\r\n * by example: post contains one-to-many relation with category in the property called \"categories\", e.g.\r\n *             @OneToMany(type => Category, category => category.post) categories: Category[]\r\n *             If user adds categories into the post and saves post we need to bind them.\r\n *             This operation requires updation of category table since its owner of the relation and contains a join column.\r\n *\r\n * note: this class shares lot of things with OneToOneInverseSideOperationBuilder, so when you change this class\r\n *       make sure to reflect changes there as well.\r\n */\r\nexport class OneToManySubjectBuilder {\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(protected subjects: Subject[]) {\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds all required operations.\r\n     */\r\n    build(): void {\r\n        this.subjects.forEach(subject => {\r\n            subject.metadata.oneToManyRelations.forEach(relation => {\r\n\r\n                // skip relations for which persistence is disabled\r\n                if (relation.persistenceEnabled === false)\r\n                    return;\r\n\r\n                this.buildForSubjectRelation(subject, relation);\r\n            });\r\n        });\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Protected Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds operations for a given subject and relation.\r\n     *\r\n     * by example: subject is \"post\" entity we are saving here and relation is \"categories\" inside it here.\r\n     */\r\n    protected buildForSubjectRelation(subject: Subject, relation: RelationMetadata) {\r\n\r\n        // prepare objects (relation id maps) for the database entity\r\n        // note: subject.databaseEntity contains relations with loaded relation ids only\r\n        // by example: since subject is a post, we are expecting to get all post's categories saved in the database here,\r\n        //             particularly their relation ids, e.g. category ids stored in the database\r\n        let relatedEntityDatabaseRelationIds: ObjectLiteral[] = [];\r\n        if (subject.databaseEntity) { // related entities in the database can exist only if this entity (post) is saved\r\n            relatedEntityDatabaseRelationIds = relation.getEntityValue(subject.databaseEntity);\r\n        }\r\n\r\n        // get related entities of persisted entity\r\n        // by example: get categories from the passed to persist post entity\r\n        let relatedEntities: ObjectLiteral[] = relation.getEntityValue(subject.entity!);\r\n        if (relatedEntities === null) // we treat relations set to null as removed, so we don't skip it\r\n            relatedEntities = [] as ObjectLiteral[];\r\n        if (relatedEntities === undefined) // if relation is undefined then nothing to update\r\n            return;\r\n\r\n        // extract only relation ids from the related entities, since we only need them for comparision\r\n        // by example: extract from categories only relation ids (category id, or let's say category title, depend on join column options)\r\n        const relatedPersistedEntityRelationIds: ObjectLiteral[] = [];\r\n        relatedEntities.forEach(relatedEntity => { // by example: relatedEntity is a category here\r\n            let relationIdMap = relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity); // by example: relationIdMap is category.id map here, e.g. { id: ... }\r\n\r\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\r\n            let relatedEntitySubject = this.subjects.find(subject => {\r\n                return subject.entity === relatedEntity;\r\n            });\r\n\r\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\r\n            if (relatedEntitySubject)\r\n                relationIdMap = relatedEntitySubject.identifier;\r\n\r\n            // if relationIdMap is undefined then it means user binds object which is not saved in the database yet\r\n            // by example: if post contains categories which does not have ids yet (because they are new)\r\n            //             it means they are always newly inserted and relation update operation always must be created for them\r\n            //             it does not make sense to perform difference operation for them for both add and remove actions\r\n            if (!relationIdMap) {\r\n\r\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\r\n                // if (!relatedEntitySubject)\r\n                //     throw new Error(`One-to-many relation \"${relation.entityMetadata.name}.${relation.propertyPath}\" contains ` +\r\n                //         `entities which do not exist in the database yet, thus they cannot be bind in the database. ` +\r\n                //         `Please setup cascade insertion or save entities before binding it.`);\r\n                if (!relatedEntitySubject)\r\n                    return;\r\n\r\n                // okay, so related subject exist and its marked for insertion, then add a new change map\r\n                // by example: this will tell category to insert into its post relation our post we are working with\r\n                //             relatedEntitySubject is newly inserted CategorySubject\r\n                //             relation.inverseRelation is ManyToOne relation inside Category\r\n                //             subject is Post needs to be inserted into Category\r\n                relatedEntitySubject.changeMaps.push({\r\n                    relation: relation.inverseRelation!,\r\n                    value: subject\r\n                });\r\n\r\n                return;\r\n            }\r\n\r\n            // check if this binding really exist in the database\r\n            // by example: find our category if its already bind in the database\r\n            const relationIdInDatabaseSubjectRelation = relatedEntityDatabaseRelationIds.find(relatedDatabaseEntityRelationId => {\r\n                return OrmUtils.deepCompare(relationIdMap, relatedDatabaseEntityRelationId);\r\n            });\r\n\r\n            // if relationIdMap DOES NOT exist in the subject's relation in the database it means its a new relation and we need to \"bind\" them\r\n            // by example: this will tell category to insert into its post relation our post we are working with\r\n            //             relatedEntitySubject is newly inserted CategorySubject\r\n            //             relation.inverseRelation is ManyToOne relation inside Category\r\n            //             subject is Post needs to be inserted into Category\r\n            if (!relationIdInDatabaseSubjectRelation) {\r\n\r\n                // if there is no relatedEntitySubject then it means \"category\" wasn't persisted,\r\n                // but since we are going to update \"category\" table (since its an owning side of relation with join column)\r\n                // we create a new subject here:\r\n                if (!relatedEntitySubject) {\r\n                    relatedEntitySubject = new Subject({\r\n                        metadata: relation.inverseEntityMetadata,\r\n                        parentSubject: subject,\r\n                        canBeUpdated: true,\r\n                        identifier: relationIdMap\r\n                    });\r\n                    this.subjects.push(relatedEntitySubject);\r\n                }\r\n\r\n                relatedEntitySubject.changeMaps.push({\r\n                    relation: relation.inverseRelation!,\r\n                    value: subject\r\n                });\r\n            }\r\n\r\n            // if related entity has relation id then we add it to the list of relation ids\r\n            // this list will be used later to compare with database relation ids to find a difference\r\n            // what exist in this array and does not exist in the database are newly inserted relations\r\n            // what does not exist in this array, but exist in the database are removed relations\r\n            // removed relations are set to null from inverse side of relation\r\n            relatedPersistedEntityRelationIds.push(relationIdMap);\r\n        });\r\n\r\n        // find what related entities were added and what were removed based on difference between what we save and what database has\r\n        EntityMetadata\r\n            .difference(relatedEntityDatabaseRelationIds, relatedPersistedEntityRelationIds)\r\n            .forEach(removedRelatedEntityRelationId => { // by example: removedRelatedEntityRelationId is category that was bind in the database before, but now its unbind\r\n\r\n                // todo: probably we can improve this in the future by finding entity with column those values,\r\n                // todo: maybe it was already in persistence process. This is possible due to unique requirements of join columns\r\n                // we create a new subject which operations will be executed in subject operation executor\r\n                const removedRelatedEntitySubject = new Subject({\r\n                    metadata: relation.inverseEntityMetadata,\r\n                    parentSubject: subject,\r\n                    canBeUpdated: true,\r\n                    identifier: removedRelatedEntityRelationId,\r\n                    changeMaps: [{\r\n                        relation: relation.inverseRelation!,\r\n                        value: null\r\n                    }]\r\n                });\r\n                this.subjects.push(removedRelatedEntitySubject);\r\n            });\r\n    }\r\n\r\n}"],"sourceRoot":"../.."}