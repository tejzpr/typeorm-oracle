{"version":3,"sources":["../../src/persistence/EntityPersistExecutor.ts"],"names":[],"mappings":"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","file":"EntityPersistExecutor.js","sourcesContent":["import {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {SaveOptions} from \"../repository/SaveOptions\";\r\nimport {RemoveOptions} from \"../repository/RemoveOptions\";\r\nimport {MustBeEntityError} from \"../error/MustBeEntityError\";\r\nimport {SubjectExecutor} from \"./SubjectExecutor\";\r\nimport {CannotDetermineEntityError} from \"../error/CannotDetermineEntityError\";\r\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {Subject} from \"./Subject\";\r\nimport {OneToManySubjectBuilder} from \"./subject-builder/OneToManySubjectBuilder\";\r\nimport {OneToOneInverseSideSubjectBuilder} from \"./subject-builder/OneToOneInverseSideSubjectBuilder\";\r\nimport {ManyToManySubjectBuilder} from \"./subject-builder/ManyToManySubjectBuilder\";\r\nimport {SubjectDatabaseEntityLoader} from \"./SubjectDatabaseEntityLoader\";\r\nimport {CascadesSubjectBuilder} from \"./subject-builder/CascadesSubjectBuilder\";\r\nimport {OrmUtils} from \"../util/OrmUtils\";\r\nimport {PromiseUtils} from \"../util/PromiseUtils\";\r\n\r\n/**\r\n * Persists a single entity or multiple entities - saves or removes them.\r\n */\r\nexport class EntityPersistExecutor {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection,\r\n                protected queryRunner: QueryRunner|undefined,\r\n                protected mode: \"save\"|\"remove\",\r\n                protected target: Function|string|undefined,\r\n                protected entity: ObjectLiteral|ObjectLiteral[],\r\n                protected options?: SaveOptions & RemoveOptions) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Executes persistence operation ob given entity or entities.\r\n     */\r\n    execute(): Promise<void> {\r\n\r\n        // check if entity we are going to save is valid and is an object\r\n        if (!this.entity || !(this.entity instanceof Object))\r\n            return Promise.reject(new MustBeEntityError(this.mode, this.entity));\r\n\r\n        // we MUST call \"fake\" resolve here to make sure all properties of lazily loaded relations are resolved\r\n        return Promise.resolve().then(async () => {\r\n\r\n            // if query runner is already defined in this class, it means this entity manager was already created for a single connection\r\n            // if its not defined we create a new query runner - single connection where we'll execute all our operations\r\n            const queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\r\n\r\n            // save data in the query runner - this is useful functionality to share data from outside of the world\r\n            // with third classes - like subscribers and listener methods\r\n            if (this.options && this.options.data)\r\n                queryRunner.data = this.options.data;\r\n\r\n            try {\r\n\r\n                // collect all operate subjects\r\n                const entities: ObjectLiteral[] = this.entity instanceof Array ? this.entity : [this.entity];\r\n                const entitiesInChunks = this.options && this.options.chunk && this.options.chunk > 0 ? OrmUtils.chunk(entities, this.options.chunk) : [entities];\r\n\r\n                // console.time(\"building subject executors...\");\r\n                const executors = await Promise.all(entitiesInChunks.map(async entities => {\r\n                    const subjects: Subject[] = [];\r\n\r\n                    // create subjects for all entities we received for the persistence\r\n                    entities.forEach(entity => {\r\n                        const entityTarget = this.target ? this.target : entity.constructor;\r\n                        if (entityTarget === Object)\r\n                            throw new CannotDetermineEntityError(this.mode);\r\n\r\n                        subjects.push(new Subject({\r\n                            metadata: this.connection.getMetadata(entityTarget),\r\n                            entity: entity,\r\n                            canBeInserted: this.mode === \"save\",\r\n                            canBeUpdated: this.mode === \"save\",\r\n                            mustBeRemoved: this.mode === \"remove\"\r\n                        }));\r\n                    });\r\n\r\n                    // console.time(\"building cascades...\");\r\n                    // go through each entity with metadata and create subjects and subjects by cascades for them\r\n                    const cascadesSubjectBuilder = new CascadesSubjectBuilder(subjects);\r\n                    subjects.forEach(subject => {\r\n                        // next step we build list of subjects we will operate with\r\n                        // these subjects are subjects that we need to insert or update alongside with main persisted entity\r\n                        cascadesSubjectBuilder.build(subject);\r\n                    });\r\n                    // console.timeEnd(\"building cascades...\");\r\n\r\n                    // load database entities for all subjects we have\r\n                    // next step is to load database entities for all operate subjects\r\n                    // console.time(\"loading...\");\r\n                    await new SubjectDatabaseEntityLoader(queryRunner, subjects).load(this.mode);\r\n                    // console.timeEnd(\"loading...\");\r\n\r\n                    // console.time(\"other subjects...\");\r\n                    // build all related subjects and change maps\r\n                    if (this.mode === \"save\") {\r\n                        new OneToManySubjectBuilder(subjects).build();\r\n                        new OneToOneInverseSideSubjectBuilder(subjects).build();\r\n                        new ManyToManySubjectBuilder(subjects).build();\r\n                    } else {\r\n                        subjects.forEach(subject => {\r\n                            if (subject.mustBeRemoved) {\r\n                                new ManyToManySubjectBuilder(subjects).buildForAllRemoval(subject);\r\n                            }\r\n                        });\r\n                    }\r\n                    // console.timeEnd(\"other subjects...\");\r\n                    // console.timeEnd(\"building subjects...\");\r\n                    // console.log(\"subjects\", subjects);\r\n\r\n                    // create a subject executor\r\n                    return new SubjectExecutor(queryRunner, subjects, this.options);\r\n                }));\r\n                // console.timeEnd(\"building subject executors...\");\r\n\r\n                // make sure we have at least one executable operation before we create a transaction and proceed\r\n                // if we don't have operations it means we don't really need to update or remove something\r\n                const executorsWithExecutableOperations = executors.filter(executor => executor.hasExecutableOperations);\r\n                if (executorsWithExecutableOperations.length === 0)\r\n                    return;\r\n\r\n                // start execute queries in a transaction\r\n                // if transaction is already opened in this query runner then we don't touch it\r\n                // if its not opened yet then we open it here, and once we finish - we close it\r\n                let isTransactionStartedByUs = false;\r\n                try {\r\n\r\n                    // open transaction if its not opened yet\r\n                    if (!queryRunner.isTransactionActive) {\r\n                        if (!this.options || this.options.transaction !== false) { // start transaction until it was not explicitly disabled\r\n                            isTransactionStartedByUs = true;\r\n                            await queryRunner.startTransaction();\r\n                        }\r\n                    }\r\n\r\n                    // execute all persistence operations for all entities we have\r\n                    // console.time(\"executing subject executors...\");\r\n                    await PromiseUtils.runInSequence(executorsWithExecutableOperations, executor => executor.execute());\r\n                    // console.timeEnd(\"executing subject executors...\");\r\n\r\n                    // commit transaction if it was started by us\r\n                    // console.time(\"commit\");\r\n                    if (isTransactionStartedByUs === true)\r\n                        await queryRunner.commitTransaction();\r\n                    // console.timeEnd(\"commit\");\r\n\r\n                } catch (error) {\r\n\r\n                    // rollback transaction if it was started by us\r\n                    if (isTransactionStartedByUs) {\r\n                        try {\r\n                            await queryRunner.rollbackTransaction();\r\n                        } catch (rollbackError) { }\r\n                    }\r\n                    throw error;\r\n                }\r\n\r\n            } finally {\r\n\r\n                // release query runner only if its created by us\r\n                if (!this.queryRunner)\r\n                    await queryRunner.release();\r\n            }\r\n        });\r\n    }\r\n\r\n}"],"sourceRoot":".."}