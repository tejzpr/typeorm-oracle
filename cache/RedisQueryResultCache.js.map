{"version":3,"sources":["../../src/cache/RedisQueryResultCache.ts"],"names":[],"mappings":"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","file":"RedisQueryResultCache.js","sourcesContent":["import {QueryResultCache} from \"./QueryResultCache\";\r\nimport {QueryResultCacheOptions} from \"./QueryResultCacheOptions\";\r\nimport {PlatformTools} from \"../platform/PlatformTools\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\r\n\r\n/**\r\n * Caches query result into Redis database.\r\n */\r\nexport class RedisQueryResultCache implements QueryResultCache {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Redis module instance loaded dynamically.\r\n     */\r\n    protected redis: any;\r\n\r\n    /**\r\n     * Connected redis client.\r\n     */\r\n    protected client: any;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection) {\r\n        this.redis = this.loadRedis();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a connection with given cache provider.\r\n     */\r\n    async connect(): Promise<void> {\r\n        const cacheOptions: any = this.connection.options.cache;\r\n        if (cacheOptions && cacheOptions.options) {\r\n            this.client = this.redis.createClient(cacheOptions.options);\r\n        } else {\r\n            this.client = this.redis.createClient();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a connection with given cache provider.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            this.client.quit((err: any, result: any) => {\r\n                if (err) return fail(err);\r\n                ok();\r\n                this.client = undefined;\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates table for storing cache if it does not exist yet.\r\n     */\r\n    async synchronize(queryRunner: QueryRunner): Promise<void> {\r\n    }\r\n\r\n    /**\r\n     * Caches given query result.\r\n     * Returns cache result if found.\r\n     * Returns undefined if result is not cached.\r\n     */\r\n    getFromCache(options: QueryResultCacheOptions, queryRunner?: QueryRunner): Promise<QueryResultCacheOptions|undefined> {\r\n        return new Promise<QueryResultCacheOptions|undefined>((ok, fail) => {\r\n\r\n            if (options.identifier) {\r\n                this.client.get(options.identifier, (err: any, result: any) => {\r\n                    if (err) return fail(err);\r\n                    ok(JSON.parse(result));\r\n                });\r\n\r\n            } else if (options.query) {\r\n                this.client.get(options.query, (err: any, result: any) => {\r\n                    if (err) return fail(err);\r\n                    ok(JSON.parse(result));\r\n                });\r\n\r\n            } else {\r\n                ok(undefined);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if cache is expired or not.\r\n     */\r\n    isExpired(savedCache: QueryResultCacheOptions): boolean {\r\n        return (savedCache.time! + savedCache.duration) < new Date().getTime();\r\n    }\r\n\r\n    /**\r\n     * Stores given query result in the cache.\r\n     */\r\n    async storeInCache(options: QueryResultCacheOptions, savedCache: QueryResultCacheOptions, queryRunner?: QueryRunner): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            if (options.identifier) {\r\n                this.client.set(options.identifier, JSON.stringify(options), (err: any, result: any) => {\r\n                    if (err) return fail(err);\r\n                    ok();\r\n                });\r\n\r\n            } else if (options.query) {\r\n                this.client.set(options.query, JSON.stringify(options), (err: any, result: any) => {\r\n                    if (err) return fail(err);\r\n                    ok();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clears everything stored in the cache.\r\n     */\r\n    async clear(queryRunner?: QueryRunner): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            this.client.flushdb((err: any, result: any) => {\r\n                if (err) return fail(err);\r\n                ok();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes all cached results by given identifiers from cache.\r\n     */\r\n    async remove(identifiers: string[], queryRunner?: QueryRunner): Promise<void> {\r\n        await Promise.all(identifiers.map(identifier => {\r\n            return this.deleteKey(identifier);\r\n        }));\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Removes a single key from redis database.\r\n     */\r\n    protected deleteKey(key: string): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            this.client.del(key, (err: any, result: any) => {\r\n                if (err) return fail(err);\r\n                ok();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Loads redis dependency.\r\n     */\r\n    protected loadRedis(): any {\r\n        try {\r\n            return PlatformTools.load(\"redis\");\r\n\r\n        } catch (e) {\r\n            throw new Error(`Cannot use cache because redis is not installed. Please run \"npm i redis --save\".`);\r\n        }\r\n    }\r\n\r\n\r\n}"],"sourceRoot":".."}