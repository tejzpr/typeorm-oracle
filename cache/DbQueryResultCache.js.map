{"version":3,"sources":["../../src/cache/DbQueryResultCache.ts"],"names":[],"mappings":"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","file":"DbQueryResultCache.js","sourcesContent":["import {QueryResultCache} from \"./QueryResultCache\";\r\nimport {QueryResultCacheOptions} from \"./QueryResultCacheOptions\";\r\nimport {Table} from \"../schema-builder/table/Table\";\r\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\r\nimport {MssqlParameter} from \"../driver/sqlserver/MssqlParameter\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\r\nimport {PostgresConnectionOptions} from \"../driver/postgres/PostgresConnectionOptions\";\r\nimport {SqlServerConnectionOptions} from \"../driver/sqlserver/SqlServerConnectionOptions\";\r\n\r\n/**\r\n * Caches query result into current database, into separate table called \"query-result-cache\".\r\n */\r\nexport class DbQueryResultCache implements QueryResultCache {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    private queryResultCacheTable: string;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection) {\r\n\r\n        const options = <SqlServerConnectionOptions|PostgresConnectionOptions>this.connection.driver.options;\r\n        this.queryResultCacheTable = this.connection.driver.buildTableName(\"query-result-cache\", options.schema, options.database);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a connection with given cache provider.\r\n     */\r\n    async connect(): Promise<void> {\r\n    }\r\n\r\n    /**\r\n     * Disconnects with given cache provider.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n    }\r\n\r\n    /**\r\n     * Creates table for storing cache if it does not exist yet.\r\n     */\r\n    async synchronize(queryRunner?: QueryRunner): Promise<void> {\r\n        queryRunner = this.getQueryRunner(queryRunner);\r\n        const driver = this.connection.driver;\r\n        const tableExist = await queryRunner.hasTable(this.queryResultCacheTable); // todo: table name should be configurable\r\n        if (tableExist)\r\n            return;\r\n\r\n        await queryRunner.createTable(new Table(\r\n            {\r\n                name: this.queryResultCacheTable,\r\n                columns: [\r\n                    {\r\n                        name: \"id\",\r\n                        isPrimary: true,\r\n                        isNullable: false,\r\n                        type: driver.normalizeType({type: driver.mappedDataTypes.cacheId}),\r\n                        generationStrategy: \"increment\",\r\n                        isGenerated: true\r\n                    },\r\n                    {\r\n                        name: \"identifier\",\r\n                        type: driver.normalizeType({type: driver.mappedDataTypes.cacheIdentifier}),\r\n                        isNullable: true\r\n                    },\r\n                    {\r\n                        name: \"time\",\r\n                        type: driver.normalizeType({type: driver.mappedDataTypes.cacheTime}),\r\n                        isPrimary: false,\r\n                        isNullable: false\r\n                    },\r\n                    {\r\n                        name: \"duration\",\r\n                        type: driver.normalizeType({type: driver.mappedDataTypes.cacheDuration}),\r\n                        isPrimary: false,\r\n                        isNullable: false\r\n                    },\r\n                    {\r\n                        name: \"query\",\r\n                        type: driver.normalizeType({type: driver.mappedDataTypes.cacheQuery}),\r\n                        isPrimary: false,\r\n                        isNullable: false\r\n                    },\r\n                    {\r\n                        name: \"result\",\r\n                        type: driver.normalizeType({type: driver.mappedDataTypes.cacheResult}),\r\n                        isNullable: false\r\n                    },\r\n                ]\r\n            },\r\n        ));\r\n    }\r\n\r\n    /**\r\n     * Caches given query result.\r\n     * Returns cache result if found.\r\n     * Returns undefined if result is not cached.\r\n     */\r\n    getFromCache(options: QueryResultCacheOptions, queryRunner?: QueryRunner): Promise<QueryResultCacheOptions|undefined> {\r\n        queryRunner = this.getQueryRunner(queryRunner);\r\n        const qb = this.connection\r\n            .createQueryBuilder(queryRunner)\r\n            .select()\r\n            .from(this.queryResultCacheTable, \"cache\");\r\n\r\n        if (options.identifier) {\r\n            return qb\r\n                .where(`${qb.escape(\"cache\")}.${qb.escape(\"identifier\")} = :identifier`)\r\n                .setParameters({ identifier: this.connection.driver instanceof SqlServerDriver ? new MssqlParameter(options.identifier, \"nvarchar\") : options.identifier })\r\n                .getRawOne();\r\n\r\n        } else if (options.query) {\r\n            if (this.connection.driver instanceof OracleDriver) {\r\n                return qb\r\n                    .where(`dbms_lob.compare(${qb.escape(\"cache\")}.${qb.escape(\"query\")}, :query) = 0`, { query: options.query })\r\n                    .getRawOne();\r\n            }\r\n\r\n            return qb\r\n                .where(`${qb.escape(\"cache\")}.${qb.escape(\"query\")} = :query`)\r\n                .setParameters({ query: this.connection.driver instanceof SqlServerDriver ? new MssqlParameter(options.query, \"nvarchar\") : options.query })\r\n                .getRawOne();\r\n        }\r\n\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n    /**\r\n     * Checks if cache is expired or not.\r\n     */\r\n    isExpired(savedCache: QueryResultCacheOptions): boolean {\r\n        return ((typeof savedCache.time === \"string\" ? parseInt(savedCache.time as any) : savedCache.time)! + savedCache.duration) < new Date().getTime();\r\n    }\r\n\r\n    /**\r\n     * Stores given query result in the cache.\r\n     */\r\n    async storeInCache(options: QueryResultCacheOptions, savedCache: QueryResultCacheOptions|undefined, queryRunner?: QueryRunner): Promise<void> {\r\n        queryRunner = this.getQueryRunner(queryRunner);\r\n\r\n        let insertedValues: ObjectLiteral = options;\r\n        if (this.connection.driver instanceof SqlServerDriver) { // todo: bad abstraction, re-implement this part, probably better if we create an entity metadata for cache table\r\n            insertedValues = {\r\n                identifier: new MssqlParameter(options.identifier, \"nvarchar\"),\r\n                time: new MssqlParameter(options.time, \"bigint\"),\r\n                duration: new MssqlParameter(options.duration, \"int\"),\r\n                query: new MssqlParameter(options.query, \"nvarchar\"),\r\n                result: new MssqlParameter(options.result, \"nvarchar\"),\r\n            };\r\n        }\r\n\r\n        if (savedCache && savedCache.identifier) { // if exist then update\r\n            const qb = queryRunner.manager\r\n                .createQueryBuilder()\r\n                .update(this.queryResultCacheTable)\r\n                .set(insertedValues);\r\n\r\n            qb.where(`${qb.escape(\"identifier\")} = :condition`, { condition: insertedValues.identifier });\r\n            await qb.execute();\r\n\r\n        } else if (savedCache && savedCache.query) { // if exist then update\r\n            const qb = queryRunner.manager\r\n                .createQueryBuilder()\r\n                .update(this.queryResultCacheTable)\r\n                .set(insertedValues);\r\n\r\n            if (this.connection.driver instanceof OracleDriver) {\r\n                qb.where(`dbms_lob.compare(\"query\", :condition) = 0`, { condition: insertedValues.query });\r\n\r\n            } else {\r\n                qb.where(`${qb.escape(\"query\")} = :condition`, { condition: insertedValues.query });\r\n            }\r\n\r\n            await qb.execute();\r\n\r\n        } else { // otherwise insert\r\n            await queryRunner.manager\r\n                .createQueryBuilder()\r\n                .insert()\r\n                .into(this.queryResultCacheTable)\r\n                .values(insertedValues)\r\n                .execute();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears everything stored in the cache.\r\n     */\r\n    async clear(queryRunner: QueryRunner): Promise<void> {\r\n        return this.getQueryRunner(queryRunner).clearTable(this.queryResultCacheTable);\r\n    }\r\n\r\n    /**\r\n     * Removes all cached results by given identifiers from cache.\r\n     */\r\n    async remove(identifiers: string[], queryRunner?: QueryRunner): Promise<void> {\r\n        await Promise.all(identifiers.map(identifier => {\r\n            const qb = this.getQueryRunner(queryRunner).manager.createQueryBuilder();\r\n            return qb.delete()\r\n                .from(this.queryResultCacheTable)\r\n                .where(`${qb.escape(\"identifier\")} = :identifier`, {identifier})\r\n                .execute();\r\n        }));\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets a query runner to work with.\r\n     */\r\n    protected getQueryRunner(queryRunner: QueryRunner|undefined): QueryRunner {\r\n        if (queryRunner)\r\n            return queryRunner;\r\n\r\n        return this.connection.createQueryRunner(\"master\");\r\n    }\r\n\r\n}"],"sourceRoot":".."}