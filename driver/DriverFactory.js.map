{"version":3,"sources":["../../src/driver/DriverFactory.ts"],"names":[],"mappings":";;AAAA,kEAA+D;AAC/D,qDAAkD;AAClD,+DAA4D;AAC5D,sDAAmD;AACnD,sDAAmD;AACnD,yDAAsD;AACtD,sEAAmE;AACnE,mDAAgD;AAChD,mDAAgD;AAChD,4DAAyD;AAIzD;;GAEG;AACH;IAAA;IAiCA,CAAC;IA/BG;;OAEG;IACH,8BAAM,GAAN,UAAO,UAAsB;QACzB,IAAM,IAAI,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC;QACrC,QAAQ,IAAI,EAAE;YACV,KAAK,OAAO;gBACR,OAAO,IAAI,yBAAW,CAAC,UAAU,CAAC,CAAC;YACvC,KAAK,UAAU;gBACX,OAAO,IAAI,+BAAc,CAAC,UAAU,CAAC,CAAC;YAC1C,KAAK,SAAS;gBACV,OAAO,IAAI,yBAAW,CAAC,UAAU,CAAC,CAAC;YACvC,KAAK,QAAQ;gBACT,OAAO,IAAI,2BAAY,CAAC,UAAU,CAAC,CAAC;YACxC,KAAK,SAAS;gBACV,OAAO,IAAI,6BAAa,CAAC,UAAU,CAAC,CAAC;YACzC,KAAK,cAAc;gBACf,OAAO,IAAI,qCAAiB,CAAC,UAAU,CAAC,CAAC;YAC7C,KAAK,OAAO;gBACR,OAAO,IAAI,yBAAW,CAAC,UAAU,CAAC,CAAC;YACvC,KAAK,QAAQ;gBACT,OAAO,IAAI,2BAAY,CAAC,UAAU,CAAC,CAAC;YACxC,KAAK,OAAO;gBACR,OAAO,IAAI,iCAAe,CAAC,UAAU,CAAC,CAAC;YAC3C,KAAK,SAAS;gBACV,OAAO,IAAI,yBAAW,CAAC,UAAU,CAAC,CAAC;YACvC;gBACI,MAAM,IAAI,uCAAkB,CAAC,IAAI,CAAC,CAAC;SAC1C;IACL,CAAC;IAEL,oBAAC;AAAD,CAjCA,AAiCC,IAAA;AAjCY,sCAAa","file":"DriverFactory.js","sourcesContent":["import {MissingDriverError} from \"../error/MissingDriverError\";\r\nimport {MongoDriver} from \"./mongodb/MongoDriver\";\r\nimport {SqlServerDriver} from \"./sqlserver/SqlServerDriver\";\r\nimport {OracleDriver} from \"./oracle/OracleDriver\";\r\nimport {SqliteDriver} from \"./sqlite/SqliteDriver\";\r\nimport {CordovaDriver} from \"./cordova/CordovaDriver\";\r\nimport {ReactNativeDriver} from \"./react-native/ReactNativeDriver\";\r\nimport {SqljsDriver} from \"./sqljs/SqljsDriver\";\r\nimport {MysqlDriver} from \"./mysql/MysqlDriver\";\r\nimport {PostgresDriver} from \"./postgres/PostgresDriver\";\r\nimport {Driver} from \"./Driver\";\r\nimport {Connection} from \"../connection/Connection\";\r\n\r\n/**\r\n * Helps to create drivers.\r\n */\r\nexport class DriverFactory {\r\n\r\n    /**\r\n     * Creates a new driver depend on a given connection's driver type.\r\n     */\r\n    create(connection: Connection): Driver {\r\n        const type = connection.options.type;\r\n        switch (type) {\r\n            case \"mysql\":\r\n                return new MysqlDriver(connection);\r\n            case \"postgres\":\r\n                return new PostgresDriver(connection);\r\n            case \"mariadb\":\r\n                return new MysqlDriver(connection);\r\n            case \"sqlite\":\r\n                return new SqliteDriver(connection);\r\n            case \"cordova\":\r\n                return new CordovaDriver(connection);\r\n            case \"react-native\":\r\n                return new ReactNativeDriver(connection);\r\n            case \"sqljs\":\r\n                return new SqljsDriver(connection);\r\n            case \"oracle\":\r\n                return new OracleDriver(connection);\r\n            case \"mssql\":\r\n                return new SqlServerDriver(connection);\r\n            case \"mongodb\":\r\n                return new MongoDriver(connection);\r\n            default:\r\n                throw new MissingDriverError(type);\r\n        }\r\n    }\r\n\r\n}"],"sourceRoot":".."}