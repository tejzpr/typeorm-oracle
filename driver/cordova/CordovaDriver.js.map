{"version":3,"sources":["../../src/driver/cordova/CordovaDriver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gFAA6E;AAE7E,2DAAwD;AAGxD,+EAA4E;AAC5E,6FAA0F;AAS1F;IAAmC,iCAAoB;IAGnD,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,uBAAY,UAAsB;QAAlC,YACI,kBAAM,UAAU,CAAC,SAepB;QAbG,gCAAgC;QAChC,iEAAiE;QACjE,KAAI,CAAC,QAAQ,GAAG,KAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;QAEtC,kDAAkD;QAClD,IAAI,CAAC,KAAI,CAAC,OAAO,CAAC,QAAQ;YACtB,MAAM,IAAI,iDAAuB,CAAC,UAAU,CAAC,CAAC;QAElD,IAAI,CAAC,KAAI,CAAC,OAAO,CAAC,QAAQ;YACtB,MAAM,IAAI,iDAAuB,CAAC,UAAU,CAAC,CAAC;QAElD,sBAAsB;QACtB,KAAI,CAAC,gBAAgB,EAAE,CAAC;;IAC5B,CAAC;IAGD,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACG,kCAAU,GAAhB;;;;gBACI,sBAAO,IAAI,OAAO,CAAO,UAAC,EAAE,EAAE,IAAI;wBAC9B,KAAI,CAAC,WAAW,GAAG,SAAS,CAAC;wBAC7B,KAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;oBAC5C,CAAC,CAAC,EAAC;;;KACN;IAED;;OAEG;IACH,yCAAiB,GAAjB,UAAkB,IAAiC;QAAjC,qBAAA,EAAA,eAAiC;QAC/C,IAAI,CAAC,IAAI,CAAC,WAAW;YACjB,IAAI,CAAC,WAAW,GAAG,IAAI,uCAAkB,CAAC,IAAI,CAAC,CAAC;QAEpD,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IAED,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAE5E;;OAEG;IACO,gDAAwB,GAAlC;QAAA,iBAqBC;QApBG,OAAO,IAAI,OAAO,CAAO,UAAC,EAAE,EAAE,IAAI;YAC9B,IAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE;gBAC9B,IAAI,EAAE,KAAI,CAAC,OAAO,CAAC,QAAQ;gBAC3B,QAAQ,EAAE,KAAI,CAAC,OAAO,CAAC,QAAQ;aAClC,EAAE,KAAI,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;YAE7B,KAAI,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,EAAE,UAAC,EAAO;gBACtC,IAAM,kBAAkB,GAAG,EAAE,CAAC;gBAE9B,yFAAyF;gBACzF,kEAAkE;gBAClE,kBAAkB,CAAC,UAAU,CAAC,2BAA2B,EAAE,EAAE,EAAE,UAAC,MAAW;oBACvE,EAAE,CAAC,kBAAkB,CAAC,CAAC;gBAC3B,CAAC,EAAE,UAAC,KAAU;oBACV,IAAI,CAAC,KAAK,CAAC,CAAC;gBAChB,CAAC,CAAC,CAAC;YACP,CAAC,EAAE,UAAC,KAAU;gBACV,IAAI,CAAC,KAAK,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACO,wCAAgB,GAA1B;QACI,IAAI;YACA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC;SAErC;QAAC,OAAO,CAAC,EAAE;YACR,MAAM,IAAI,+DAA8B,CAAC,gBAAgB,EAAE,wBAAwB,CAAC,CAAC;SACxF;IACL,CAAC;IACL,oBAAC;AAAD,CA3FA,AA2FC,CA3FkC,2CAAoB,GA2FtD;AA3FY,sCAAa","file":"CordovaDriver.js","sourcesContent":["import {AbstractSqliteDriver} from \"../sqlite-abstract/AbstractSqliteDriver\";\r\nimport {CordovaConnectionOptions} from \"./CordovaConnectionOptions\";\r\nimport {CordovaQueryRunner} from \"./CordovaQueryRunner\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {Connection} from \"../../connection/Connection\";\r\nimport {DriverOptionNotSetError} from \"../../error/DriverOptionNotSetError\";\r\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\r\n\r\n// needed for typescript compiler\r\ninterface Window {\r\n    sqlitePlugin: any;\r\n}\r\n\r\ndeclare var window: Window;\r\n\r\nexport class CordovaDriver extends AbstractSqliteDriver {\r\n    options: CordovaConnectionOptions;\r\n    \r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: Connection) {\r\n        super(connection);\r\n\r\n        // this.connection = connection;\r\n        // this.options = connection.options as CordovaConnectionOptions;\r\n        this.database = this.options.database;\r\n\r\n        // validate options to make sure everything is set\r\n        if (!this.options.database)\r\n            throw new DriverOptionNotSetError(\"database\");\r\n\r\n        if (!this.options.location)\r\n            throw new DriverOptionNotSetError(\"location\");\r\n\r\n        // load sqlite package\r\n        this.loadDependencies();\r\n    }\r\n    \r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Closes connection with database.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            this.queryRunner = undefined;\r\n            this.databaseConnection.close(ok, fail);\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Creates a query runner used to execute database queries.\r\n     */\r\n    createQueryRunner(mode: \"master\"|\"slave\" = \"master\"): QueryRunner {\r\n        if (!this.queryRunner)\r\n            this.queryRunner = new CordovaQueryRunner(this);\r\n\r\n        return this.queryRunner;\r\n    }\r\n    \r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates connection with the database.\r\n     */\r\n    protected createDatabaseConnection() {\r\n        return new Promise<void>((ok, fail) => {\r\n            const options = Object.assign({}, {\r\n                name: this.options.database,\r\n                location: this.options.location,\r\n            }, this.options.extra || {});\r\n\r\n            this.sqlite.openDatabase(options, (db: any) => {\r\n                const databaseConnection = db;\r\n\r\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\r\n                // working properly. this also makes onDelete to work with sqlite.\r\n                databaseConnection.executeSql(`PRAGMA foreign_keys = ON;`, [], (result: any) => {\r\n                    ok(databaseConnection);\r\n                }, (error: any) => {\r\n                    fail(error);\r\n                });\r\n            }, (error: any) => {\r\n                fail(error);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): void {\r\n        try {\r\n            this.sqlite = window.sqlitePlugin;\r\n\r\n        } catch (e) {\r\n            throw new DriverPackageNotInstalledError(\"Cordova-SQLite\", \"cordova-sqlite-storage\");\r\n        }\r\n    }\r\n}"],"sourceRoot":"../.."}