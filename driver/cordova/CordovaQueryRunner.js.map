{"version":3,"sources":["../../src/driver/cordova/CordovaQueryRunner.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,+FAA4F;AAC5F,iEAA8D;AAC9D,0FAAuF;AAEvF,4DAAyD;AAEzD;;GAEG;AACH;IAAwC,sCAAyB;IAO7D,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,4BAAY,MAAqB;QAAjC,YACI,iBAAO,SAIV;QAHG,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,KAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,KAAI,CAAC,WAAW,GAAG,IAAI,yBAAW,CAAC,KAAI,CAAC,CAAC;;IAC7C,CAAC;IAED;;OAEG;IACH,kCAAK,GAAL,UAAM,KAAa,EAAE,UAAkB;QAAvC,iBAiCC;QAhCG,IAAI,IAAI,CAAC,UAAU;YACf,MAAM,IAAI,iEAA+B,EAAE,CAAC;QAEhD,OAAO,IAAI,OAAO,CAAQ,UAAO,EAAE,EAAE,IAAI;;;;;4BACV,qBAAM,IAAI,CAAC,OAAO,EAAE,EAAA;;wBAAzC,kBAAkB,GAAG,SAAoB;wBAC/C,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;wBAC1D,cAAc,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC;wBACnC,kBAAkB,CAAC,UAAU,CAAC,KAAK,EAAE,UAAU,EAAE,UAAC,MAAW;4BAEzD,oDAAoD;4BACpD,IAAM,qBAAqB,GAAG,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,qBAAqB,CAAC;4BACnF,IAAM,YAAY,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC;4BACjC,IAAM,kBAAkB,GAAG,YAAY,GAAG,cAAc,CAAC;4BACzD,IAAI,qBAAqB,IAAI,kBAAkB,GAAG,qBAAqB;gCACnE,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,YAAY,CAAC,kBAAkB,EAAE,KAAK,EAAE,UAAU,EAAE,KAAI,CAAC,CAAC;4BAE5F,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,aAAa,EAAE;gCACvC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;6BACvB;iCACI;gCACD,IAAI,SAAS,GAAG,EAAE,CAAC;gCACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oCACzC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;iCACvC;gCAED,EAAE,CAAC,SAAS,CAAC,CAAC;6BACjB;wBACL,CAAC,EAAE,UAAC,GAAQ;4BACR,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,EAAE,KAAK,EAAE,UAAU,EAAE,KAAI,CAAC,CAAC;4BAC1E,IAAI,CAAC,IAAI,mCAAgB,CAAC,KAAK,EAAE,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC;wBACvD,CAAC,CAAC,CAAC;;;;aACN,CAAC,CAAC;IACP,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAgCG;IAEH,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAE5E;;OAEG;IACO,wCAAW,GAArB,UAAsB,aAA4B,EAAE,UAAsB;QAAtB,2BAAA,EAAA,cAAsB;QACtE,OAAO,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,KAAK,IAAK,OAAA,OAAI,GAAG,OAAG,GAAG,IAAI,EAAjB,CAAiB,CAAC,CAAC;IAC7E,CAAC;IACL,yBAAC;AAAD,CApGA,AAoGC,CApGuC,qDAAyB,GAoGhE;AApGY,gDAAkB","file":"CordovaQueryRunner.js","sourcesContent":["import {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\r\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\r\nimport {AbstractSqliteQueryRunner} from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\r\nimport {CordovaDriver} from \"./CordovaDriver\";\r\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\r\n\r\n/**\r\n * Runs queries on a single sqlite database connection.\r\n */\r\nexport class CordovaQueryRunner extends AbstractSqliteQueryRunner {\r\n    \r\n    /**\r\n     * Database driver used by connection.\r\n     */\r\n    driver: CordovaDriver;\r\n    \r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(driver: CordovaDriver) {\r\n        super();\r\n        this.driver = driver;\r\n        this.connection = driver.connection;\r\n        this.broadcaster = new Broadcaster(this);\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return new Promise<any[]>(async (ok, fail) => {\r\n            const databaseConnection = await this.connect();\r\n            this.driver.connection.logger.logQuery(query, parameters, this);\r\n            const queryStartTime = +new Date();\r\n            databaseConnection.executeSql(query, parameters, (result: any) => {\r\n\r\n                // log slow queries if maxQueryExecution time is set\r\n                const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\r\n                const queryEndTime = +new Date();\r\n                const queryExecutionTime = queryEndTime - queryStartTime;\r\n                if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\r\n                    this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\r\n\r\n                if (query.substr(0, 11) === \"INSERT INTO\") {\r\n                    ok(result.insertId);\r\n                }\r\n                else {\r\n                    let resultSet = [];\r\n                    for (let i = 0; i < result.rows.length; i++) {\r\n                        resultSet.push(result.rows.item(i));\r\n                    }\r\n                    \r\n                    ok(resultSet);\r\n                }\r\n            }, (err: any) => {\r\n                this.driver.connection.logger.logQueryError(err, query, parameters, this);\r\n                fail(new QueryFailedError(query, parameters, err));\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Insert a new row with given values into the given table.\r\n     * Returns value of the generated column if given and generate column exist in the table.\r\n     // todo: implement new syntax\r\n    async insert(tableName: string, keyValues: ObjectLiteral): Promise<InsertResult> {\r\n        const keys = Object.keys(keyValues);\r\n        const columns = keys.map(key => `\"${key}\"`).join(\", \");\r\n        const values = keys.map(key => \"?\").join(\",\");\r\n        const generatedColumns = this.connection.hasMetadata(tableName) ? this.connection.getMetadata(tableName).generatedColumns : [];\r\n        const sql = columns.length > 0 ? (`INSERT INTO \"${tableName}\"(${columns}) VALUES (${values})`) : `INSERT INTO \"${tableName}\" DEFAULT VALUES`;\r\n        const parameters = keys.map(key => keyValues[key]);\r\n\r\n        return new Promise<InsertResult>(async (ok, fail) => {\r\n            this.driver.connection.logger.logQuery(sql, parameters, this);\r\n            const __this = this;\r\n            const databaseConnection = await this.connect();\r\n            databaseConnection.executeSql(sql, parameters, (resultSet: any) => {\r\n                const generatedMap = generatedColumns.reduce((map, generatedColumn) => {\r\n                    const value = generatedColumn.isPrimary && generatedColumn.generationStrategy === \"increment\" && resultSet.insertId ? resultSet.insertId : keyValues[generatedColumn.databaseName];\r\n                    if (!value) return map;\r\n                    return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\r\n                }, {} as ObjectLiteral);\r\n\r\n                ok({\r\n                    result: undefined,\r\n                    generatedMap: Object.keys(generatedMap).length > 0 ? generatedMap : undefined\r\n                });\r\n            }, (err: any) => {\r\n                __this.driver.connection.logger.logQueryError(err, sql, parameters, this);\r\n                fail(err);\r\n            });\r\n        });\r\n    }*/\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Parametrizes given object of values. Used to create column=value queries.\r\n     */\r\n    protected parametrize(objectLiteral: ObjectLiteral, startIndex: number = 0): string[] {\r\n        return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=?\");\r\n    }\r\n}"],"sourceRoot":"../.."}