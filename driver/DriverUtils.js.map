{"version":3,"sources":["../../src/driver/DriverUtils.ts"],"names":[],"mappings":"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","file":"DriverUtils.js","sourcesContent":["/**\r\n * Common driver utility functions.\r\n */\r\nexport class DriverUtils {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Normalizes and builds a new driver options.\r\n     * Extracts settings from connection url and sets to a new options object.\r\n     */\r\n    static buildDriverOptions(options: any, buildOptions?: { useSid: boolean }): any {\r\n        if (options.url) {\r\n            const parsedUrl = this.parseConnectionUrl(options.url);\r\n            if (buildOptions && buildOptions.useSid) {\r\n                const urlDriverOptions: any = {\r\n                    type: options.type,\r\n                    host: parsedUrl.host,\r\n                    username: parsedUrl.username,\r\n                    password: parsedUrl.password,\r\n                    port: parsedUrl.port,\r\n                    sid: parsedUrl.database\r\n                };\r\n                return Object.assign(urlDriverOptions, options);\r\n\r\n            } else {\r\n                const urlDriverOptions: any = {\r\n                    type: options.type,\r\n                    host: parsedUrl.host,\r\n                    username: parsedUrl.username,\r\n                    password: parsedUrl.password,\r\n                    port: parsedUrl.port,\r\n                    database: parsedUrl.database\r\n                };\r\n                return Object.assign(urlDriverOptions, options);\r\n            }\r\n        }\r\n        return Object.assign({}, options);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Extracts connection data from the connection url.\r\n     */\r\n    private static parseConnectionUrl(url: string) {\r\n        const firstSlashes = url.indexOf(\"//\");\r\n        const preBase = url.substr(firstSlashes + 2);\r\n        const secondSlash = preBase.indexOf(\"/\");\r\n        const base = (secondSlash !== -1) ? preBase.substr(0, secondSlash) : preBase;\r\n        const afterBase = (secondSlash !== -1) ? preBase.substr(secondSlash + 1) : undefined;\r\n\r\n        const lastAtSign = base.lastIndexOf(\"@\");\r\n        const usernameAndPassword = base.substr(0, lastAtSign);\r\n        const hostAndPort = base.substr(lastAtSign + 1);\r\n\r\n        let username = usernameAndPassword;\r\n        let password = \"\";\r\n        const firstColon = usernameAndPassword.indexOf(\":\");\r\n        if (firstColon !== -1) {\r\n            username = usernameAndPassword.substr(0, firstColon);\r\n            password = usernameAndPassword.substr(firstColon + 1);\r\n        }\r\n        const [host, port] = hostAndPort.split(\":\");\r\n\r\n        return {\r\n            host: host,\r\n            username: username,\r\n            password: password,\r\n            port: port ? parseInt(port) : undefined,\r\n            database: afterBase || undefined\r\n        };\r\n    }\r\n\r\n}"],"sourceRoot":".."}