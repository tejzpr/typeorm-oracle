{"version":3,"sources":["../../src/driver/sqlite-abstract/AbstractSqliteQueryRunner.ts"],"names":[],"mappings":"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","file":"AbstractSqliteQueryRunner.js","sourcesContent":["import {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\r\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\r\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {Table} from \"../../schema-builder/table/Table\";\r\nimport {TableIndex} from \"../../schema-builder/table/TableIndex\";\r\nimport {TableForeignKey} from \"../../schema-builder/table/TableForeignKey\";\r\nimport {AbstractSqliteDriver} from \"./AbstractSqliteDriver\";\r\nimport {ReadStream} from \"../../platform/PlatformTools\";\r\nimport {TableIndexOptions} from \"../../schema-builder/options/TableIndexOptions\";\r\nimport {TableUnique} from \"../../schema-builder/table/TableUnique\";\r\nimport {BaseQueryRunner} from \"../../query-runner/BaseQueryRunner\";\r\nimport {OrmUtils} from \"../../util/OrmUtils\";\r\nimport {TableCheck} from \"../../schema-builder/table/TableCheck\";\r\nimport {IsolationLevel} from \"../types/IsolationLevel\";\r\n\r\n/**\r\n * Runs queries on a single sqlite database connection.\r\n */\r\nexport abstract class AbstractSqliteQueryRunner extends BaseQueryRunner implements QueryRunner {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Database driver used by connection.\r\n     */\r\n    driver: AbstractSqliteDriver;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates/uses database connection from the connection pool to perform further operations.\r\n     * Returns obtained database connection.\r\n     */\r\n    connect(): Promise<any> {\r\n        return Promise.resolve(this.driver.databaseConnection);\r\n    }\r\n\r\n    /**\r\n     * Releases used database connection.\r\n     * We just clear loaded tables and sql in memory, because sqlite do not support multiple connections thus query runners.\r\n     */\r\n    release(): Promise<void> {\r\n        this.loadedTables = [];\r\n        this.clearSqlMemory();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\r\n        if (this.isTransactionActive)\r\n            throw new TransactionAlreadyStartedError();\r\n\r\n        this.isTransactionActive = true;\r\n        \r\n        if (isolationLevel) {\r\n            if (isolationLevel !== \"READ UNCOMMITTED\" && isolationLevel !== \"SERIALIZABLE\") {\r\n                throw new Error(`SQLite only supports SERIALIZABLE and READ UNCOMMITTED isolation`);\r\n            }\r\n\r\n            if (isolationLevel === \"READ UNCOMMITTED\") {\r\n                await this.query(\"PRAGMA read_uncommitted = true\");\r\n            } else {\r\n                await this.query(\"PRAGMA read_uncommitted = false\");\r\n            }\r\n        }\r\n\r\n        await this.query(\"BEGIN TRANSACTION\");\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        if (!this.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.query(\"COMMIT\");\r\n        this.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        if (!this.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.query(\"ROLLBACK\");\r\n        this.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Returns raw data stream.\r\n     */\r\n    stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\r\n        throw new Error(`Stream is not supported by sqlite driver.`);\r\n    }\r\n\r\n    /**\r\n     * Returns all available database names including system databases.\r\n     */\r\n    async getDatabases(): Promise<string[]> {\r\n        return Promise.resolve([]);\r\n    }\r\n\r\n    /**\r\n     * Returns all available schema names including system schemas.\r\n     * If database parameter specified, returns schemas of that database.\r\n     */\r\n    async getSchemas(database?: string): Promise<string[]> {\r\n        return Promise.resolve([]);\r\n    }\r\n\r\n    /**\r\n     * Checks if database with the given name exist.\r\n     */\r\n    async hasDatabase(database: string): Promise<boolean> {\r\n        return Promise.resolve(false);\r\n    }\r\n\r\n    /**\r\n     * Checks if schema with the given name exist.\r\n     */\r\n    async hasSchema(schema: string): Promise<boolean> {\r\n        throw new Error(`This driver does not support table schemas`);\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(tableOrName: Table|string): Promise<boolean> {\r\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\r\n        const sql = `SELECT * FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" = '${tableName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    async hasColumn(tableOrName: Table|string, columnName: string): Promise<boolean> {\r\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\r\n        const sql = `PRAGMA table_info(\"${tableName}\")`;\r\n        const columns: ObjectLiteral[] = await this.query(sql);\r\n        return !!columns.find(column => column[\"name\"] === columnName);\r\n    }\r\n\r\n    /**\r\n     * Creates a new database.\r\n     */\r\n    async createDatabase(database: string, ifNotExist?: boolean): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Drops database.\r\n     */\r\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Creates a new table schema.\r\n     */\r\n    async createSchema(schema: string, ifNotExist?: boolean): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Drops table schema.\r\n     */\r\n    async dropSchema(schemaPath: string, ifExist?: boolean): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Creates a new table.\r\n     */\r\n    async createTable(table: Table, ifNotExist: boolean = false, createForeignKeys: boolean = true, createIndices: boolean = true): Promise<void> {\r\n        const upQueries: string[] = [];\r\n        const downQueries: string[] = [];\r\n\r\n        if (ifNotExist) {\r\n            const isTableExist = await this.hasTable(table);\r\n            if (isTableExist) return Promise.resolve();\r\n        }\r\n\r\n        upQueries.push(this.createTableSql(table, createForeignKeys));\r\n        downQueries.push(this.dropTableSql(table));\r\n\r\n        if (createIndices) {\r\n            table.indices.forEach(index => {\r\n\r\n                // new index may be passed without name. In this case we generate index name manually.\r\n                if (!index.name)\r\n                    index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\r\n                upQueries.push(this.createIndexSql(table, index));\r\n                downQueries.push(this.dropIndexSql(index));\r\n            });\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries);\r\n    }\r\n\r\n    /**\r\n     * Drops the table.\r\n     */\r\n    async dropTable(tableOrName: Table|string, ifExist?: boolean, dropForeignKeys: boolean = true, dropIndices: boolean = true): Promise<void> {\r\n        if (ifExist) {\r\n            const isTableExist = await this.hasTable(tableOrName);\r\n            if (!isTableExist) return Promise.resolve();\r\n        }\r\n\r\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\r\n        const createForeignKeys: boolean = dropForeignKeys;\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const upQueries: string[] = [];\r\n        const downQueries: string[] = [];\r\n\r\n        if (dropIndices) {\r\n            table.indices.forEach(index => {\r\n                upQueries.push(this.dropIndexSql(index));\r\n                downQueries.push(this.createIndexSql(table, index));\r\n            });\r\n        }\r\n\r\n        upQueries.push(this.dropTableSql(table, ifExist));\r\n        downQueries.push(this.createTableSql(table, createForeignKeys));\r\n\r\n        await this.executeQueries(upQueries, downQueries);\r\n    }\r\n\r\n    /**\r\n     * Renames the given table.\r\n     */\r\n    async renameTable(oldTableOrName: Table|string, newTableName: string): Promise<void> {\r\n        const oldTable = oldTableOrName instanceof Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);\r\n        const newTable = oldTable.clone();\r\n        newTable.name = newTableName;\r\n\r\n        // rename table\r\n        const up = `ALTER TABLE \"${oldTable.name}\" RENAME TO \"${newTableName}\"`;\r\n        const down = `ALTER TABLE \"${newTableName}\" RENAME TO \"${oldTable.name}\"`;\r\n        await this.executeQueries(up, down);\r\n\r\n        // rename old table;\r\n        oldTable.name = newTable.name;\r\n\r\n        // rename unique constraints\r\n        newTable.uniques.forEach(unique => {\r\n            unique.name = this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames);\r\n        });\r\n\r\n        // rename foreign key constraints\r\n        newTable.foreignKeys.forEach(foreignKey => {\r\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames);\r\n        });\r\n\r\n        // rename indices\r\n        newTable.indices.forEach(index => {\r\n            index.name = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\r\n        });\r\n\r\n        // recreate table with new constraint names\r\n        await this.recreateTable(newTable, oldTable);\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column in the table.\r\n     */\r\n    async addColumn(tableOrName: Table|string, column: TableColumn): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        return this.addColumns(table!, [column]);\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column in the table.\r\n     */\r\n    async addColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const changedTable = table.clone();\r\n        columns.forEach(column => changedTable.addColumn(column));\r\n        await this.recreateTable(changedTable, table);\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newTableColumnOrName: TableColumn|string): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\r\n\r\n        let newColumn: TableColumn|undefined = undefined;\r\n        if (newTableColumnOrName instanceof TableColumn) {\r\n            newColumn = newTableColumnOrName;\r\n        } else {\r\n            newColumn = oldColumn.clone();\r\n            newColumn.name = newTableColumnOrName;\r\n        }\r\n\r\n        return this.changeColumn(table, oldColumn, newColumn);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newColumn: TableColumn): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\r\n\r\n        await this.changeColumns(table, [{oldColumn, newColumn}]);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     * Changed column looses all its keys in the db.\r\n     */\r\n    async changeColumns(tableOrName: Table|string, changedColumns: { oldColumn: TableColumn, newColumn: TableColumn }[]): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const changedTable = table.clone();\r\n        changedColumns.forEach(changedColumnSet => {\r\n            if (changedColumnSet.newColumn.name !== changedColumnSet.oldColumn.name) {\r\n                changedTable.findColumnUniques(changedColumnSet.oldColumn).forEach(unique => {\r\n                    unique.columnNames.splice(unique.columnNames.indexOf(changedColumnSet.oldColumn.name), 1);\r\n                    unique.columnNames.push(changedColumnSet.newColumn.name);\r\n                    unique.name = this.connection.namingStrategy.uniqueConstraintName(changedTable, unique.columnNames);\r\n                });\r\n\r\n                changedTable.findColumnForeignKeys(changedColumnSet.oldColumn).forEach(fk => {\r\n                    fk.columnNames.splice(fk.columnNames.indexOf(changedColumnSet.oldColumn.name), 1);\r\n                    fk.columnNames.push(changedColumnSet.newColumn.name);\r\n                    fk.name = this.connection.namingStrategy.foreignKeyName(changedTable, fk.columnNames);\r\n                });\r\n\r\n                changedTable.findColumnIndices(changedColumnSet.oldColumn).forEach(index => {\r\n                    index.columnNames.splice(index.columnNames.indexOf(changedColumnSet.oldColumn.name), 1);\r\n                    index.columnNames.push(changedColumnSet.newColumn.name);\r\n                    index.name = this.connection.namingStrategy.indexName(changedTable, index.columnNames, index.where);\r\n                });\r\n            }\r\n            const originalColumn = changedTable.columns.find(column => column.name === changedColumnSet.oldColumn.name);\r\n            if (originalColumn)\r\n                changedTable.columns[changedTable.columns.indexOf(originalColumn)] = changedColumnSet.newColumn;\r\n        });\r\n\r\n        await this.recreateTable(changedTable, table);\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableOrName: Table|string, columnOrName: TableColumn|string): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\r\n        if (!column)\r\n            throw new Error(`Column \"${columnOrName}\" was not found in table \"${table.name}\"`);\r\n\r\n        await this.dropColumns(table, [column]);\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n\r\n        // clone original table and remove column and its constraints from cloned table\r\n        const changedTable = table.clone();\r\n        columns.forEach(column => {\r\n            changedTable.removeColumn(column);\r\n            changedTable.findColumnUniques(column).forEach(unique => changedTable.removeUniqueConstraint(unique));\r\n            changedTable.findColumnIndices(column).forEach(index => changedTable.removeIndex(index));\r\n            changedTable.findColumnForeignKeys(column).forEach(fk => changedTable.removeForeignKey(fk));\r\n        });\r\n\r\n        await this.recreateTable(changedTable, table);\r\n\r\n        // remove column and its constraints from original table.\r\n        columns.forEach(column => {\r\n            table.removeColumn(column);\r\n            table.findColumnUniques(column).forEach(unique => table.removeUniqueConstraint(unique));\r\n            table.findColumnIndices(column).forEach(index => table.removeIndex(index));\r\n            table.findColumnForeignKeys(column).forEach(fk => table.removeForeignKey(fk));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a new primary key.\r\n     */\r\n    async createPrimaryKey(tableOrName: Table|string, columnNames: string[]): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        // clone original table and mark columns as primary\r\n        const changedTable = table.clone();\r\n        changedTable.columns.forEach(column => {\r\n            if (columnNames.find(columnName => columnName === column.name))\r\n                column.isPrimary = true;\r\n        });\r\n\r\n        await this.recreateTable(changedTable, table);\r\n        // mark columns as primary in original table\r\n        table.columns.forEach(column => {\r\n            if (columnNames.find(columnName => columnName === column.name))\r\n                column.isPrimary = true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates composite primary keys.\r\n     */\r\n    async updatePrimaryKeys(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\r\n        await Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Drops a primary key.\r\n     */\r\n    async dropPrimaryKey(tableOrName: Table|string): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        // clone original table and mark primary columns as non-primary\r\n        const changedTable = table.clone();\r\n        changedTable.primaryColumns.forEach(column => {\r\n            column.isPrimary = false;\r\n        });\r\n\r\n        await this.recreateTable(changedTable, table);\r\n        // mark primary columns as non-primary in original table\r\n        table.primaryColumns.forEach(column => {\r\n            column.isPrimary = false;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a new unique constraint.\r\n     */\r\n    async createUniqueConstraint(tableOrName: Table|string, uniqueConstraint: TableUnique): Promise<void> {\r\n        await this.createUniqueConstraints(tableOrName, [uniqueConstraint]);\r\n    }\r\n\r\n    /**\r\n     * Creates a new unique constraints.\r\n     */\r\n    async createUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n\r\n        // clone original table and add unique constraints in to cloned table\r\n        const changedTable = table.clone();\r\n        uniqueConstraints.forEach(uniqueConstraint => changedTable.addUniqueConstraint(uniqueConstraint));\r\n        await this.recreateTable(changedTable, table);\r\n    }\r\n\r\n    /**\r\n     * Drops an unique constraint.\r\n     */\r\n    async dropUniqueConstraint(tableOrName: Table|string, uniqueOrName: TableUnique|string): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const uniqueConstraint = uniqueOrName instanceof TableUnique ? uniqueOrName : table.uniques.find(u => u.name === uniqueOrName);\r\n        if (!uniqueConstraint)\r\n            throw new Error(`Supplied unique constraint was not found in table ${table.name}`);\r\n\r\n        await this.dropUniqueConstraints(table, [uniqueConstraint]);\r\n    }\r\n\r\n    /**\r\n     * Creates an unique constraints.\r\n     */\r\n    async dropUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n\r\n        // clone original table and remove unique constraints from cloned table\r\n        const changedTable = table.clone();\r\n        uniqueConstraints.forEach(uniqueConstraint => changedTable.removeUniqueConstraint(uniqueConstraint));\r\n\r\n        await this.recreateTable(changedTable, table);\r\n    }\r\n\r\n    /**\r\n     * Creates new check constraint.\r\n     */\r\n    async createCheckConstraint(tableOrName: Table|string, checkConstraint: TableCheck): Promise<void> {\r\n        await this.createCheckConstraints(tableOrName, [checkConstraint]);\r\n    }\r\n\r\n    /**\r\n     * Creates new check constraints.\r\n     */\r\n    async createCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n\r\n        // clone original table and add check constraints in to cloned table\r\n        const changedTable = table.clone();\r\n        checkConstraints.forEach(checkConstraint => changedTable.addCheckConstraint(checkConstraint));\r\n        await this.recreateTable(changedTable, table);\r\n    }\r\n\r\n    /**\r\n     * Drops check constraint.\r\n     */\r\n    async dropCheckConstraint(tableOrName: Table|string, checkOrName: TableCheck|string): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const checkConstraint = checkOrName instanceof TableCheck ? checkOrName : table.checks.find(c => c.name === checkOrName);\r\n        if (!checkConstraint)\r\n            throw new Error(`Supplied check constraint was not found in table ${table.name}`);\r\n\r\n        await this.dropCheckConstraints(table, [checkConstraint]);\r\n    }\r\n\r\n    /**\r\n     * Drops check constraints.\r\n     */\r\n    async dropCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n\r\n        // clone original table and remove check constraints from cloned table\r\n        const changedTable = table.clone();\r\n        checkConstraints.forEach(checkConstraint => changedTable.removeCheckConstraint(checkConstraint));\r\n\r\n        await this.recreateTable(changedTable, table);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableOrName: Table|string, foreignKey: TableForeignKey): Promise<void> {\r\n        await this.createForeignKeys(tableOrName, [foreignKey]);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        // clone original table and add foreign keys in to cloned table\r\n        const changedTable = table.clone();\r\n        foreignKeys.forEach(foreignKey => changedTable.addForeignKey(foreignKey));\r\n\r\n        await this.recreateTable(changedTable, table);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(tableOrName: Table|string, foreignKeyOrName: TableForeignKey|string): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const foreignKey = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);\r\n        if (!foreignKey)\r\n            throw new Error(`Supplied foreign key was not found in table ${table.name}`);\r\n\r\n        await this.dropForeignKeys(tableOrName, [foreignKey]);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n\r\n        // clone original table and remove foreign keys from cloned table\r\n        const changedTable = table.clone();\r\n        foreignKeys.forEach(foreignKey => changedTable.removeForeignKey(foreignKey));\r\n\r\n        await this.recreateTable(changedTable, table);\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(tableOrName: Table|string, index: TableIndex): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n\r\n        // new index may be passed without name. In this case we generate index name manually.\r\n        if (!index.name)\r\n            index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\r\n\r\n        const up = this.createIndexSql(table, index);\r\n        const down = this.dropIndexSql(index);\r\n        await this.executeQueries(up, down);\r\n        table.addIndex(index);\r\n    }\r\n\r\n    /**\r\n     * Creates a new indices\r\n     */\r\n    async createIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\r\n        const promises = indices.map(index => this.createIndex(tableOrName, index));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Drops an index from the table.\r\n     */\r\n    async dropIndex(tableOrName: Table|string, indexOrName: TableIndex|string): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const index = indexOrName instanceof TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);\r\n        if (!index)\r\n            throw new Error(`Supplied index was not found in table ${table.name}`);\r\n\r\n        const up = this.dropIndexSql(index);\r\n        const down = this.createIndexSql(table, index);\r\n        await this.executeQueries(up, down);\r\n        table.removeIndex(index);\r\n    }\r\n\r\n    /**\r\n     * Drops an indices from the table.\r\n     */\r\n    async dropIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\r\n        const promises = indices.map(index => this.dropIndex(tableOrName, index));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Clears all table contents.\r\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\r\n     */\r\n    async clearTable(tableName: string): Promise<void> {\r\n        await this.query(`DELETE FROM \"${tableName}\"`);\r\n    }\r\n\r\n    /**\r\n     * Removes all tables from the currently connected database.\r\n     */\r\n    async clearDatabase(): Promise<void> {\r\n        await this.query(`PRAGMA foreign_keys = OFF;`);\r\n        await this.startTransaction();\r\n        try {\r\n            const selectDropsQuery = `SELECT 'DROP TABLE \"' || name || '\";' as query FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" != 'sqlite_sequence'`;\r\n            const dropQueries: ObjectLiteral[] = await this.query(selectDropsQuery);\r\n            await Promise.all(dropQueries.map(q => this.query(q[\"query\"])));\r\n            await this.commitTransaction();\r\n\r\n        } catch (error) {\r\n            try { // we throw original error even if rollback thrown an error\r\n                await this.rollbackTransaction();\r\n            } catch (rollbackError) { }\r\n            throw error;\r\n\r\n        } finally {\r\n            await this.query(`PRAGMA foreign_keys = ON;`);\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a Table from them.\r\n     */\r\n    protected async loadTables(tableNames: string[]): Promise<Table[]> {\r\n        // if no tables given then no need to proceed\r\n        if (!tableNames || !tableNames.length)\r\n            return [];\r\n\r\n        const tableNamesString = tableNames.map(tableName => `'${tableName}'`).join(\", \");\r\n\r\n        // load tables\r\n        const dbTables: ObjectLiteral[] = await this.query(`SELECT * FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" IN (${tableNamesString})`);\r\n\r\n        // load indices\r\n        const dbIndicesDef: ObjectLiteral[] = await this.query(`SELECT * FROM \"sqlite_master\" WHERE \"type\" = 'index' AND \"tbl_name\" IN (${tableNamesString})`);\r\n\r\n        // if tables were not found in the db, no need to proceed\r\n        if (!dbTables || !dbTables.length)\r\n            return [];\r\n\r\n        // create table schemas for loaded tables\r\n        return Promise.all(dbTables.map(async dbTable => {\r\n            const table = new Table({name: dbTable[\"name\"]});\r\n            const sql = dbTable[\"sql\"];\r\n\r\n            // load columns and indices\r\n            const [dbColumns, dbIndices, dbForeignKeys]: ObjectLiteral[][] = await Promise.all([\r\n                this.query(`PRAGMA table_info(\"${dbTable[\"name\"]}\")`),\r\n                this.query(`PRAGMA index_list(\"${dbTable[\"name\"]}\")`),\r\n                this.query(`PRAGMA foreign_key_list(\"${dbTable[\"name\"]}\")`),\r\n            ]);\r\n\r\n            // find column name with auto increment\r\n            let autoIncrementColumnName: string|undefined = undefined;\r\n            const tableSql: string = dbTable[\"sql\"];\r\n            if (tableSql.indexOf(\"AUTOINCREMENT\") !== -1) {\r\n                autoIncrementColumnName = tableSql.substr(0, tableSql.indexOf(\"AUTOINCREMENT\"));\r\n                const comma = autoIncrementColumnName.lastIndexOf(\",\");\r\n                const bracket = autoIncrementColumnName.lastIndexOf(\"(\");\r\n                if (comma !== -1) {\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(comma);\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf(\"\\\"\"));\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf(\"\\\"\") + 1);\r\n\r\n                } else if (bracket !== -1) {\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(bracket);\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(0, autoIncrementColumnName.lastIndexOf(\"\\\"\"));\r\n                    autoIncrementColumnName = autoIncrementColumnName.substr(autoIncrementColumnName.indexOf(\"\\\"\") + 1);\r\n                }\r\n            }\r\n\r\n            // create columns from the loaded columns\r\n            table.columns = dbColumns.map(dbColumn => {\r\n                const tableColumn = new TableColumn();\r\n                tableColumn.name = dbColumn[\"name\"];\r\n                tableColumn.type = dbColumn[\"type\"].toLowerCase();\r\n                tableColumn.default = dbColumn[\"dflt_value\"] !== null && dbColumn[\"dflt_value\"] !== undefined ? dbColumn[\"dflt_value\"] : undefined;\r\n                tableColumn.isNullable = dbColumn[\"notnull\"] === 0;\r\n                // primary keys are numbered starting with 1, columns that aren't primary keys are marked with 0\r\n                tableColumn.isPrimary = dbColumn[\"pk\"] > 0;\r\n                tableColumn.comment = \"\"; // SQLite does not support column comments\r\n                tableColumn.isGenerated = autoIncrementColumnName === dbColumn[\"name\"];\r\n                if (tableColumn.isGenerated) {\r\n                    tableColumn.generationStrategy = \"increment\";\r\n                }\r\n\r\n                // parse datatype and attempt to retrieve length\r\n                let pos = tableColumn.type.indexOf(\"(\");\r\n                if (pos !== -1) {\r\n                    let dataType = tableColumn.type.substr(0, pos);\r\n                    if (!!this.driver.withLengthColumnTypes.find(col => col === dataType)) {\r\n                        let len = parseInt(tableColumn.type.substring(pos + 1, tableColumn.type.length - 1));\r\n                        if (len) {\r\n                            tableColumn.length = len.toString();\r\n                            tableColumn.type = dataType; // remove the length part from the datatype\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return tableColumn;\r\n            });\r\n\r\n            // build foreign keys\r\n            const tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys, dbForeignKey => dbForeignKey[\"id\"]);\r\n            table.foreignKeys = tableForeignKeyConstraints.map(foreignKey => {\r\n                const ownForeignKeys = dbForeignKeys.filter(dbForeignKey => dbForeignKey[\"id\"] === foreignKey[\"id\"] && dbForeignKey[\"table\"] === foreignKey[\"table\"]);\r\n                const columnNames = ownForeignKeys.map(dbForeignKey => dbForeignKey[\"from\"]);\r\n                const referencedColumnNames = ownForeignKeys.map(dbForeignKey => dbForeignKey[\"to\"]);\r\n                // build foreign key name, because we can not get it directly.\r\n                const fkName = this.connection.namingStrategy.foreignKeyName(table, columnNames);\r\n\r\n                return new TableForeignKey({\r\n                    name: fkName,\r\n                    columnNames: columnNames,\r\n                    referencedTableName: foreignKey[\"table\"],\r\n                    referencedColumnNames: referencedColumnNames,\r\n                    onDelete: foreignKey[\"on_delete\"],\r\n                    onUpdate: foreignKey[\"on_update\"]\r\n                });\r\n            });\r\n\r\n            // build unique constraints\r\n            const tableUniquePromises = dbIndices\r\n                .filter(dbIndex => dbIndex[\"origin\"] === \"u\")\r\n                .map(dbIndex => dbIndex[\"name\"])\r\n                .filter((value, index, self) => self.indexOf(value) === index)\r\n                .map(async dbIndexName => {\r\n                    const dbIndex = dbIndices.find(dbIndex => dbIndex[\"name\"] === dbIndexName);\r\n                    const indexInfos: ObjectLiteral[] = await this.query(`PRAGMA index_info(\"${dbIndex![\"name\"]}\")`);\r\n                    const indexColumns = indexInfos\r\n                        .sort((indexInfo1, indexInfo2) => parseInt(indexInfo1[\"seqno\"]) - parseInt(indexInfo2[\"seqno\"]))\r\n                        .map(indexInfo => indexInfo[\"name\"]);\r\n\r\n                    if (indexColumns.length === 1) {\r\n                        const column = table.columns.find(column => {\r\n                            return !!indexColumns.find(indexColumn => indexColumn === column.name);\r\n                        });\r\n                        if (column)\r\n                            column.isUnique = true;\r\n                    }\r\n\r\n                    // Sqlite does not store unique constraint name, so we generate its name manually.\r\n                    return new TableUnique({\r\n                        name: this.connection.namingStrategy.uniqueConstraintName(table, indexColumns),\r\n                        columnNames: indexColumns\r\n                    });\r\n                });\r\n            table.uniques = (await Promise.all(tableUniquePromises)) as TableUnique[];\r\n\r\n            // build checks\r\n            let result;\r\n            const regexp = /CONSTRAINT \"([^\"]*)\" CHECK (\\(.*?\\))([,]|[)]$)/g;\r\n            while (((result = regexp.exec(sql)) !== null)) {\r\n                table.checks.push(new TableCheck({ name: result[1], expression: result[2] }));\r\n            }\r\n\r\n            // build indices\r\n            const indicesPromises = dbIndices\r\n                .filter(dbIndex => dbIndex[\"origin\"] === \"c\")\r\n                .map(dbIndex => dbIndex[\"name\"])\r\n                .filter((value, index, self) => self.indexOf(value) === index) // unqiue\r\n                .map(async dbIndexName => {\r\n\r\n                    const indexDef = dbIndicesDef.find(dbIndexDef => dbIndexDef[\"name\"] === dbIndexName);\r\n                    const condition = /WHERE (.*)/.exec(indexDef![\"sql\"]);\r\n                    const dbIndex = dbIndices.find(dbIndex => dbIndex[\"name\"] === dbIndexName);\r\n                    const indexInfos: ObjectLiteral[] = await this.query(`PRAGMA index_info(\"${dbIndex![\"name\"]}\")`);\r\n                    const indexColumns = indexInfos\r\n                        .sort((indexInfo1, indexInfo2) => parseInt(indexInfo1[\"seqno\"]) - parseInt(indexInfo2[\"seqno\"]))\r\n                        .map(indexInfo => indexInfo[\"name\"]);\r\n\r\n                    const isUnique = dbIndex![\"unique\"] === \"1\" || dbIndex![\"unique\"] === 1;\r\n                    return new TableIndex(<TableIndexOptions>{\r\n                        table: table,\r\n                        name: dbIndex![\"name\"],\r\n                        columnNames: indexColumns,\r\n                        isUnique: isUnique,\r\n                        where: condition ? condition[1] : undefined\r\n                    });\r\n                });\r\n            const indices = await Promise.all(indicesPromises);\r\n            table.indices = indices.filter(index => !!index) as TableIndex[];\r\n\r\n            return table;\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Builds create table sql.\r\n     */\r\n    protected createTableSql(table: Table, createForeignKeys?: boolean): string {\r\n\r\n        const primaryColumns = table.columns.filter(column => column.isPrimary);\r\n        const hasAutoIncrement = primaryColumns.find(column => column.isGenerated && column.generationStrategy === \"increment\");\r\n        const skipPrimary = primaryColumns.length > 1;\r\n        if (skipPrimary && hasAutoIncrement)\r\n            throw new Error(`Sqlite does not support AUTOINCREMENT on composite primary key`);\r\n\r\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column, skipPrimary)).join(\", \");\r\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\r\n\r\n        // need for `addColumn()` method, because it recreates table.\r\n        table.columns\r\n            .filter(column => column.isUnique)\r\n            .forEach(column => {\r\n                const isUniqueExist = table.uniques.some(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);\r\n                if (!isUniqueExist)\r\n                    table.uniques.push(new TableUnique({\r\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\r\n                        columnNames: [column.name]\r\n                    }));\r\n            });\r\n\r\n        if (table.uniques.length > 0) {\r\n            const uniquesSql = table.uniques.map(unique => {\r\n                const uniqueName = unique.name ? unique.name : this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);\r\n                const columnNames = unique.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\r\n                return `CONSTRAINT \"${uniqueName}\" UNIQUE (${columnNames})`;\r\n            }).join(\", \");\r\n\r\n            sql += `, ${uniquesSql}`;\r\n        }\r\n\r\n        if (table.checks.length > 0) {\r\n            const checksSql = table.checks.map(check => {\r\n                const checkName = check.name ? check.name : this.connection.namingStrategy.checkConstraintName(table.name, check.expression!);\r\n                return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`;\r\n            }).join(\", \");\r\n\r\n            sql += `, ${checksSql}`;\r\n        }\r\n\r\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\r\n            const foreignKeysSql = table.foreignKeys.map(fk => {\r\n                const columnNames = fk.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\r\n                if (!fk.name)\r\n                    fk.name = this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames);\r\n                const referencedColumnNames = fk.referencedColumnNames.map(columnName => `\"${columnName}\"`).join(\", \");\r\n\r\n                let constraint = `CONSTRAINT \"${fk.name}\" FOREIGN KEY (${columnNames}) REFERENCES \"${fk.referencedTableName}\" (${referencedColumnNames})`;\r\n                if (fk.onDelete)\r\n                    constraint += ` ON DELETE ${fk.onDelete}`;\r\n                if (fk.onUpdate)\r\n                    constraint += ` ON UPDATE ${fk.onUpdate}`;\r\n\r\n                return constraint;\r\n            }).join(\", \");\r\n\r\n            sql += `, ${foreignKeysSql}`;\r\n        }\r\n\r\n        if (primaryColumns.length > 1) {\r\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\r\n            sql += `, PRIMARY KEY (${columnNames})`;\r\n        }\r\n\r\n        sql += `)`;\r\n\r\n        return sql;\r\n    }\r\n\r\n    /**\r\n     * Builds drop table sql.\r\n     */\r\n    protected dropTableSql(tableOrName: Table|string, ifExist?: boolean): string {\r\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\r\n        return ifExist ? `DROP TABLE IF EXISTS \"${tableName}\"` : `DROP TABLE \"${tableName}\"`;\r\n    }\r\n\r\n    /**\r\n     * Builds create index sql.\r\n     */\r\n    protected createIndexSql(table: Table, index: TableIndex): string {\r\n        const columns = index.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\r\n        return `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON \"${table.name}\" (${columns}) ${index.where ? \"WHERE \" + index.where : \"\"}`;\r\n    }\r\n\r\n    /**\r\n     * Builds drop index sql.\r\n     */\r\n    protected dropIndexSql(indexOrName: TableIndex|string): string {\r\n        let indexName = indexOrName instanceof TableIndex ? indexOrName.name : indexOrName;\r\n        return `DROP INDEX \"${indexName}\"`;\r\n    }\r\n\r\n    /**\r\n     * Builds a query for create column.\r\n     */\r\n    protected buildCreateColumnSql(column: TableColumn, skipPrimary?: boolean): string {\r\n        let c = \"\\\"\" + column.name + \"\\\"\";\r\n        if (column instanceof ColumnMetadata) {\r\n            c += \" \" + this.driver.normalizeType(column);\r\n        } else {\r\n            c += \" \" + this.connection.driver.createFullType(column);\r\n        }\r\n\r\n        if (column.isPrimary && !skipPrimary)\r\n            c += \" PRIMARY KEY\";\r\n        if (column.isGenerated === true && column.generationStrategy === \"increment\") // don't use skipPrimary here since updates can update already exist primary without auto inc.\r\n            c += \" AUTOINCREMENT\";\r\n        if (column.collation)\r\n            c += \" COLLATE \" + column.collation;\r\n        if (column.isNullable !== true)\r\n            c += \" NOT NULL\";\r\n        if (column.default !== undefined && column.default !== null)\r\n            c += \" DEFAULT (\" + column.default + \")\";\r\n\r\n        return c;\r\n    }\r\n\r\n    protected async recreateTable(newTable: Table, oldTable: Table, migrateData = true): Promise<void> {\r\n        const upQueries: string[] = [];\r\n        const downQueries: string[] = [];\r\n\r\n        // drop old table indices\r\n        oldTable.indices.forEach(index => {\r\n            upQueries.push(this.dropIndexSql(index));\r\n            downQueries.push(this.createIndexSql(oldTable, index));\r\n        });\r\n\r\n        // change table name into 'temporary_table'\r\n        newTable.name = \"temporary_\" + newTable.name;\r\n\r\n        // create new table\r\n        upQueries.push(this.createTableSql(newTable, true));\r\n        downQueries.push(this.dropTableSql(newTable));\r\n\r\n        // migrate all data from the old table into new table\r\n        if (migrateData) {\r\n            let newColumnNames = newTable.columns.map(column => `\"${column.name}\"`).join(\", \");\r\n            let oldColumnNames = oldTable.columns.map(column => `\"${column.name}\"`).join(\", \");\r\n            if (oldTable.columns.length < newTable.columns.length) {\r\n                newColumnNames = newTable.columns.filter(column => {\r\n                    return oldTable.columns.find(c => c.name === column.name);\r\n                }).map(column => `\"${column.name}\"`).join(\", \");\r\n\r\n            } else if (oldTable.columns.length > newTable.columns.length) {\r\n                oldColumnNames = oldTable.columns.filter(column => {\r\n                    return newTable.columns.find(c => c.name === column.name);\r\n                }).map(column => `\"${column.name}\"`).join(\", \");\r\n            }\r\n\r\n            upQueries.push(`INSERT INTO \"${newTable.name}\"(${newColumnNames}) SELECT ${oldColumnNames} FROM \"${oldTable.name}\"`);\r\n            downQueries.push(`INSERT INTO \"${oldTable.name}\"(${oldColumnNames}) SELECT ${newColumnNames} FROM \"${newTable.name}\"`);\r\n        }\r\n\r\n        // drop old table\r\n        upQueries.push(this.dropTableSql(oldTable));\r\n        downQueries.push(this.createTableSql(oldTable, true));\r\n\r\n        // rename old table\r\n        upQueries.push(`ALTER TABLE \"${newTable.name}\" RENAME TO \"${oldTable.name}\"`);\r\n        downQueries.push(`ALTER TABLE \"${oldTable.name}\" RENAME TO \"${newTable.name}\"`);\r\n        newTable.name = oldTable.name;\r\n\r\n        // recreate table indices\r\n        newTable.indices.forEach(index => {\r\n            // new index may be passed without name. In this case we generate index name manually.\r\n            if (!index.name)\r\n                index.name = this.connection.namingStrategy.indexName(newTable.name, index.columnNames, index.where);\r\n            upQueries.push(this.createIndexSql(newTable, index));\r\n            downQueries.push(this.dropIndexSql(index));\r\n        });\r\n\r\n        await this.executeQueries(upQueries, downQueries);\r\n        this.replaceCachedTable(oldTable, newTable);\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"../.."}