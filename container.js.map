{"version":3,"sources":["../../src/container.ts"],"names":[],"mappings":";;AAuBA;;;GAGG;AACH,IAAM,gBAAgB,GAAuB,IAAI;IAAC;QACtC,cAAS,GAAsC,EAAE,CAAC;IAW9D,CAAC;IATG,qBAAG,GAAH,UAAO,SAA2B;QAC9B,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,SAAS,EAApB,CAAoB,CAAC,CAAC;QAC9D,IAAI,CAAC,QAAQ,EAAE;YACX,QAAQ,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,IAAK,SAAwB,EAAE,EAAC,CAAC;YACvE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACjC;QAED,OAAO,QAAQ,CAAC,MAAM,CAAC;IAC3B,CAAC;IACL,cAAC;AAAD,CAZkD,AAYjD,IAAC,EAAE,CAAC;AAEL,IAAI,aAAiC,CAAC;AACtC,IAAI,oBAAmD,CAAC;AAExD;;GAEG;AACH,sBAA6B,YAAgC,EAAE,OAA6B;IACxF,aAAa,GAAG,YAAY,CAAC;IAC7B,oBAAoB,GAAG,OAAO,CAAC;AACnC,CAAC;AAHD,oCAGC;AAED;;GAEG;AACH,0BAAoC,SAA2B;IAC3D,IAAI,aAAa,EAAE;QACf,IAAI;YACA,IAAM,QAAQ,GAAG,aAAa,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YAC9C,IAAI,QAAQ;gBACR,OAAO,QAAQ,CAAC;YAEpB,IAAI,CAAC,oBAAoB,IAAI,CAAC,oBAAoB,CAAC,QAAQ;gBACvD,OAAO,QAAQ,CAAC;SAEvB;QAAC,OAAO,KAAK,EAAE;YACZ,IAAI,CAAC,oBAAoB,IAAI,CAAC,oBAAoB,CAAC,gBAAgB;gBAC/D,MAAM,KAAK,CAAC;SACnB;KACJ;IACD,OAAO,gBAAgB,CAAC,GAAG,CAAI,SAAS,CAAC,CAAC;AAC9C,CAAC;AAhBD,4CAgBC","file":"container.js","sourcesContent":["/**\r\n * Container options.\r\n */\r\nexport interface UseContainerOptions {\r\n\r\n    /**\r\n     * If set to true, then default container will be used in the case if given container haven't returned anything.\r\n     */\r\n    fallback?: boolean;\r\n\r\n    /**\r\n     * If set to true, then default container will be used in the case if given container thrown an exception.\r\n     */\r\n    fallbackOnErrors?: boolean;\r\n\r\n}\r\n\r\nexport type ContainedType<T> = { new (...args: any[]): T } | Function;\r\n\r\nexport interface ContainerInterface {\r\n    get<T>(someClass: ContainedType<T>): T;\r\n}\r\n\r\n/**\r\n * Container to be used by this library for inversion control. If container was not implicitly set then by default\r\n * container simply creates a new instance of the given class.\r\n */\r\nconst defaultContainer: ContainerInterface = new (class implements ContainerInterface {\r\n    private instances: { type: Function, object: any }[] = [];\r\n\r\n    get<T>(someClass: ContainedType<T>): T {\r\n        let instance = this.instances.find(i => i.type === someClass);\r\n        if (!instance) {\r\n            instance = { type: someClass, object: new (someClass as new() => T)()};\r\n            this.instances.push(instance);\r\n        }\r\n\r\n        return instance.object;\r\n    }\r\n})();\r\n\r\nlet userContainer: ContainerInterface;\r\nlet userContainerOptions: UseContainerOptions|undefined;\r\n\r\n/**\r\n * Sets container to be used by this library.\r\n */\r\nexport function useContainer(iocContainer: ContainerInterface, options?: UseContainerOptions) {\r\n    userContainer = iocContainer;\r\n    userContainerOptions = options;\r\n}\r\n\r\n/**\r\n * Gets the IOC container used by this library.\r\n */\r\nexport function getFromContainer<T>(someClass: ContainedType<T>): T {\r\n    if (userContainer) {\r\n        try {\r\n            const instance = userContainer.get(someClass);\r\n            if (instance)\r\n                return instance;\r\n\r\n            if (!userContainerOptions || !userContainerOptions.fallback)\r\n                return instance;\r\n\r\n        } catch (error) {\r\n            if (!userContainerOptions || !userContainerOptions.fallbackOnErrors)\r\n                throw error;\r\n        }\r\n    }\r\n    return defaultContainer.get<T>(someClass);\r\n}"],"sourceRoot":"."}