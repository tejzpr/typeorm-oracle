{"version":3,"sources":["../../src/commands/MigrationCreateCommand.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iFAA8E;AAC9E,+CAA4C;AAC5C,mDAA8C;AAC9C,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAE/B;;GAEG;AACH;IAAA;QAEI,YAAO,GAAG,kBAAkB,CAAC;QAC7B,aAAQ,GAAG,+BAA+B,CAAC;IA0E/C,CAAC;IAxEG,wCAAO,GAAP,UAAQ,KAAU;QACd,OAAO,KAAK;aACP,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,YAAY;YACnB,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,8CAA8C;SAC3D,CAAC;aACD,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,MAAM;YACb,QAAQ,EAAE,8BAA8B;YACxC,MAAM,EAAE,IAAI;SACf,CAAC;aACD,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,KAAK;YACZ,QAAQ,EAAE,8CAA8C;SAC3D,CAAC;aACD,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,QAAQ;YACf,OAAO,EAAE,WAAW;YACpB,QAAQ,EAAE,iDAAiD;SAC9D,CAAC,CAAC;IACX,CAAC;IAEK,wCAAO,GAAb,UAAc,IAAS;;;;;;;wBAET,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;wBACjC,WAAW,GAAG,sBAAsB,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;wBACvE,QAAQ,GAAG,SAAS,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;wBACjD,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC;6BAGrB,CAAC,SAAS,EAAV,wBAAU;;;;wBAEA,uBAAuB,GAAG,IAAI,iDAAuB,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,GAAG,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;wBACpF,qBAAM,uBAAuB,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,EAAA;;wBAAtE,iBAAiB,GAAG,SAAkD;wBAC5E,SAAS,GAAG,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC,iBAAiB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,CAAC;;;;;;wBAItF,IAAI,GAAG,OAAO,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC;wBACnF,qBAAM,2BAAY,CAAC,UAAU,CAAC,IAAI,EAAE,WAAW,CAAC,EAAA;;wBAAhD,SAAgD,CAAC;wBACjD,OAAO,CAAC,GAAG,CAAC,eAAa,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,sCAAmC,CAAC,CAAC;;;;wBAG9E,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC,CAAC;wBACnE,OAAO,CAAC,KAAK,CAAC,KAAG,CAAC,CAAC;wBACnB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;;;;;KAEvB;IAED,4EAA4E;IAC5E,2BAA2B;IAC3B,4EAA4E;IAE5E;;OAEG;IACc,kCAAW,GAA5B,UAA6B,IAAY,EAAE,SAAiB;QACxD,OAAO,gFAEA,uBAAS,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,SAAS,8LAS/C,CAAC;IACE,CAAC;IAEL,6BAAC;AAAD,CA7EA,AA6EC,IAAA;AA7EY,wDAAsB","file":"MigrationCreateCommand.js","sourcesContent":["import {ConnectionOptionsReader} from \"../connection/ConnectionOptionsReader\";\r\nimport {CommandUtils} from \"./CommandUtils\";\r\nimport {camelCase} from \"../util/StringUtils\";\r\nconst chalk = require(\"chalk\");\r\n\r\n/**\r\n * Creates a new migration file.\r\n */\r\nexport class MigrationCreateCommand {\r\n\r\n    command = \"migration:create\";\r\n    describe = \"Creates a new migration file.\";\r\n\r\n    builder(yargs: any) {\r\n        return yargs\r\n            .option(\"c\", {\r\n                alias: \"connection\",\r\n                default: \"default\",\r\n                describe: \"Name of the connection on which run a query.\"\r\n            })\r\n            .option(\"n\", {\r\n                alias: \"name\",\r\n                describe: \"Name of the migration class.\",\r\n                demand: true\r\n            })\r\n            .option(\"d\", {\r\n                alias: \"dir\",\r\n                describe: \"Directory where migration should be created.\"\r\n            })\r\n            .option(\"f\", {\r\n                alias: \"config\",\r\n                default: \"ormconfig\",\r\n                describe: \"Name of the file with connection configuration.\"\r\n            });\r\n    }\r\n\r\n    async handler(argv: any) {\r\n        try {\r\n            const timestamp = new Date().getTime();\r\n            const fileContent = MigrationCreateCommand.getTemplate(argv.name, timestamp);\r\n            const filename = timestamp + \"-\" + argv.name + \".ts\";\r\n            let directory = argv.dir;\r\n\r\n            // if directory is not set then try to open tsconfig and find default path there\r\n            if (!directory) {\r\n                try {\r\n                    const connectionOptionsReader = new ConnectionOptionsReader({ root: process.cwd(), configName: argv.config });\r\n                    const connectionOptions = await connectionOptionsReader.get(argv.connection);\r\n                    directory = connectionOptions.cli ? connectionOptions.cli.migrationsDir : undefined;\r\n                } catch (err) { }\r\n            }\r\n\r\n            const path = process.cwd() + \"/\" + (directory ? (directory + \"/\") : \"\") + filename;\r\n            await CommandUtils.createFile(path, fileContent);\r\n            console.log(`Migration ${chalk.blue(path)} has been generated successfully.`);\r\n\r\n        } catch (err) {\r\n            console.log(chalk.black.bgRed(\"Error during migration creation:\"));\r\n            console.error(err);\r\n            process.exit(1);\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets contents of the migration file.\r\n     */\r\n    protected static getTemplate(name: string, timestamp: number): string {\r\n        return `import {MigrationInterface, QueryRunner} from \"typeorm\";\r\n\r\nexport class ${camelCase(name, true)}${timestamp} implements MigrationInterface {\r\n\r\n    public async up(queryRunner: QueryRunner): Promise<any> {\r\n    }\r\n\r\n    public async down(queryRunner: QueryRunner): Promise<any> {\r\n    }\r\n\r\n}\r\n`;\r\n    }\r\n\r\n}"],"sourceRoot":".."}