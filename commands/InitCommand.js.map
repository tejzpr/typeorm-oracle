{"version":3,"sources":["../../src/commands/InitCommand.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAA4C;AAE5C,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAC/B,2BAA6B;AAE7B;;GAEG;AACH;IAAA;QACI,YAAO,GAAG,MAAM,CAAC;QACjB,aAAQ,GAAG,+CAA+C;YACtD,wEAAwE;YACxE,mEAAmE,CAAC;IAuhB5E,CAAC;IArhBG,6BAAO,GAAP,UAAQ,KAAU;QACd,OAAO,KAAK;aACP,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,YAAY;YACnB,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,gDAAgD;SAC7D,CAAC;aACD,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,MAAM;YACb,QAAQ,EAAE,gCAAgC;SAC7C,CAAC;aACD,MAAM,CAAC,IAAI,EAAE;YACV,KAAK,EAAE,UAAU;YACjB,QAAQ,EAAE,2CAA2C;SACxD,CAAC;aACD,MAAM,CAAC,SAAS,EAAE;YACf,QAAQ,EAAE,yDAAyD;SACtE,CAAC;aACD,MAAM,CAAC,QAAQ,EAAE;YACd,QAAQ,EAAE,4EAA4E;SACzF,CAAC,CAAC;IACX,CAAC;IAEK,6BAAO,GAAb,UAAc,IAAS;;;;;;;wBAET,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,OAAO,CAAC;wBACpC,SAAS,GAAG,IAAI,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;wBACtD,QAAQ,GAAG,IAAI,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;wBACpD,QAAQ,GAAG,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;wBAChE,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;wBACrE,qBAAM,2BAAY,CAAC,UAAU,CAAC,QAAQ,GAAG,eAAe,EAAE,WAAW,CAAC,sBAAsB,CAAC,WAAW,CAAC,EAAE,KAAK,CAAC,EAAA;;wBAAjH,SAAiH,CAAC;6BAC9G,QAAQ,EAAR,wBAAQ;wBACR,qBAAM,2BAAY,CAAC,UAAU,CAAC,QAAQ,GAAG,qBAAqB,EAAE,WAAW,CAAC,wBAAwB,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC,EAAA;;wBAAtH,SAAsH,CAAC;;4BAC3H,qBAAM,2BAAY,CAAC,UAAU,CAAC,QAAQ,GAAG,aAAa,EAAE,WAAW,CAAC,gBAAgB,EAAE,CAAC,EAAA;;wBAAvF,SAAuF,CAAC;wBACxF,qBAAM,2BAAY,CAAC,UAAU,CAAC,QAAQ,GAAG,YAAY,EAAE,WAAW,CAAC,iBAAiB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,EAAE,KAAK,CAAC,EAAA;;wBAAlH,SAAkH,CAAC;wBACnH,qBAAM,2BAAY,CAAC,UAAU,CAAC,QAAQ,GAAG,gBAAgB,EAAE,WAAW,CAAC,mBAAmB,EAAE,CAAC,EAAA;;wBAA7F,SAA6F,CAAC;wBAC9F,qBAAM,2BAAY,CAAC,UAAU,CAAC,QAAQ,GAAG,iBAAiB,EAAE,WAAW,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,EAAA;;wBAAvG,SAAuG,CAAC;wBACxG,qBAAM,2BAAY,CAAC,UAAU,CAAC,QAAQ,GAAG,qBAAqB,EAAE,WAAW,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC,EAAA;;wBAA5G,SAA4G,CAAC;wBAC7G,qBAAM,2BAAY,CAAC,UAAU,CAAC,QAAQ,GAAG,eAAe,EAAE,WAAW,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC,EAAA;;wBAArG,SAAqG,CAAC;wBACtG,qBAAM,2BAAY,CAAC,iBAAiB,CAAC,QAAQ,GAAG,gBAAgB,CAAC,EAAA;;wBAAjE,SAAiE,CAAC;6BAG9D,SAAS,EAAT,yBAAS;wBACT,qBAAM,2BAAY,CAAC,UAAU,CAAC,QAAQ,GAAG,gBAAgB,EAAE,WAAW,CAAC,iBAAiB,EAAE,CAAC,EAAA;;wBAA3F,SAA2F,CAAC;wBAC5F,qBAAM,2BAAY,CAAC,UAAU,CAAC,QAAQ,GAAG,mCAAmC,EAAE,WAAW,CAAC,qBAAqB,EAAE,CAAC,EAAA;;wBAAlH,SAAkH,CAAC;;6BAG3F,qBAAM,2BAAY,CAAC,QAAQ,CAAC,QAAQ,GAAG,eAAe,CAAC,EAAA;;wBAA7E,mBAAmB,GAAG,SAAuD;wBACnF,qBAAM,2BAAY,CAAC,UAAU,CAAC,QAAQ,GAAG,eAAe,EAAE,WAAW,CAAC,iBAAiB,CAAC,mBAAmB,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC,EAAA;;wBAAlI,SAAkI,CAAC;wBAEnI,IAAI,IAAI,CAAC,IAAI,EAAE;4BACX,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,4BAA0B,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAa,CAAC,CAAC,CAAC;yBAEzF;6BAAM;4BACH,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,2CAA2C,CAAC,CAAC,CAAC;yBACzE;;;;wBAGD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC,CAAC;wBACvE,OAAO,CAAC,KAAK,CAAC,KAAG,CAAC,CAAC;wBACnB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;;;;;KAEvB;IAED,4EAA4E;IAC5E,2BAA2B;IAC3B,4EAA4E;IAE5E;;OAEG;IACc,gCAAoB,GAArC,UAAsC,QAAgB;QAClD,IAAM,OAAO,GAAkB,EAAG,CAAC;QACnC,QAAQ,QAAQ,EAAE;YACd,KAAK,OAAO;gBACR,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE;oBACnB,IAAI,EAAE,OAAO;oBACb,IAAI,EAAE,WAAW;oBACjB,IAAI,EAAE,IAAI;oBACV,QAAQ,EAAE,MAAM;oBAChB,QAAQ,EAAE,MAAM;oBAChB,QAAQ,EAAE,MAAM;iBACnB,CAAC,CAAC;gBACH,MAAM;YACV,KAAK,SAAS;gBACV,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE;oBACnB,IAAI,EAAE,SAAS;oBACf,IAAI,EAAE,WAAW;oBACjB,IAAI,EAAE,IAAI;oBACV,QAAQ,EAAE,MAAM;oBAChB,QAAQ,EAAE,MAAM;oBAChB,QAAQ,EAAE,MAAM;iBACnB,CAAC,CAAC;gBACH,MAAM;YACV,KAAK,QAAQ;gBACT,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE;oBACnB,IAAI,EAAE,QAAQ;oBACd,UAAU,EAAE,iBAAiB;iBAChC,CAAC,CAAC;gBACH,MAAM;YACV,KAAK,UAAU;gBACX,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE;oBACnB,MAAM,EAAE,UAAU;oBAClB,MAAM,EAAE,WAAW;oBACnB,MAAM,EAAE,IAAI;oBACZ,UAAU,EAAE,MAAM;oBAClB,UAAU,EAAE,MAAM;oBAClB,UAAU,EAAE,MAAM;iBACrB,CAAC,CAAC;gBACH,MAAM;YACV,KAAK,OAAO;gBACR,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE;oBACnB,MAAM,EAAE,OAAO;oBACf,MAAM,EAAE,WAAW;oBACnB,UAAU,EAAE,IAAI;oBAChB,UAAU,EAAE,YAAY;oBACxB,UAAU,EAAE,QAAQ;iBACvB,CAAC,CAAC;gBACH,MAAM;YACV,KAAK,QAAQ;gBACT,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE;oBACnB,MAAM,EAAE,QAAQ;oBAChB,MAAM,EAAE,WAAW;oBACnB,UAAU,EAAE,QAAQ;oBACpB,UAAU,EAAE,QAAQ;oBACpB,MAAM,EAAE,IAAI;oBACZ,KAAK,EAAE,kBAAkB;iBAC5B,CAAC,CAAC;gBACH,MAAM;YACV,KAAK,SAAS;gBACV,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE;oBACnB,MAAM,EAAE,SAAS;oBACjB,UAAU,EAAE,MAAM;iBACrB,CAAC,CAAC;gBACH,MAAM;SACb;QACD,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE;YACnB,WAAW,EAAE,IAAI;YACjB,OAAO,EAAE,KAAK;YACd,QAAQ,EAAE;gBACN,oBAAoB;aACvB;YACD,UAAU,EAAE;gBACR,uBAAuB;aAC1B;YACD,WAAW,EAAE;gBACT,wBAAwB;aAC3B;YACD,GAAG,EAAE;gBACD,WAAW,EAAE,YAAY;gBACzB,aAAa,EAAE,eAAe;gBAC9B,cAAc,EAAE,gBAAgB;aACnC;SACJ,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;IACjD,CAAC;IAED;;OAEG;IACc,+BAAmB,GAApC;QACI,OAAO,IAAI,CAAC,SAAS,CAAC;YAClB,eAAe,EAAE;gBACb,GAAG,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;gBACnB,MAAM,EAAE,KAAK;gBACb,MAAM,EAAE,UAAU;gBAClB,gBAAgB,EAAE,MAAM;gBACxB,MAAM,EAAE,SAAS;gBACjB,qBAAqB,EAAE,IAAI;gBAC3B,sBAAsB,EAAE,IAAI;gBAC5B,SAAS,EAAE,IAAI;aAClB;SACJ,EACC,SAAS,EAAE,CAAC,CAAC,CAAC;IACpB,CAAC;IAED;;OAEG;IACc,4BAAgB,GAAjC;QACI,OAAO,sDAKT,CAAC;IACH,CAAC;IAED;;OAEG;IACc,iCAAqB,GAAtC,UAAuC,QAAgB;QACnD,OAAO,sBAAoB,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC,0BAA0B,CAAC,CAAC,CAAC,wBAAwB,+EAK1G,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,2BAA2B,oBACtE,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,kIAYxD,CAAC;IACE,CAAC;IAED;;OAEG;IACc,6BAAiB,GAAlC;QACI,OAAO,8gBAsBX,CAAC;IACD,CAAC;IAED;;OAEG;IACc,iCAAqB,GAAtC;QACI,OAAO,myBAwBb,CAAC;IACC,CAAC;IAED;;OAEG;IACc,+BAAmB,GAApC,UAAqC,OAAgB;QACjD,IAAI,OAAO,EAAE;YACT,OAAO,klDAgDlB,CAAC;SAEO;aAAM;YACH,OAAO,6uBAqBlB,CAAC;SACO;IACL,CAAC;IAED;;OAEG;IACc,kCAAsB,GAAvC,UAAwC,WAAoB;QACxD,OAAO,IAAI,CAAC,SAAS,CAAC;YAClB,IAAI,EAAE,WAAW,IAAI,qBAAqB;YAC1C,OAAO,EAAE,OAAO;YAChB,WAAW,EAAE,yCAAyC;YACtD,eAAe,EAAE,EAChB;YACD,YAAY,EAAE,EACb;YACD,OAAO,EAAE,EACR;SACJ,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;IACrB,CAAC;IAED;;OAEG;IACc,oCAAwB,GAAzC,UAA0C,QAAgB;QAEtD,QAAQ,QAAQ,EAAE;YACd,KAAK,OAAO;gBACR,OAAO,6PAatB,CAAC;YACU,KAAK,SAAS;gBACV,OAAO,kQAatB,CAAC;YACU,KAAK,UAAU;gBACX,OAAO,+NAYtB,CAAC;YACU,KAAK,QAAQ;gBACT,OAAO,2BAEtB,CAAC;YACU,KAAK,QAAQ;gBACT,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC,CAAC,qCAAqC;YAEhI,KAAK,OAAO;gBACR,OAAO,4MAWtB,CAAC;YACU,KAAK,SAAS;gBACV,OAAO,qJAStB,CAAC;SACO;QACD,OAAO,EAAE,CAAC;IACd,CAAC;IAED;;OAEG;IACc,6BAAiB,GAAlC,UAAmC,OAA4B;QAC3D,IAAI,QAAQ,GAAG,wGAKtB,CAAC;QAEM,IAAI,OAAO,CAAC,MAAM,EAAE;YAChB,QAAQ,IAAI,sCACvB,CAAC;SACO;aAAM;YACH,QAAQ,IAAI,2DACvB,CAAC;SACO;QAED,QAAQ,IAAI,8BACnB,CAAC;QACM,OAAO,QAAQ,CAAC;IACpB,CAAC;IAED;;OAEG;IACc,6BAAiB,GAAlC,UAAmC,mBAA2B,EAAE,QAAgB,EAAE,OAAgB,CAAC,qBAAqB;QACpH,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAEpD,IAAI,CAAC,WAAW,CAAC,eAAe;YAAE,WAAW,CAAC,eAAe,GAAG,EAAE,CAAC;QACnE,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,eAAe,EAAE;YACvC,SAAS,EAAE,OAAO;YAClB,aAAa,EAAE,SAAS;YACxB,YAAY,EAAE,OAAO;SACxB,CAAC,CAAC;QAEH,IAAI,CAAC,WAAW,CAAC,YAAY;YAAE,WAAW,CAAC,YAAY,GAAG,EAAE,CAAC;QAC7D,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,YAAY,EAAE;YACpC,SAAS,EAAE,OAAO,CAAC,iBAAiB,CAAC,CAAC,OAAO;YAC7C,kBAAkB,EAAE,SAAS;SAChC,CAAC,CAAC;QAEH,QAAQ,QAAQ,EAAE;YACd,KAAK,OAAO,CAAC;YACb,KAAK,SAAS;gBACV,WAAW,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,SAAS,CAAC;gBAC9C,MAAM;YACV,KAAK,UAAU;gBACX,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC;gBAC1C,MAAM;YACV,KAAK,QAAQ;gBACT,WAAW,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC;gBAChD,MAAM;YACV,KAAK,QAAQ;gBACT,WAAW,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,SAAS,CAAC;gBACjD,MAAM;YACV,KAAK,OAAO;gBACR,WAAW,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAC;gBAC7C,MAAM;YACV,KAAK,SAAS;gBACV,WAAW,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC;gBAChD,MAAM;SACb;QAED,IAAI,OAAO,EAAE;YACT,WAAW,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC;YAChD,WAAW,CAAC,YAAY,CAAC,aAAa,CAAC,GAAG,SAAS,CAAC;SACvD;QAED,IAAI,CAAC,WAAW,CAAC,OAAO;YAAE,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;QACnD,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE;YAC/B,KAAK,EAAE,8CAA8C,CAAA,sBAAsB;SAC9E,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;IACrD,CAAC;IAEL,kBAAC;AAAD,CA3hBA,AA2hBC,IAAA;AA3hBY,kCAAW","file":"InitCommand.js","sourcesContent":["import {CommandUtils} from \"./CommandUtils\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nconst chalk = require(\"chalk\");\r\nimport * as path from \"path\";\r\n\r\n/**\r\n * Generates a new project with TypeORM.\r\n */\r\nexport class InitCommand {\r\n    command = \"init\";\r\n    describe = \"Generates initial TypeORM project structure. \" +\r\n        \"If name specified then creates files inside directory called as name. \" +\r\n        \"If its not specified then creates files inside current directory.\";\r\n\r\n    builder(yargs: any) {\r\n        return yargs\r\n            .option(\"c\", {\r\n                alias: \"connection\",\r\n                default: \"default\",\r\n                describe: \"Name of the connection on which to run a query\"\r\n            })\r\n            .option(\"n\", {\r\n                alias: \"name\",\r\n                describe: \"Name of the project directory.\"\r\n            })\r\n            .option(\"db\", {\r\n                alias: \"database\",\r\n                describe: \"Database type you'll use in your project.\"\r\n            })\r\n            .option(\"express\", {\r\n                describe: \"Indicates if express should be included in the project.\"\r\n            })\r\n            .option(\"docker\", {\r\n                describe: \"Set to true if docker-compose must be generated as well. False by default.\"\r\n            });\r\n    }\r\n\r\n    async handler(argv: any) {\r\n        try {\r\n            const database = argv.database || \"mysql\";\r\n            const isExpress = argv.express !== undefined ? true : false;\r\n            const isDocker = argv.docker !== undefined ? true : false;\r\n            const basePath = process.cwd() + (argv.name ? (\"/\" + argv.name) : \"\");\r\n            const projectName = argv.name ? path.basename(argv.name) : undefined;\r\n            await CommandUtils.createFile(basePath + \"/package.json\", InitCommand.getPackageJsonTemplate(projectName), false);\r\n            if (isDocker)\r\n                await CommandUtils.createFile(basePath + \"/docker-compose.yml\", InitCommand.getDockerComposeTemplate(database), false);\r\n            await CommandUtils.createFile(basePath + \"/.gitignore\", InitCommand.getGitIgnoreFile());\r\n            await CommandUtils.createFile(basePath + \"/README.md\", InitCommand.getReadmeTemplate({ docker: isDocker }), false);\r\n            await CommandUtils.createFile(basePath + \"/tsconfig.json\", InitCommand.getTsConfigTemplate());\r\n            await CommandUtils.createFile(basePath + \"/ormconfig.json\", InitCommand.getOrmConfigTemplate(database));\r\n            await CommandUtils.createFile(basePath + \"/src/entity/User.ts\", InitCommand.getUserEntityTemplate(database));\r\n            await CommandUtils.createFile(basePath + \"/src/index.ts\", InitCommand.getAppIndexTemplate(isExpress));\r\n            await CommandUtils.createDirectories(basePath + \"/src/migration\");\r\n\r\n            // generate extra files for express application\r\n            if (isExpress) {\r\n                await CommandUtils.createFile(basePath + \"/src/routes.ts\", InitCommand.getRoutesTemplate());\r\n                await CommandUtils.createFile(basePath + \"/src/controller/UserController.ts\", InitCommand.getControllerTemplate());\r\n            }\r\n\r\n            const packageJsonContents = await CommandUtils.readFile(basePath + \"/package.json\");\r\n            await CommandUtils.createFile(basePath + \"/package.json\", InitCommand.appendPackageJson(packageJsonContents, database, isExpress));\r\n\r\n            if (argv.name) {\r\n                console.log(chalk.green(`Project created inside ${chalk.blue(basePath)} directory.`));\r\n\r\n            } else {\r\n                console.log(chalk.green(`Project created inside current directory.`));\r\n            }\r\n\r\n        } catch (err) {\r\n            console.log(chalk.black.bgRed(\"Error during project initialization:\"));\r\n            console.error(err);\r\n            process.exit(1);\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets contents of the ormconfig file.\r\n     */\r\n    protected static getOrmConfigTemplate(database: string): string {\r\n        const options: ObjectLiteral = { };\r\n        switch (database) {\r\n            case \"mysql\":\r\n                Object.assign(options, {\r\n                    type: \"mysql\",\r\n                    host: \"localhost\",\r\n                    port: 3306,\r\n                    username: \"test\",\r\n                    password: \"test\",\r\n                    database: \"test\",\r\n                });\r\n                break;\r\n            case \"mariadb\":\r\n                Object.assign(options, {\r\n                    type: \"mariadb\",\r\n                    host: \"localhost\",\r\n                    port: 3306,\r\n                    username: \"test\",\r\n                    password: \"test\",\r\n                    database: \"test\",\r\n                });\r\n                break;\r\n            case \"sqlite\":\r\n                Object.assign(options, {\r\n                    type: \"sqlite\",\r\n                    \"database\": \"database.sqlite\",\r\n                });\r\n                break;\r\n            case \"postgres\":\r\n                Object.assign(options, {\r\n                    \"type\": \"postgres\",\r\n                    \"host\": \"localhost\",\r\n                    \"port\": 5432,\r\n                    \"username\": \"test\",\r\n                    \"password\": \"test\",\r\n                    \"database\": \"test\",\r\n                });\r\n                break;\r\n            case \"mssql\":\r\n                Object.assign(options, {\r\n                    \"type\": \"mssql\",\r\n                    \"host\": \"localhost\",\r\n                    \"username\": \"sa\",\r\n                    \"password\": \"Admin12345\",\r\n                    \"database\": \"tempdb\",\r\n                });\r\n                break;\r\n            case \"oracle\":\r\n                Object.assign(options, {\r\n                    \"type\": \"oracle\",\r\n                    \"host\": \"localhost\",\r\n                    \"username\": \"system\",\r\n                    \"password\": \"oracle\",\r\n                    \"port\": 1521,\r\n                    \"sid\": \"xe.oracle.docker\",\r\n                });\r\n                break;\r\n            case \"mongodb\":\r\n                Object.assign(options, {\r\n                    \"type\": \"mongodb\",\r\n                    \"database\": \"test\",\r\n                });\r\n                break;\r\n        }\r\n        Object.assign(options, {\r\n            synchronize: true,\r\n            logging: false,\r\n            entities: [\r\n                \"src/entity/**/*.ts\"\r\n            ],\r\n            migrations: [\r\n                \"src/migration/**/*.ts\"\r\n            ],\r\n            subscribers: [\r\n                \"src/subscriber/**/*.ts\"\r\n            ],\r\n            cli: {\r\n                entitiesDir: \"src/entity\",\r\n                migrationsDir: \"src/migration\",\r\n                subscribersDir: \"src/subscriber\"\r\n            }\r\n        });\r\n        return JSON.stringify(options, undefined, 3);\r\n    }\r\n\r\n    /**\r\n     * Gets contents of the ormconfig file.\r\n     */\r\n    protected static getTsConfigTemplate(): string {\r\n        return JSON.stringify({\r\n            compilerOptions: {\r\n                lib: [\"es5\", \"es6\"],\r\n                target: \"es5\",\r\n                module: \"commonjs\",\r\n                moduleResolution: \"node\",\r\n                outDir: \"./build\",\r\n                emitDecoratorMetadata: true,\r\n                experimentalDecorators: true,\r\n                sourceMap: true\r\n            }\r\n        }\r\n        , undefined, 3);\r\n    }\r\n\r\n    /**\r\n     * Gets contents of the .gitignore file.\r\n     */\r\n    protected static getGitIgnoreFile(): string {\r\n        return `.idea/\r\n.vscode/\r\nnode_modules/\r\nbuild/\r\ntmp/\r\ntemp/`;\r\n    }\r\n\r\n    /**\r\n     * Gets contents of the user entity.\r\n     */\r\n    protected static getUserEntityTemplate(database: string): string {\r\n        return `import {Entity, ${ database === \"mongodb\" ? \"ObjectIdColumn, ObjectID\" : \"PrimaryGeneratedColumn\" }, Column} from \"typeorm\";\r\n\r\n@Entity()\r\nexport class User {\r\n\r\n    ${ database === \"mongodb\" ? \"@ObjectIdColumn()\" : \"@PrimaryGeneratedColumn()\" }\r\n    id: ${ database === \"mongodb\" ? \"ObjectID\" : \"number\" };\r\n\r\n    @Column()\r\n    firstName: string;\r\n\r\n    @Column()\r\n    lastName: string;\r\n\r\n    @Column()\r\n    age: number;\r\n\r\n}\r\n`;\r\n    }\r\n\r\n    /**\r\n     * Gets contents of the route file (used when express is enabled).\r\n     */\r\n    protected static getRoutesTemplate(): string {\r\n        return `import {UserController} from \"./controller/UserController\";\r\n\r\nexport const Routes = [{\r\n    method: \"get\",\r\n    route: \"/users\",\r\n    controller: UserController,\r\n    action: \"all\"\r\n}, {\r\n    method: \"get\",\r\n    route: \"/users/:id\",\r\n    controller: UserController,\r\n    action: \"one\"\r\n}, {\r\n    method: \"post\",\r\n    route: \"/users\",\r\n    controller: UserController,\r\n    action: \"save\"\r\n}, {\r\n    method: \"delete\",\r\n    route: \"/users\",\r\n    controller: UserController,\r\n    action: \"remove\"\r\n}];`;\r\n    }\r\n\r\n    /**\r\n     * Gets contents of the user controller file (used when express is enabled).\r\n     */\r\n    protected static getControllerTemplate(): string {\r\n        return `import {getRepository} from \"typeorm\";\r\nimport {NextFunction, Request, Response} from \"express\";\r\nimport {User} from \"../entity/User\";\r\n\r\nexport class UserController {\r\n\r\n    private userRepository = getRepository(User);\r\n\r\n    async all(request: Request, response: Response, next: NextFunction) {\r\n        return this.userRepository.find();\r\n    }\r\n\r\n    async one(request: Request, response: Response, next: NextFunction) {\r\n        return this.userRepository.findOne(request.params.id);\r\n    }\r\n\r\n    async save(request: Request, response: Response, next: NextFunction) {\r\n        return this.userRepository.save(request.body);\r\n    }\r\n\r\n    async remove(request: Request, response: Response, next: NextFunction) {\r\n        await this.userRepository.removeById(request.params.id);\r\n    }\r\n\r\n}`;\r\n    }\r\n\r\n    /**\r\n     * Gets contents of the main (index) application file.\r\n     */\r\n    protected static getAppIndexTemplate(express: boolean): string {\r\n        if (express) {\r\n            return `import \"reflect-metadata\";\r\nimport {createConnection} from \"typeorm\";\r\nimport * as express from \"express\";\r\nimport * as bodyParser from \"body-parser\";\r\nimport {Request, Response} from \"express\";\r\nimport {Routes} from \"./routes\";\r\nimport {User} from \"./entity/User\";\r\n\r\ncreateConnection().then(async connection => {\r\n\r\n    // create express app\r\n    const app = express();\r\n    app.use(bodyParser.json());\r\n\r\n    // register express routes from defined application routes\r\n    Routes.forEach(route => {\r\n        (app as any)[route.method](route.route, (req: Request, res: Response, next: Function) => {\r\n            const result = (new (route.controller as any))[route.action](req, res, next);\r\n            if (result instanceof Promise) {\r\n                result.then(result => result !== null && result !== undefined ? res.send(result) : undefined);\r\n\r\n            } else if (result !== null && result !== undefined) {\r\n                res.json(result);\r\n            }\r\n        });\r\n    });\r\n\r\n    // setup express app here\r\n    // ...\r\n\r\n    // start express server\r\n    app.listen(3000);\r\n\r\n    // insert new users for test\r\n    await connection.manager.save(connection.manager.create(User, {\r\n        firstName: \"Timber\",\r\n        lastName: \"Saw\",\r\n        age: 27\r\n    }));\r\n    await connection.manager.save(connection.manager.create(User, {\r\n        firstName: \"Phantom\",\r\n        lastName: \"Assassin\",\r\n        age: 24\r\n    }));\r\n\r\n    console.log(\"Express server has started on port 3000. Open http://localhost:3000/users to see results\");\r\n\r\n}).catch(error => console.log(error));\r\n`;\r\n\r\n        } else {\r\n            return `import \"reflect-metadata\";\r\nimport {createConnection} from \"typeorm\";\r\nimport {User} from \"./entity/User\";\r\n\r\ncreateConnection().then(async connection => {\r\n\r\n    console.log(\"Inserting a new user into the database...\");\r\n    const user = new User();\r\n    user.firstName = \"Timber\";\r\n    user.lastName = \"Saw\";\r\n    user.age = 25;\r\n    await connection.manager.save(user);\r\n    console.log(\"Saved a new user with id: \" + user.id);\r\n    \r\n    console.log(\"Loading users from the database...\");\r\n    const users = await connection.manager.find(User);\r\n    console.log(\"Loaded users: \", users);\r\n     \r\n    console.log(\"Here you can setup and run express/koa/any other framework.\");\r\n    \r\n}).catch(error => console.log(error));\r\n`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets contents of the new package.json file.\r\n     */\r\n    protected static getPackageJsonTemplate(projectName?: string): string {\r\n        return JSON.stringify({\r\n            name: projectName || \"new-typeorm-project\",\r\n            version: \"0.0.1\",\r\n            description: \"Awesome project developed with TypeORM.\",\r\n            devDependencies: {\r\n            },\r\n            dependencies: {\r\n            },\r\n            scripts: {\r\n            }\r\n        }, undefined, 3);\r\n    }\r\n\r\n    /**\r\n     * Gets contents of the new docker-compose.yml file.\r\n     */\r\n    protected static getDockerComposeTemplate(database: string): string {\r\n\r\n        switch (database) {\r\n            case \"mysql\":\r\n                return `version: '3'\r\nservices:\r\n\r\n  mysql:\r\n    image: \"mysql:5.7.10\"\r\n    ports:\r\n      - \"3306:3306\"\r\n    environment:\r\n      MYSQL_ROOT_PASSWORD: \"admin\"\r\n      MYSQL_USER: \"test\"\r\n      MYSQL_PASSWORD: \"test\"\r\n      MYSQL_DATABASE: \"test\"\r\n\r\n`;\r\n            case \"mariadb\":\r\n                return `version: '3'\r\nservices:\r\n\r\n  mariadb:\r\n    image: \"mariadb:10.1.16\"\r\n    ports:\r\n      - \"3306:3306\"\r\n    environment:\r\n      MYSQL_ROOT_PASSWORD: \"admin\"\r\n      MYSQL_USER: \"test\"\r\n      MYSQL_PASSWORD: \"test\"\r\n      MYSQL_DATABASE: \"test\"\r\n\r\n`;\r\n            case \"postgres\":\r\n                return `version: '3'\r\nservices:\r\n\r\n  postgres:\r\n    image: \"postgres:9.6.1\"\r\n    ports:\r\n      - \"5432:5432\"\r\n    environment:\r\n      POSTGRES_USER: \"test\"\r\n      POSTGRES_PASSWORD: \"test\"\r\n      POSTGRES_DB: \"test\"\r\n\r\n`;\r\n            case \"sqlite\":\r\n                return `version: '3'\r\nservices:\r\n`;\r\n            case \"oracle\":\r\n                throw new Error(`You cannot initialize a project with docker for Oracle driver yet.`); // todo: implement for oracle as well\r\n\r\n            case \"mssql\":\r\n                return `version: '3'\r\nservices:\r\n\r\n  mssql:\r\n    image: \"microsoft/mssql-server-linux:rc2\"\r\n    ports:\r\n      - \"1433:1433\"\r\n    environment:\r\n      SA_PASSWORD: \"Admin12345\"\r\n      ACCEPT_EULA: \"Y\"\r\n\r\n`;\r\n            case \"mongodb\":\r\n                return `version: '3'\r\nservices:\r\n\r\n  mongodb:\r\n    image: \"mongo:3.4.1\"\r\n    container_name: \"typeorm-mongodb\"\r\n    ports:\r\n      - \"27017:27017\"\r\n\r\n`;\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Gets contents of the new readme.md file.\r\n     */\r\n    protected static getReadmeTemplate(options: { docker: boolean }): string {\r\n        let template = `# Awesome Project Build with TypeORM\r\n        \r\nSteps to run this project:\r\n\r\n1. Run \\`npm i\\` command\r\n`;\r\n\r\n        if (options.docker) {\r\n            template += `2. Run \\`docker-compose up\\` command\r\n`;\r\n        } else {\r\n            template += `2. Setup database settings inside \\`ormconfig.json\\` file\r\n`;\r\n        }\r\n\r\n        template += `3. Run \\`npm start\\` command\r\n`;\r\n        return template;\r\n    }\r\n\r\n    /**\r\n     * Appends to a given package.json template everything needed.\r\n     */\r\n    protected static appendPackageJson(packageJsonContents: string, database: string, express: boolean /*, docker: boolean*/): string {\r\n        const packageJson = JSON.parse(packageJsonContents);\r\n\r\n        if (!packageJson.devDependencies) packageJson.devDependencies = {};\r\n        Object.assign(packageJson.devDependencies, {\r\n            \"ts-node\": \"3.3.0\",\r\n            \"@types/node\": \"^8.0.29\",\r\n            \"typescript\": \"2.5.2\"\r\n        });\r\n\r\n        if (!packageJson.dependencies) packageJson.dependencies = {};\r\n        Object.assign(packageJson.dependencies, {\r\n            \"typeorm\": require(\"../package.json\").version,\r\n            \"reflect-metadata\": \"^0.1.10\"\r\n        });\r\n\r\n        switch (database) {\r\n            case \"mysql\":\r\n            case \"mariadb\":\r\n                packageJson.dependencies[\"mysql\"] = \"^2.14.1\";\r\n                break;\r\n            case \"postgres\":\r\n                packageJson.dependencies[\"pg\"] = \"^7.3.0\";\r\n                break;\r\n            case \"sqlite\":\r\n                packageJson.dependencies[\"sqlite3\"] = \"^3.1.10\";\r\n                break;\r\n            case \"oracle\":\r\n                packageJson.dependencies[\"oracledb\"] = \"^1.13.1\";\r\n                break;\r\n            case \"mssql\":\r\n                packageJson.dependencies[\"mssql\"] = \"^4.0.4\";\r\n                break;\r\n            case \"mongodb\":\r\n                packageJson.dependencies[\"mongodb\"] = \"^2.2.31\";\r\n                break;\r\n        }\r\n\r\n        if (express) {\r\n            packageJson.dependencies[\"express\"] = \"^4.15.4\";\r\n            packageJson.dependencies[\"body-parser\"] = \"^1.18.1\";\r\n        }\r\n\r\n        if (!packageJson.scripts) packageJson.scripts = {};\r\n        Object.assign(packageJson.scripts, {\r\n            start: /*(docker ? \"docker-compose up && \" : \"\") + */\"ts-node src/index.ts\"\r\n        });\r\n        return JSON.stringify(packageJson, undefined, 3);\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}