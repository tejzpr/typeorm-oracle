{"version":3,"sources":["../../src/commands/MigrationGenerateCommand.ts"],"names":[],"mappings":"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","file":"MigrationGenerateCommand.js","sourcesContent":["import {ConnectionOptionsReader} from \"../connection/ConnectionOptionsReader\";\r\nimport {CommandUtils} from \"./CommandUtils\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {createConnection} from \"../index\";\r\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\r\nimport {camelCase} from \"../util/StringUtils\";\r\n\r\nconst chalk = require(\"chalk\");\r\n\r\n/**\r\n * Generates a new migration file with sql needs to be executed to update schema.\r\n */\r\nexport class MigrationGenerateCommand {\r\n\r\n    command = \"migration:generate\";\r\n    describe = \"Generates a new migration file with sql needs to be executed to update schema.\";\r\n\r\n    builder(yargs: any) {\r\n        return yargs\r\n            .option(\"c\", {\r\n                alias: \"connection\",\r\n                default: \"default\",\r\n                describe: \"Name of the connection on which run a query.\"\r\n            })\r\n            .option(\"n\", {\r\n                alias: \"name\",\r\n                describe: \"Name of the migration class.\",\r\n                demand: true\r\n            })\r\n            .option(\"d\", {\r\n                alias: \"dir\",\r\n                describe: \"Directory where migration should be created.\"\r\n            })\r\n            .option(\"f\", {\r\n                alias: \"config\",\r\n                default: \"ormconfig\",\r\n                describe: \"Name of the file with connection configuration.\"\r\n            });\r\n    }\r\n\r\n    async handler(argv: any) {\r\n        const timestamp = new Date().getTime();\r\n        const filename = timestamp + \"-\" + argv.name + \".ts\";\r\n        let directory = argv.dir;\r\n\r\n        // if directory is not set then try to open tsconfig and find default path there\r\n        if (!directory) {\r\n            try {\r\n                const connectionOptionsReader = new ConnectionOptionsReader({ root: process.cwd(), configName: argv.config });\r\n                const connectionOptions = await connectionOptionsReader.get(argv.connection);\r\n                directory = connectionOptions.cli ? connectionOptions.cli.migrationsDir : undefined;\r\n            } catch (err) { }\r\n        }\r\n\r\n        let connection: Connection|undefined = undefined;\r\n        try {\r\n            const connectionOptionsReader = new ConnectionOptionsReader({ root: process.cwd(), configName: argv.config });\r\n            const connectionOptions = await connectionOptionsReader.get(argv.connection);\r\n            Object.assign(connectionOptions, {\r\n                synchronize: false,\r\n                migrationsRun: false,\r\n                dropSchema: false,\r\n                logging: false\r\n            });\r\n            connection = await createConnection(connectionOptions);\r\n            const sqlInMemory = await connection.driver.createSchemaBuilder().log();\r\n            const upSqls: string[] = [], downSqls: string[] = [];\r\n\r\n            // mysql is exceptional here because it uses ` character in to escape names in queries, that's why for mysql\r\n            // we are using simple quoted string instead of template string syntax\r\n            if (connection.driver instanceof MysqlDriver) {\r\n                sqlInMemory.upQueries.forEach(query => {\r\n                    upSqls.push(\"        await queryRunner.query(\\\"\" + query.replace(new RegExp(`\"`, \"g\"), `\\\\\"`) + \"\\\");\");\r\n                });\r\n                sqlInMemory.downQueries.forEach(query => {\r\n                    downSqls.push(\"        await queryRunner.query(\\\"\" + query.replace(new RegExp(`\"`, \"g\"), `\\\\\"`) + \"\\\");\");\r\n                });\r\n            } else {\r\n                sqlInMemory.upQueries.forEach(query => {\r\n                    upSqls.push(\"        await queryRunner.query(`\" + query.replace(new RegExp(\"`\", \"g\"), \"\\\\`\") + \"`);\");\r\n                });\r\n                sqlInMemory.downQueries.forEach(query => {\r\n                    downSqls.push(\"        await queryRunner.query(`\" + query.replace(new RegExp(\"`\", \"g\"), \"\\\\`\") + \"`);\");\r\n                });\r\n            }\r\n\r\n            if (upSqls.length) {\r\n                const fileContent = MigrationGenerateCommand.getTemplate(argv.name, timestamp, upSqls, downSqls.reverse());\r\n                const path = process.cwd() + \"/\" + (directory ? (directory + \"/\") : \"\") + filename;\r\n                await CommandUtils.createFile(path, fileContent);\r\n\r\n                console.log(chalk.green(`Migration ${chalk.blue(path)} has been generated successfully.`));\r\n\r\n            } else {\r\n                console.log(chalk.yellow(`No changes in database schema were found - cannot generate a migration. To create a new empty migration use \"typeorm migration:create\" command`));\r\n            }\r\n            await connection.close();\r\n\r\n        } catch (err) {\r\n            if (connection) await (connection as Connection).close();\r\n\r\n            console.log(chalk.black.bgRed(\"Error during migration generation:\"));\r\n            console.error(err);\r\n            process.exit(1);\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets contents of the migration file.\r\n     */\r\n    protected static getTemplate(name: string, timestamp: number, upSqls: string[], downSqls: string[]): string {\r\n        return `import {MigrationInterface, QueryRunner} from \"typeorm\";\r\n\r\nexport class ${camelCase(name, true)}${timestamp} implements MigrationInterface {\r\n\r\n    public async up(queryRunner: QueryRunner): Promise<any> {\r\n${upSqls.join(`\r\n`)}\r\n    }\r\n\r\n    public async down(queryRunner: QueryRunner): Promise<any> {\r\n${downSqls.join(`\r\n`)}\r\n    }\r\n\r\n}\r\n`;\r\n    }\r\n\r\n}"],"sourceRoot":".."}