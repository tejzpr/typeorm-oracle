{"version":3,"sources":["../../src/query-builder/DeleteQueryBuilder.ts"],"names":[],"mappings":"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","file":"DeleteQueryBuilder.js","sourcesContent":["import {QueryBuilder} from \"./QueryBuilder\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {ObjectType} from \"../common/ObjectType\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\r\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\r\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\r\nimport {WhereExpression} from \"./WhereExpression\";\r\nimport {Brackets} from \"./Brackets\";\r\nimport {DeleteResult} from \"./result/DeleteResult\";\r\nimport {ReturningStatementNotSupportedError} from \"../error/ReturningStatementNotSupportedError\";\r\nimport {SqljsDriver} from \"../driver/sqljs/SqljsDriver\";\r\nimport {BroadcasterResult} from \"../subscriber/BroadcasterResult\";\r\nimport {EntitySchema} from \"../index\";\r\n\r\n/**\r\n * Allows to build complex sql queries in a fashion way and execute those queries.\r\n */\r\nexport class DeleteQueryBuilder<Entity> extends QueryBuilder<Entity> implements WhereExpression {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connectionOrQueryBuilder: Connection|QueryBuilder<any>, queryRunner?: QueryRunner) {\r\n        super(connectionOrQueryBuilder as any, queryRunner);\r\n        this.expressionMap.aliasNamePrefixingEnabled = false;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets generated sql query without parameters being replaced.\r\n     */\r\n    getQuery(): string {\r\n        let sql = this.createDeleteExpression();\r\n        return sql.trim();\r\n    }\r\n\r\n    /**\r\n     * Executes sql generated by query builder and returns raw database results.\r\n     */\r\n    async execute(): Promise<DeleteResult> {\r\n        const [sql, parameters] = this.getQueryAndParameters();\r\n        const queryRunner = this.obtainQueryRunner();\r\n        let transactionStartedByUs: boolean = false;\r\n\r\n        try {\r\n\r\n            // start transaction if it was enabled\r\n            if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {\r\n                await queryRunner.startTransaction();\r\n                transactionStartedByUs = true;\r\n            }\r\n\r\n            // call before deletion methods in listeners and subscribers\r\n            if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias!.hasMetadata) {\r\n                const broadcastResult = new BroadcasterResult();\r\n                queryRunner.broadcaster.broadcastBeforeRemoveEvent(broadcastResult, this.expressionMap.mainAlias!.metadata);\r\n                if (broadcastResult.promises.length > 0) await Promise.all(broadcastResult.promises);\r\n            }\r\n\r\n            // execute query\r\n            const deleteResult = new DeleteResult();\r\n            deleteResult.raw = await queryRunner.query(sql, parameters);\r\n\r\n            // call after deletion methods in listeners and subscribers\r\n            if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias!.hasMetadata) {\r\n                const broadcastResult = new BroadcasterResult();\r\n                queryRunner.broadcaster.broadcastAfterRemoveEvent(broadcastResult, this.expressionMap.mainAlias!.metadata);\r\n                if (broadcastResult.promises.length > 0) await Promise.all(broadcastResult.promises);\r\n            }\r\n\r\n            // close transaction if we started it\r\n            if (transactionStartedByUs)\r\n                await queryRunner.commitTransaction();\r\n\r\n            return deleteResult;\r\n\r\n        } catch (error) {\r\n\r\n            // rollback transaction if we started it\r\n            if (transactionStartedByUs) {\r\n                try {\r\n                    await queryRunner.rollbackTransaction();\r\n                } catch (rollbackError) { }\r\n            }\r\n            throw error;\r\n\r\n        } finally {\r\n            if (queryRunner !== this.queryRunner) { // means we created our own query runner\r\n                await queryRunner.release();\r\n            }\r\n            if (this.connection.driver instanceof SqljsDriver && !queryRunner.isTransactionActive) {\r\n                await this.connection.driver.autoSave();\r\n            }\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Specifies FROM which entity's table select/update/delete will be executed.\r\n     * Also sets a main string alias of the selection data.\r\n     */\r\n    from<T>(entityTarget: ObjectType<T>|EntitySchema<T>|string, aliasName?: string): DeleteQueryBuilder<T> {\r\n        entityTarget = entityTarget instanceof EntitySchema ? entityTarget.options.name : entityTarget;\r\n        const mainAlias = this.createFromAlias(entityTarget, aliasName);\r\n        this.expressionMap.setMainAlias(mainAlias);\r\n        return (this as any) as DeleteQueryBuilder<T>;\r\n    }\r\n\r\n    /**\r\n     * Sets WHERE condition in the query builder.\r\n     * If you had previously WHERE expression defined,\r\n     * calling this function will override previously set WHERE conditions.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    where(where: Brackets|string|((qb: this) => string)|ObjectLiteral|ObjectLiteral[], parameters?: ObjectLiteral): this {\r\n        this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\r\n        const condition = this.computeWhereParameter(where);\r\n        if (condition)\r\n            this.expressionMap.wheres = [{ type: \"simple\", condition: condition }];\r\n        if (parameters)\r\n            this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new AND WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    andWhere(where: Brackets|string|((qb: this) => string), parameters?: ObjectLiteral): this {\r\n        this.expressionMap.wheres.push({ type: \"and\", condition: this.computeWhereParameter(where) });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new OR WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    orWhere(where: Brackets|string|((qb: this) => string), parameters?: ObjectLiteral): this {\r\n        this.expressionMap.wheres.push({ type: \"or\", condition: this.computeWhereParameter(where) });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new AND WHERE with conditions for the given ids.\r\n     */\r\n    whereInIds(ids: any|any[]): this {\r\n        return this.where(this.createWhereIdsExpression(ids));\r\n    }\r\n\r\n    /**\r\n     * Adds new AND WHERE with conditions for the given ids.\r\n     */\r\n    andWhereInIds(ids: any|any[]): this {\r\n        return this.andWhere(this.createWhereIdsExpression(ids));\r\n    }\r\n\r\n    /**\r\n     * Adds new OR WHERE with conditions for the given ids.\r\n     */\r\n    orWhereInIds(ids: any|any[]): this {\r\n        return this.orWhere(this.createWhereIdsExpression(ids));\r\n    }\r\n    /**\r\n     * Optional returning/output clause.\r\n     * This will return given column values.\r\n     */\r\n    output(columns: string[]): this;\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     * Returning is a SQL string containing returning statement.\r\n     */\r\n    output(output: string): this;\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    output(output: string|string[]): this;\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    output(output: string|string[]): this {\r\n        return this.returning(output);\r\n    }\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     * This will return given column values.\r\n     */\r\n    returning(columns: string[]): this;\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     * Returning is a SQL string containing returning statement.\r\n     */\r\n    returning(returning: string): this;\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    returning(returning: string|string[]): this;\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    returning(returning: string|string[]): this {\r\n\r\n        // not all databases support returning/output cause\r\n        if (!this.connection.driver.isReturningSqlSupported())\r\n            throw new ReturningStatementNotSupportedError();\r\n\r\n        this.expressionMap.returning = returning;\r\n        return this;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates DELETE express used to perform query.\r\n     */\r\n    protected createDeleteExpression() {\r\n        const tableName = this.getTableName(this.getMainTableName());\r\n        const whereExpression = this.createWhereExpression();\r\n        const returningExpression = this.createReturningExpression();\r\n\r\n        if (returningExpression && this.connection.driver instanceof PostgresDriver) {\r\n            return `DELETE FROM ${tableName}${whereExpression} RETURNING ${returningExpression}`;\r\n\r\n        } else if (returningExpression !== \"\" && this.connection.driver instanceof SqlServerDriver) {\r\n            return `DELETE FROM ${tableName} OUTPUT ${returningExpression}${whereExpression}`;\r\n\r\n        } else {\r\n            return `DELETE FROM ${tableName}${whereExpression}`;\r\n        }\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}