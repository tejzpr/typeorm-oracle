{"version":3,"sources":["../../src/query-builder/relation-count/RelationCountAttribute.ts"],"names":[],"mappings":";;AACA,0DAAuD;AAKvD;IAsBI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,gCAAoB,aAAiC,EACzC,sBAAwD;QADhD,kBAAa,GAAb,aAAa,CAAoB;QAEjD,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,sBAAsB,IAAI,EAAE,CAAC,CAAC;IACtD,CAAC;IAMD,sBAAI,2DAAuB;QAJ3B,4EAA4E;QAC5E,iBAAiB;QACjB,4EAA4E;aAE5E;YACI,OAAO,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC;QAC/C,CAAC;;;OAAA;IAQD,sBAAI,+CAAW;QANf;;;;;WAKG;aACH;YACI,IAAI,CAAC,qCAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC;gBACrD,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;YAErF,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,CAAC;;;OAAA;IASD,sBAAI,oDAAgB;QAPpB;;;;;;WAMG;aACH;YACI,IAAI,CAAC,qCAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC;gBACrD,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;YAEhF,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,CAAC;;;OAAA;IAED,sBAAI,iDAAa;aAAjB;YACU,IAAA,iCAA8D,EAA7D,mBAAW,EAAE,wBAAgB,CAAiC;YACrE,OAAO,WAAW,GAAG,GAAG,GAAG,gBAAgB,GAAG,KAAK,CAAC;QACxD,CAAC;;;OAAA;IAOD,sBAAI,4CAAQ;QALZ;;;;WAIG;aACH;YACI,IAAI,CAAC,qCAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC;gBACrD,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;YAE1E,IAAA,iCAA0D,EAAzD,mBAAW,EAAE,oBAAY,CAAiC;YACjE,IAAM,sBAAsB,GAAG,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;YAC/E,IAAM,QAAQ,GAAG,sBAAsB,CAAC,QAAQ,CAAC,4BAA4B,CAAC,YAAY,CAAC,CAAC;YAC5F,IAAI,CAAC,QAAQ;gBACT,MAAM,IAAI,KAAK,CAAC,iCAA+B,YAAY,8BAA2B,CAAC,CAAC;YAC5F,OAAO,QAAQ,CAAC;QACpB,CAAC;;;OAAA;IAMD,sBAAI,4CAAQ;QAJZ;;;WAGG;aACH;YACI,IAAI,CAAC,qCAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC;gBACrD,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;YAEhF,IAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACpD,IAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;YAClE,OAAO,SAAS,CAAC,QAAQ,CAAC;QAC9B,CAAC;;;OAAA;IAED,sBAAI,6DAAyB;aAA7B;YACI,OAAO,IAAI,CAAC,aAAc,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7C,CAAC;;;OAAA;IAEL,6BAAC;AAAD,CAzGA,AAyGC,IAAA;AAzGY,wDAAsB","file":"RelationCountAttribute.js","sourcesContent":["import {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {QueryBuilderUtils} from \"../QueryBuilderUtils\";\r\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\r\nimport {QueryExpressionMap} from \"../QueryExpressionMap\";\r\nimport {SelectQueryBuilder} from \"../SelectQueryBuilder\";\r\n\r\nexport class RelationCountAttribute {\r\n\r\n    /**\r\n     * Alias of the joined (destination) table.\r\n     */\r\n    alias?: string;\r\n\r\n    /**\r\n     * Name of relation.\r\n     */\r\n    relationName: string;\r\n\r\n    /**\r\n     * Property + alias of the object where to joined data should be mapped.\r\n     */\r\n    mapToProperty: string;\r\n\r\n    /**\r\n     * Extra condition applied to \"ON\" section of join.\r\n     */\r\n    queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private expressionMap: QueryExpressionMap,\r\n                relationCountAttribute?: Partial<RelationCountAttribute>) {\r\n        Object.assign(this, relationCountAttribute || {});\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    get joinInverseSideMetadata(): EntityMetadata {\r\n        return this.relation.inverseEntityMetadata;\r\n    }\r\n\r\n    /**\r\n     * Alias of the parent of this join.\r\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\r\n     * This value is extracted from entityOrProperty value.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     */\r\n    get parentAlias(): string {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\r\n            throw new Error(`Given value must be a string representation of alias property`);\r\n\r\n        return this.relationName.split(\".\")[0];\r\n    }\r\n\r\n    /**\r\n     * Relation property name of the parent.\r\n     * This is used to understand what is joined.\r\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\r\n     * This value is extracted from entityOrProperty value.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     */\r\n    get relationProperty(): string|undefined {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\r\n            throw new Error(`Given value is a string representation of alias property`);\r\n\r\n        return this.relationName.split(\".\")[1];\r\n    }\r\n\r\n    get junctionAlias(): string {\r\n        const [parentAlias, relationProperty] = this.relationName.split(\".\");\r\n        return parentAlias + \"_\" + relationProperty + \"_rc\";\r\n    }\r\n\r\n    /**\r\n     * Relation of the parent.\r\n     * This is used to understand what is joined.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     */\r\n    get relation(): RelationMetadata {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\r\n            throw new Error(`Given value is a string representation of alias property`);\r\n\r\n        const [parentAlias, propertyPath] = this.relationName.split(\".\");\r\n        const relationOwnerSelection = this.expressionMap.findAliasByName(parentAlias);\r\n        const relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(propertyPath);\r\n        if (!relation)\r\n            throw new Error(`Relation with property path ${propertyPath} in entity was not found.`);\r\n        return relation;\r\n    }\r\n\r\n    /**\r\n     * Metadata of the joined entity.\r\n     * If table without entity was joined, then it will return undefined.\r\n     */\r\n    get metadata(): EntityMetadata {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\r\n            throw new Error(`Given value is a string representation of alias property`);\r\n\r\n        const parentAlias = this.relationName.split(\".\")[0];\r\n        const selection = this.expressionMap.findAliasByName(parentAlias);\r\n        return selection.metadata;\r\n    }\r\n\r\n    get mapToPropertyPropertyName(): string {\r\n        return this.mapToProperty!.split(\".\")[1];\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"../.."}