{"version":3,"sources":["../../src/query-builder/relation-id/RelationIdAttribute.ts"],"names":[],"mappings":";;AACA,0DAAuD;AAKvD;;GAEG;AACH;IA+BI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,6BAAoB,kBAAsC,EACtC,mBAAkD;QADlD,uBAAkB,GAAlB,kBAAkB,CAAoB;QAT1D;;WAEG;QACH,oBAAe,GAAG,KAAK,CAAC;QAQpB,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,mBAAmB,IAAI,EAAE,CAAC,CAAC;IACnD,CAAC;IAMD,sBAAI,wDAAuB;QAJ3B,4EAA4E;QAC5E,iBAAiB;QACjB,4EAA4E;aAE5E;YACI,OAAO,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC;QAC/C,CAAC;;;OAAA;IAQD,sBAAI,4CAAW;QANf;;;;;WAKG;aACH;YACI,IAAI,CAAC,qCAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC;gBACrD,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;YAErF,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;QACvE,CAAC;;;OAAA;IASD,sBAAI,qDAAoB;QAPxB;;;;;;WAMG;aACH;YACI,IAAI,CAAC,qCAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC;gBACrD,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;YAErF,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACxE,CAAC;;;OAAA;IAOD,sBAAI,yCAAQ;QALZ;;;;WAIG;aACH;YACI,IAAI,CAAC,qCAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC;gBACrD,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;YAErF,IAAM,sBAAsB,GAAG,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,IAAI,CAAC,WAAY,CAAC,CAAC;YAC1F,IAAM,QAAQ,GAAG,sBAAsB,CAAC,QAAQ,CAAC,4BAA4B,CAAC,IAAI,CAAC,oBAAqB,CAAC,CAAC;YAC1G,IAAI,CAAC,QAAQ;gBACT,MAAM,IAAI,KAAK,CAAC,iCAA+B,IAAI,CAAC,oBAAoB,8BAA2B,CAAC,CAAC;YACzG,OAAO,QAAQ,CAAC;QACpB,CAAC;;;OAAA;IAKD,sBAAI,8CAAa;QAHjB;;WAEG;aACH;YACU,IAAA,iCAA8D,EAA7D,mBAAW,EAAE,wBAAgB,CAAiC;YACrE,OAAO,WAAW,GAAG,GAAG,GAAG,gBAAgB,GAAG,MAAM,CAAC;QACzD,CAAC;;;OAAA;IAMD,sBAAI,iDAAgB;QAJpB;;;WAGG;aACH;YACI,OAAO,IAAI,CAAC,QAAQ,CAAC,sBAAuB,CAAC;QACjD,CAAC;;;OAAA;IAED,sBAAI,yDAAwB;aAA5B;YACI,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;QACzE,CAAC;;;OAAA;IAED,sBAAI,0DAAyB;aAA7B;YACI,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAC1E,CAAC;;;OAAA;IAEL,0BAAC;AAAD,CAnHA,AAmHC,IAAA;AAnHY,kDAAmB","file":"RelationIdAttribute.js","sourcesContent":["import {RelationMetadata} from \"../../metadata/RelationMetadata\";\r\nimport {QueryBuilderUtils} from \"../QueryBuilderUtils\";\r\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {QueryExpressionMap} from \"../QueryExpressionMap\";\r\nimport {SelectQueryBuilder} from \"../SelectQueryBuilder\";\r\n\r\n/**\r\n * Stores all join relation id attributes which will be used to build a JOIN query.\r\n */\r\nexport class RelationIdAttribute {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Alias of the joined (destination) table.\r\n     */\r\n    alias?: string;\r\n\r\n    /**\r\n     * Name of relation.\r\n     */\r\n    relationName: string;\r\n\r\n    /**\r\n     * Property + alias of the object where to joined data should be mapped.\r\n     */\r\n    mapToProperty: string;\r\n\r\n    /**\r\n     * Extra condition applied to \"ON\" section of join.\r\n     */\r\n    queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>;\r\n\r\n    /**\r\n     * Indicates if relation id should NOT be loaded as id map.\r\n     */\r\n    disableMixedMap = false;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private queryExpressionMap: QueryExpressionMap,\r\n                        relationIdAttribute?: Partial<RelationIdAttribute>) {\r\n        Object.assign(this, relationIdAttribute || {});\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    get joinInverseSideMetadata(): EntityMetadata {\r\n        return this.relation.inverseEntityMetadata;\r\n    }\r\n\r\n    /**\r\n     * Alias of the parent of this join.\r\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\r\n     * This value is extracted from entityOrProperty value.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     */\r\n    get parentAlias(): string {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\r\n            throw new Error(`Given value must be a string representation of alias property`);\r\n\r\n        return this.relationName.substr(0, this.relationName.indexOf(\".\"));\r\n    }\r\n\r\n    /**\r\n     * Relation property name of the parent.\r\n     * This is used to understand what is joined.\r\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\r\n     * This value is extracted from entityOrProperty value.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     */\r\n    get relationPropertyPath(): string {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\r\n            throw new Error(`Given value must be a string representation of alias property`);\r\n\r\n        return this.relationName.substr(this.relationName.indexOf(\".\") + 1);\r\n    }\r\n\r\n    /**\r\n     * Relation of the parent.\r\n     * This is used to understand what is joined.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     */\r\n    get relation(): RelationMetadata {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\r\n            throw new Error(`Given value must be a string representation of alias property`);\r\n\r\n        const relationOwnerSelection = this.queryExpressionMap.findAliasByName(this.parentAlias!);\r\n        const relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(this.relationPropertyPath!);\r\n        if (!relation)\r\n            throw new Error(`Relation with property path ${this.relationPropertyPath} in entity was not found.`);\r\n        return relation;\r\n    }\r\n\r\n    /**\r\n     * Generates alias of junction table, whose ids we get.\r\n     */\r\n    get junctionAlias(): string {\r\n        const [parentAlias, relationProperty] = this.relationName.split(\".\");\r\n        return parentAlias + \"_\" + relationProperty + \"_rid\";\r\n    }\r\n\r\n    /**\r\n     * Metadata of the joined entity.\r\n     * If extra condition without entity was joined, then it will return undefined.\r\n     */\r\n    get junctionMetadata(): EntityMetadata {\r\n        return this.relation.junctionEntityMetadata!;\r\n    }\r\n\r\n    get mapToPropertyParentAlias(): string {\r\n        return this.mapToProperty.substr(0, this.mapToProperty.indexOf(\".\"));\r\n    }\r\n\r\n    get mapToPropertyPropertyPath(): string {\r\n        return this.mapToProperty.substr(this.mapToProperty.indexOf(\".\") + 1);\r\n    }\r\n\r\n}"],"sourceRoot":"../.."}