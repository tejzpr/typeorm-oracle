{"version":3,"sources":["../../src/query-builder/transformer/PlainObjectToNewEntityTransformer.ts"],"names":[],"mappings":"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","file":"PlainObjectToNewEntityTransformer.js","sourcesContent":["import {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\n\r\n/**\r\n * Transforms plain old javascript object\r\n * Entity is constructed based on its entity metadata.\r\n */\r\nexport class PlainObjectToNewEntityTransformer {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    transform<T>(newEntity: T, object: ObjectLiteral, metadata: EntityMetadata, getLazyRelationsPromiseValue: boolean = false): T {\r\n        // console.log(\"groupAndTransform entity:\", newEntity);\r\n        // console.log(\"groupAndTransform object:\", object);\r\n        this.groupAndTransform(newEntity, object, metadata, getLazyRelationsPromiseValue);\r\n        // console.log(\"result:\", newEntity);\r\n        return newEntity;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Since db returns a duplicated rows of the data where accuracies of the same object can be duplicated\r\n     * we need to group our result and we must have some unique id (primary key in our case)\r\n     */\r\n    private groupAndTransform(entity: ObjectLiteral, object: ObjectLiteral, metadata: EntityMetadata, getLazyRelationsPromiseValue: boolean = false): void {\r\n\r\n        // console.log(\"groupAndTransform entity:\", entity);\r\n        // console.log(\"groupAndTransform object:\", object);\r\n\r\n        // copy regular column properties from the given object\r\n        metadata.nonVirtualColumns.forEach(column => {\r\n            const objectColumnValue = column.getEntityValue(object);\r\n            if (objectColumnValue !== undefined)\r\n                column.setEntityValue(entity, objectColumnValue);\r\n        });\r\n\r\n        // // copy relation properties from the given object\r\n        if (metadata.relations.length) {\r\n            metadata.relations.forEach(relation => {\r\n\r\n                let entityRelatedValue = relation.getEntityValue(entity);\r\n                const objectRelatedValue = relation.getEntityValue(object, getLazyRelationsPromiseValue);\r\n                if (objectRelatedValue === undefined)\r\n                    return;\r\n\r\n                if (relation.isOneToMany || relation.isManyToMany) {\r\n                    if (!(objectRelatedValue instanceof Array))\r\n                        return;\r\n\r\n                    if (!entityRelatedValue) {\r\n                        entityRelatedValue = [];\r\n                        relation.setEntityValue(entity, entityRelatedValue);\r\n                    }\r\n\r\n                    objectRelatedValue.forEach(objectRelatedValueItem => {\r\n\r\n                        // check if we have this item from the merging object in the original entity we merge into\r\n                        let objectRelatedValueEntity = (entityRelatedValue as any[]).find(entityRelatedValueItem => {\r\n                            return relation.inverseEntityMetadata.compareEntities(objectRelatedValueItem, entityRelatedValueItem);\r\n                        });\r\n\r\n                        // if such item already exist then merge new data into it, if its not we create a new entity and merge it into the array\r\n                        if (!objectRelatedValueEntity) {\r\n                            objectRelatedValueEntity = relation.inverseEntityMetadata.create();\r\n                            entityRelatedValue.push(objectRelatedValueEntity);\r\n                        }\r\n\r\n                        this.groupAndTransform(objectRelatedValueEntity, objectRelatedValueItem, relation.inverseEntityMetadata, getLazyRelationsPromiseValue);\r\n                    });\r\n\r\n                } else {\r\n\r\n                    // if related object isn't an object (direct relation id for example)\r\n                    // we just set it to the entity relation, we don't need anything more from it\r\n                    // however we do it only if original entity does not have this relation set to object\r\n                    // to prevent full overriding of objects\r\n                    if (!(objectRelatedValue instanceof Object)) {\r\n                        if (!(entityRelatedValue instanceof Object))\r\n                            relation.setEntityValue(entity, objectRelatedValue);\r\n                        return;\r\n                    }\r\n\r\n                    if (!entityRelatedValue) {\r\n                        entityRelatedValue = relation.inverseEntityMetadata.create();\r\n                        relation.setEntityValue(entity, entityRelatedValue);\r\n                    }\r\n\r\n                    this.groupAndTransform(entityRelatedValue, objectRelatedValue, relation.inverseEntityMetadata, getLazyRelationsPromiseValue);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n}"],"sourceRoot":"../.."}