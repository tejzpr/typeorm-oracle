{"version":3,"sources":["../../src/query-builder/transformer/RawSqlResultsToEntityTransformer.ts"],"names":[],"mappings":"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","file":"RawSqlResultsToEntityTransformer.js","sourcesContent":["import {Driver} from \"../../driver/Driver\";\r\nimport {RelationIdLoadResult} from \"../relation-id/RelationIdLoadResult\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {Alias} from \"../Alias\";\r\nimport {RelationCountLoadResult} from \"../relation-count/RelationCountLoadResult\";\r\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\r\nimport {OrmUtils} from \"../../util/OrmUtils\";\r\nimport {QueryExpressionMap} from \"../QueryExpressionMap\";\r\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {abbreviate} from \"../../util/StringUtils\";\r\nimport {OracleDriver} from \"../../driver/oracle/OracleDriver\";\r\nimport {QueryRunner} from \"../..\";\r\n\r\n/**\r\n * Transforms raw sql results returned from the database into entity object.\r\n * Entity is constructed based on its entity metadata.\r\n */\r\nexport class RawSqlResultsToEntityTransformer {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected expressionMap: QueryExpressionMap,\r\n                protected driver: Driver,\r\n                protected rawRelationIdResults: RelationIdLoadResult[],\r\n                protected rawRelationCountResults: RelationCountLoadResult[],\r\n                protected queryRunner?: QueryRunner) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Since db returns a duplicated rows of the data where accuracies of the same object can be duplicated\r\n     * we need to group our result and we must have some unique id (primary key in our case)\r\n     */\r\n    transform(rawResults: any[], alias: Alias): any[] {\r\n        const group = this.group(rawResults, alias);\r\n        const entities: any[] = [];\r\n        group.forEach(results => {\r\n            const entity = this.transformRawResultsGroup(results, alias);\r\n            if (entity !== undefined)\r\n                entities.push(entity);\r\n        });\r\n        return entities;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Groups given raw results by ids of given alias.\r\n     */\r\n    protected group(rawResults: any[], alias: Alias): Map<string, any[]> {\r\n        const map = new Map();\r\n        const keys = alias.metadata.primaryColumns.map(column => this.buildColumnAlias(alias.name, column.databaseName));\r\n        rawResults.forEach(rawResult => {\r\n            const id = keys.map(key => rawResult[key]).join(\"_\"); // todo: check partial\r\n            if (!id) return;\r\n\r\n            const items = map.get(id);\r\n            if (!items) {\r\n                map.set(id, [rawResult]);\r\n            } else {\r\n                items.push(rawResult);\r\n            }\r\n        });\r\n        return map;\r\n    }\r\n\r\n    /**\r\n     * Transforms set of data results into single entity.\r\n     */\r\n    protected transformRawResultsGroup(rawResults: any[], alias: Alias): ObjectLiteral|undefined {\r\n        // let hasColumns = false; // , hasEmbeddedColumns = false, hasParentColumns = false, hasParentEmbeddedColumns = false;\r\n        let metadata = alias.metadata;\r\n\r\n        if (metadata.discriminatorColumn) {\r\n            const discriminatorValues = rawResults.map(result => result[this.buildColumnAlias(alias.name, alias.metadata.discriminatorColumn!.databaseName)]);\r\n            const discriminatorMetadata = metadata.childEntityMetadatas.find(childEntityMetadata => {\r\n                return !!discriminatorValues.find(value => value === childEntityMetadata.discriminatorValue);\r\n            });\r\n            if (discriminatorMetadata)\r\n                metadata = discriminatorMetadata;\r\n        }\r\n        let entity: any = this.expressionMap.options.indexOf(\"create-pojo\") !== -1 ? {} : metadata.create(this.queryRunner);\r\n\r\n        // get value from columns selections and put them into newly created entity\r\n        const hasColumns = this.transformColumns(rawResults, alias, entity, metadata);\r\n        const hasRelations = this.transformJoins(rawResults, entity, alias, metadata);\r\n        const hasRelationIds = this.transformRelationIds(rawResults, alias, entity, metadata);\r\n        const hasRelationCounts = this.transformRelationCounts(rawResults, alias, entity);\r\n\r\n        // if we have at least one selected column then return this entity\r\n        // since entity must have at least primary columns to be really selected and transformed into entity\r\n        if (hasColumns)\r\n            return entity;\r\n\r\n        // if we don't have any selected column we should not return entity,\r\n        // except for the case when entity only contain a primary column as a relation to another entity\r\n        // in this case its absolutely possible our entity to not have any columns except a single relation\r\n        const hasOnlyVirtualPrimaryColumns = metadata.primaryColumns.filter(column => column.isVirtual === false).length === 0; // todo: create metadata.hasOnlyVirtualPrimaryColumns\r\n        if (hasOnlyVirtualPrimaryColumns && (hasRelations || hasRelationIds || hasRelationCounts))\r\n            return entity;\r\n\r\n        return undefined;\r\n    }\r\n\r\n    // get value from columns selections and put them into object\r\n    protected transformColumns(rawResults: any[], alias: Alias, entity: ObjectLiteral, metadata: EntityMetadata): boolean {\r\n        let hasData = false;\r\n        metadata.columns.forEach(column => {\r\n\r\n            // if table inheritance is used make sure this column is not child's column\r\n            if (metadata.childEntityMetadatas.length > 0 && metadata.childEntityMetadatas.map(metadata => metadata.target).indexOf(column.target) !== -1)\r\n                return;\r\n\r\n            const value = rawResults[0][this.buildColumnAlias(alias.name, column.databaseName)];\r\n            if (value === undefined || column.isVirtual)\r\n                return;\r\n\r\n            // if user does not selected the whole entity or he used partial selection and does not select this particular column\r\n            // then we don't add this column and its value into the entity\r\n            if (!this.expressionMap.selects.find(select => select.selection === alias.name || select.selection === alias.name + \".\" + column.propertyPath))\r\n                return;\r\n\r\n            column.setEntityValue(entity, this.driver.prepareHydratedValue(value, column));\r\n            if (value !== null) // we don't mark it as has data because if we will have all nulls in our object - we don't need such object\r\n                hasData = true;\r\n        });\r\n        return hasData;\r\n    }\r\n\r\n    /**\r\n     * Transforms joined entities in the given raw results by a given alias and stores to the given (parent) entity\r\n     */\r\n    protected transformJoins(rawResults: any[], entity: ObjectLiteral, alias: Alias, metadata: EntityMetadata) {\r\n        let hasData = false;\r\n\r\n        // let discriminatorValue: string = \"\";\r\n        // if (metadata.discriminatorColumn)\r\n        //     discriminatorValue = rawResults[0][this.buildColumnAlias(alias.name, alias.metadata.discriminatorColumn!.databaseName)];\r\n\r\n        this.expressionMap.joinAttributes.forEach(join => { // todo: we have problem here - when inner joins are used without selects it still create empty array\r\n\r\n            // skip joins without metadata\r\n            if (!join.metadata)\r\n                return;\r\n\r\n            // if simple left or inner join was performed without selection then we don't need to do anything\r\n            if (!join.isSelected)\r\n                return;\r\n\r\n            // this check need to avoid setting properties than not belong to entity when single table inheritance used. (todo: check if we still need it)\r\n            // const metadata = metadata.childEntityMetadatas.find(childEntityMetadata => discriminatorValue === childEntityMetadata.discriminatorValue);\r\n            if (join.relation && !metadata.relations.find(relation => relation === join.relation))\r\n                return;\r\n\r\n            // some checks to make sure this join is for current alias\r\n            if (join.mapToProperty) {\r\n                if (join.mapToPropertyParentAlias !== alias.name)\r\n                    return;\r\n            } else {\r\n                if (!join.relation || join.parentAlias !== alias.name || join.relationPropertyPath !== join.relation!.propertyPath)\r\n                    return;\r\n            }\r\n\r\n            // transform joined data into entities\r\n            let result: any = this.transform(rawResults, join.alias);\r\n            result = !join.isMany ? result[0] : result;\r\n            result = !join.isMany && result === undefined ? null : result; // this is needed to make relations to return null when its joined but nothing was found in the database\r\n            if (result === undefined) // if nothing was joined then simply return\r\n                return;\r\n\r\n            // if join was mapped to some property then save result to that property\r\n            if (join.mapToPropertyPropertyName) {\r\n                entity[join.mapToPropertyPropertyName] = result; // todo: fix embeds\r\n\r\n            } else { // otherwise set to relation\r\n                join.relation!.setEntityValue(entity, result);\r\n            }\r\n\r\n            hasData = true;\r\n        });\r\n        return hasData;\r\n    }\r\n\r\n    protected transformRelationIds(rawSqlResults: any[], alias: Alias, entity: ObjectLiteral, metadata: EntityMetadata): boolean {\r\n        let hasData = false;\r\n        this.rawRelationIdResults.forEach(rawRelationIdResult => {\r\n            if (rawRelationIdResult.relationIdAttribute.parentAlias !== alias.name)\r\n                return;\r\n\r\n            const relation = rawRelationIdResult.relationIdAttribute.relation;\r\n            const valueMap = this.createValueMapFromJoinColumns(relation, rawRelationIdResult.relationIdAttribute.parentAlias, rawSqlResults);\r\n            if (valueMap === undefined || valueMap === null)\r\n                return;\r\n\r\n            const idMaps = rawRelationIdResult.results.map(result => {\r\n                const entityPrimaryIds = this.extractEntityPrimaryIds(relation, result);\r\n                if (EntityMetadata.compareIds(entityPrimaryIds, valueMap) === false)\r\n                    return;\r\n\r\n                let columns: ColumnMetadata[];\r\n                if (relation.isManyToOne || relation.isOneToOneOwner) {\r\n                    columns = relation.joinColumns.map(joinColumn => joinColumn);\r\n                } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\r\n                    columns = relation.inverseEntityMetadata.primaryColumns.map(joinColumn => joinColumn);\r\n                    // columns = relation.inverseRelation!.joinColumns.map(joinColumn => joinColumn.referencedColumn!); //.inverseEntityMetadata.primaryColumns.map(joinColumn => joinColumn);\r\n                } else { // ManyToMany\r\n                    if (relation.isOwning) {\r\n                        columns = relation.inverseJoinColumns.map(joinColumn => joinColumn);\r\n                    } else {\r\n                        columns = relation.inverseRelation!.joinColumns.map(joinColumn => joinColumn);\r\n                    }\r\n                }\r\n\r\n                const idMap = columns.reduce((idMap, column) => {\r\n                    let value = result[column.databaseName];\r\n                    if (relation.isOneToMany || relation.isOneToOneNotOwner) {\r\n                        if (column.referencedColumn) // if column is a relation\r\n                            value = column.referencedColumn.createValueMap(value);\r\n\r\n                        return OrmUtils.mergeDeep(idMap, column.createValueMap(value));\r\n                    } else {\r\n                        if (column.referencedColumn!.referencedColumn) // if column is a relation\r\n                            value = column.referencedColumn!.referencedColumn!.createValueMap(value);\r\n\r\n                        return OrmUtils.mergeDeep(idMap, column.referencedColumn!.createValueMap(value));\r\n                    }\r\n                }, {} as ObjectLiteral);\r\n\r\n                if (columns.length === 1 && rawRelationIdResult.relationIdAttribute.disableMixedMap === false) {\r\n                    if (relation.isOneToMany || relation.isOneToOneNotOwner) {\r\n                        return columns[0].getEntityValue(idMap);\r\n                    } else {\r\n                        return columns[0].referencedColumn!.getEntityValue(idMap);\r\n                    }\r\n                }\r\n                return idMap;\r\n            }).filter(result => result);\r\n\r\n\r\n            const properties = rawRelationIdResult.relationIdAttribute.mapToPropertyPropertyPath.split(\".\");\r\n            const mapToProperty = (properties: string[], map: ObjectLiteral, value: any): any => {\r\n\r\n                const property = properties.shift();\r\n                if (property && properties.length === 0) {\r\n                    map[property] = value;\r\n                    return map;\r\n                } else if (property && properties.length > 0) {\r\n                    mapToProperty(properties, map[property], value);\r\n                } else {\r\n                    return map;\r\n                }\r\n            };\r\n            if (relation.isOneToOne || relation.isManyToOne) {\r\n                if (idMaps[0] !== undefined) {\r\n                    mapToProperty(properties, entity, idMaps[0]);\r\n                    hasData = true;\r\n                }\r\n            } else {\r\n                mapToProperty(properties, entity, idMaps);\r\n                if (idMaps.length > 0) {\r\n                    hasData = true;\r\n                }\r\n            }\r\n        });\r\n\r\n        return hasData;\r\n    }\r\n\r\n    protected transformRelationCounts(rawSqlResults: any[], alias: Alias, entity: ObjectLiteral): boolean {\r\n        let hasData = false;\r\n        this.rawRelationCountResults\r\n            .filter(rawRelationCountResult => rawRelationCountResult.relationCountAttribute.parentAlias === alias.name)\r\n            .forEach(rawRelationCountResult => {\r\n                const relation = rawRelationCountResult.relationCountAttribute.relation;\r\n                let referenceColumnName: string;\r\n\r\n                if (relation.isOneToMany) {\r\n                    referenceColumnName = relation.inverseRelation!.joinColumns[0].referencedColumn!.databaseName;  // todo: fix joinColumns[0]\r\n\r\n                } else {\r\n                    referenceColumnName = relation.isOwning ? relation.joinColumns[0].referencedColumn!.databaseName : relation.inverseRelation!.joinColumns[0].referencedColumn!.databaseName;\r\n                }\r\n\r\n                const referenceColumnValue = rawSqlResults[0][this.buildColumnAlias(alias.name, referenceColumnName)]; // we use zero index since its grouped data // todo: selection with alias for entity columns wont work\r\n                if (referenceColumnValue !== undefined && referenceColumnValue !== null) {\r\n                    entity[rawRelationCountResult.relationCountAttribute.mapToPropertyPropertyName] = 0;\r\n                    rawRelationCountResult.results\r\n                        .filter(result => result[\"parentId\"] === referenceColumnValue)\r\n                        .forEach(result => {\r\n                            entity[rawRelationCountResult.relationCountAttribute.mapToPropertyPropertyName] = parseInt(result[\"cnt\"]);\r\n                            hasData = true;\r\n                        });\r\n                }\r\n            });\r\n\r\n        return hasData;\r\n    }\r\n\r\n    /**\r\n     * Builds column alias from given alias name and column name,\r\n     * If alias length is more than 29, abbreviates column name.\r\n     */\r\n    protected buildColumnAlias(aliasName: string, columnName: string): string {\r\n        const columnAliasName = aliasName + \"_\" + columnName;\r\n        if (columnAliasName.length > 29 && this.driver instanceof OracleDriver)\r\n            return aliasName  + \"_\" + abbreviate(columnName, 2);\r\n\r\n        return columnAliasName;\r\n    }\r\n\r\n    private createValueMapFromJoinColumns(relation: RelationMetadata, parentAlias: string, rawSqlResults: any[]): ObjectLiteral {\r\n        let columns: ColumnMetadata[];\r\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\r\n            columns = relation.entityMetadata.primaryColumns.map(joinColumn => joinColumn);\r\n        } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\r\n            columns = relation.inverseRelation!.joinColumns.map(joinColumn => joinColumn);\r\n        } else {\r\n            if (relation.isOwning) {\r\n                columns = relation.joinColumns.map(joinColumn => joinColumn);\r\n            } else {\r\n                columns = relation.inverseRelation!.inverseJoinColumns.map(joinColumn => joinColumn);\r\n            }\r\n        }\r\n        return columns.reduce((valueMap, column) => {\r\n            rawSqlResults.forEach(rawSqlResult => {\r\n                if (relation.isManyToOne || relation.isOneToOneOwner) {\r\n                    valueMap[column.databaseName] = rawSqlResult[this.buildColumnAlias(parentAlias, column.databaseName)];\r\n                } else {\r\n                    valueMap[column.databaseName] =  rawSqlResult[this.buildColumnAlias(parentAlias, column.referencedColumn!.databaseName)];\r\n                }\r\n            });\r\n            return valueMap;\r\n        }, {} as ObjectLiteral);\r\n\r\n    }\r\n\r\n    private extractEntityPrimaryIds(relation: RelationMetadata, relationIdRawResult: any) {\r\n        let columns: ColumnMetadata[];\r\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\r\n            columns = relation.entityMetadata.primaryColumns.map(joinColumn => joinColumn);\r\n        } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\r\n            columns = relation.inverseRelation!.joinColumns.map(joinColumn => joinColumn);\r\n        } else {\r\n            if (relation.isOwning) {\r\n                columns = relation.joinColumns.map(joinColumn => joinColumn);\r\n            } else {\r\n                columns = relation.inverseRelation!.inverseJoinColumns.map(joinColumn => joinColumn);\r\n            }\r\n        }\r\n        return columns.reduce((data, column) => {\r\n            data[column.databaseName] = relationIdRawResult[column.databaseName];\r\n            return data;\r\n        }, {} as ObjectLiteral);\r\n    }\r\n\r\n    /*private removeVirtualColumns(entity: ObjectLiteral, alias: Alias) {\r\n        const virtualColumns = this.expressionMap.selects\r\n            .filter(select => select.virtual)\r\n            .map(select => select.selection.replace(alias.name + \".\", \"\"));\r\n\r\n        virtualColumns.forEach(virtualColumn => delete entity[virtualColumn]);\r\n    }*/\r\n\r\n}"],"sourceRoot":"../.."}