{"version":3,"sources":["../../src/query-builder/RelationRemover.ts"],"names":[],"mappings":"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","file":"RelationRemover.js","sourcesContent":["import {QueryBuilder} from \"./QueryBuilder\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {QueryExpressionMap} from \"./QueryExpressionMap\";\r\n\r\n/**\r\n * Allows to work with entity relations and perform specific operations with those relations.\r\n *\r\n * todo: add transactions everywhere\r\n */\r\nexport class RelationRemover {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected queryBuilder: QueryBuilder<any>,\r\n                protected expressionMap: QueryExpressionMap) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs remove operation on a relation.\r\n     */\r\n    async remove(value: any|any[]): Promise<void> {\r\n        const relation = this.expressionMap.relationMetadata;\r\n\r\n        if (relation.isOneToMany) {\r\n\r\n            // if (this.expressionMap.of instanceof Array)\r\n            //     throw new Error(`You cannot update relations of multiple entities with the same related object. Provide a single entity into .of method.`);\r\n\r\n            // DELETE FROM post WHERE post.categoryId = of AND post.id = id\r\n            const ofs = this.expressionMap.of instanceof Array ? this.expressionMap.of : [this.expressionMap.of];\r\n            const values = value instanceof Array ? value : [value];\r\n\r\n            const updateSet: ObjectLiteral = {};\r\n            relation.inverseRelation!.joinColumns.forEach(column => {\r\n                updateSet[column.propertyName] = null;\r\n            });\r\n\r\n            const parameters: ObjectLiteral = {};\r\n            const conditions: string[] = [];\r\n            ofs.forEach((of, ofIndex) => {\r\n                conditions.push(...values.map((value, valueIndex) => {\r\n                    return [\r\n                        ...relation.inverseRelation!.joinColumns.map((column, columnIndex) => {\r\n                            const parameterName = \"joinColumn_\" + ofIndex + \"_\" + valueIndex + \"_\" + columnIndex;\r\n                            parameters[parameterName] = of instanceof Object ? column.referencedColumn!.getEntityValue(of) : of;\r\n                            return `${column.propertyPath} = :${parameterName}`;\r\n                        }),\r\n                        ...relation.inverseRelation!.entityMetadata.primaryColumns.map((column, columnIndex) => {\r\n                            const parameterName = \"primaryColumn_\" + valueIndex + \"_\" + valueIndex + \"_\" + columnIndex;\r\n                            parameters[parameterName] = value instanceof Object ? column.getEntityValue(value) : value;\r\n                            return `${column.propertyPath} = :${parameterName}`;\r\n                        })\r\n                    ].join(\" AND \");\r\n                }));\r\n            });\r\n            const condition = conditions.map(str => \"(\" + str + \")\").join(\" OR \");\r\n            if (!condition) return;\r\n\r\n            await this.queryBuilder\r\n                .createQueryBuilder()\r\n                .update(relation.inverseEntityMetadata.target)\r\n                .set(updateSet)\r\n                .where(condition)\r\n                .setParameters(parameters)\r\n                .execute();\r\n\r\n        } else { // many to many\r\n\r\n            const junctionMetadata = relation.junctionEntityMetadata!;\r\n            const ofs = this.expressionMap.of instanceof Array ? this.expressionMap.of : [this.expressionMap.of];\r\n            const values = value instanceof Array ? value : [value];\r\n            const firstColumnValues = relation.isManyToManyOwner ? ofs : values;\r\n            const secondColumnValues = relation.isManyToManyOwner ? values : ofs;\r\n\r\n            const parameters: ObjectLiteral = {};\r\n            const conditions: string[] = [];\r\n            firstColumnValues.forEach((firstColumnVal, firstColumnValIndex) => {\r\n                conditions.push(...secondColumnValues.map((secondColumnVal, secondColumnValIndex) => {\r\n                    return [\r\n                        ...junctionMetadata.ownerColumns.map((column, columnIndex) => {\r\n                            const parameterName = \"firstValue_\" + firstColumnValIndex + \"_\" + secondColumnValIndex + \"_\" + columnIndex;\r\n                            parameters[parameterName] = firstColumnVal instanceof Object ? column.referencedColumn!.getEntityValue(firstColumnVal) : firstColumnVal;\r\n                            return `${column.databaseName} = :${parameterName}`;\r\n                        }),\r\n                        ...junctionMetadata.inverseColumns.map((column, columnIndex) => {\r\n                            const parameterName = \"secondValue_\" + firstColumnValIndex + \"_\" + secondColumnValIndex + \"_\" + columnIndex;\r\n                            parameters[parameterName] = firstColumnVal instanceof Object ? column.referencedColumn!.getEntityValue(secondColumnVal) : secondColumnVal;\r\n                            return `${column.databaseName} = :${parameterName}`;\r\n                        })\r\n                    ].join(\" AND \");\r\n                }));\r\n            });\r\n            const condition = conditions.map(str => \"(\" + str + \")\").join(\" OR \");\r\n\r\n            await this.queryBuilder\r\n                .createQueryBuilder()\r\n                .delete()\r\n                .from(junctionMetadata.tableName)\r\n                .where(condition)\r\n                .setParameters(parameters)\r\n                .execute();\r\n        }\r\n    }\r\n\r\n}"],"sourceRoot":".."}