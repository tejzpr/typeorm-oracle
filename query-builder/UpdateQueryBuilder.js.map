{"version":3,"sources":["../../src/query-builder/UpdateQueryBuilder.ts"],"names":[],"mappings":"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","file":"UpdateQueryBuilder.js","sourcesContent":["import {QueryBuilder} from \"./QueryBuilder\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\r\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\r\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\r\nimport {WhereExpression} from \"./WhereExpression\";\r\nimport {Brackets} from \"./Brackets\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {UpdateResult} from \"./result/UpdateResult\";\r\nimport {ReturningStatementNotSupportedError} from \"../error/ReturningStatementNotSupportedError\";\r\nimport {ReturningResultsEntityUpdator} from \"./ReturningResultsEntityUpdator\";\r\nimport {SqljsDriver} from \"../driver/sqljs/SqljsDriver\";\r\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\r\nimport {BroadcasterResult} from \"../subscriber/BroadcasterResult\";\r\nimport {AbstractSqliteDriver} from \"../driver/sqlite-abstract/AbstractSqliteDriver\";\r\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\r\nimport {LimitOnUpdateNotSupportedError} from \"../error/LimitOnUpdateNotSupportedError\";\r\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\r\n\r\n/**\r\n * Allows to build complex sql queries in a fashion way and execute those queries.\r\n */\r\nexport class UpdateQueryBuilder<Entity> extends QueryBuilder<Entity> implements WhereExpression {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connectionOrQueryBuilder: Connection|QueryBuilder<any>, queryRunner?: QueryRunner) {\r\n        super(connectionOrQueryBuilder as any, queryRunner);\r\n        this.expressionMap.aliasNamePrefixingEnabled = false;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets generated sql query without parameters being replaced.\r\n     */\r\n    getQuery(): string {\r\n        let sql = this.createUpdateExpression();\r\n        sql += this.createOrderByExpression();\r\n        sql += this.createLimitExpression();\r\n        return sql.trim();\r\n    }\r\n\r\n    /**\r\n     * Executes sql generated by query builder and returns raw database results.\r\n     */\r\n    async execute(): Promise<UpdateResult> {\r\n        const queryRunner = this.obtainQueryRunner();\r\n        let transactionStartedByUs: boolean = false;\r\n\r\n        try {\r\n\r\n            // start transaction if it was enabled\r\n            if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {\r\n                await queryRunner.startTransaction();\r\n                transactionStartedByUs = true;\r\n            }\r\n\r\n            // call before updation methods in listeners and subscribers\r\n            if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias!.hasMetadata) {\r\n                const broadcastResult = new BroadcasterResult();\r\n                queryRunner.broadcaster.broadcastBeforeUpdateEvent(broadcastResult, this.expressionMap.mainAlias!.metadata);\r\n                if (broadcastResult.promises.length > 0) await Promise.all(broadcastResult.promises);\r\n            }\r\n\r\n            // if update entity mode is enabled we may need extra columns for the returning statement\r\n            const returningResultsEntityUpdator = new ReturningResultsEntityUpdator(queryRunner, this.expressionMap);\r\n            if (this.expressionMap.updateEntity === true &&\r\n                this.expressionMap.mainAlias!.hasMetadata &&\r\n                this.expressionMap.whereEntities.length > 0) {\r\n                this.expressionMap.extraReturningColumns = returningResultsEntityUpdator.getUpdationReturningColumns();\r\n            }\r\n\r\n            // execute update query\r\n            const [sql, parameters] = this.getQueryAndParameters();\r\n            const updateResult = new UpdateResult();\r\n            updateResult.raw = await queryRunner.query(sql, parameters);\r\n\r\n            // if we are updating entities and entity updation is enabled we must update some of entity columns (like version, update date, etc.)\r\n            if (this.expressionMap.updateEntity === true &&\r\n                this.expressionMap.mainAlias!.hasMetadata &&\r\n                this.expressionMap.whereEntities.length > 0) {\r\n                await returningResultsEntityUpdator.update(updateResult, this.expressionMap.whereEntities);\r\n            }\r\n\r\n            // call after updation methods in listeners and subscribers\r\n            if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias!.hasMetadata) {\r\n                const broadcastResult = new BroadcasterResult();\r\n                queryRunner.broadcaster.broadcastAfterUpdateEvent(broadcastResult, this.expressionMap.mainAlias!.metadata);\r\n                if (broadcastResult.promises.length > 0) await Promise.all(broadcastResult.promises);\r\n            }\r\n\r\n            // close transaction if we started it\r\n            if (transactionStartedByUs)\r\n                await queryRunner.commitTransaction();\r\n\r\n            return updateResult;\r\n\r\n        } catch (error) {\r\n\r\n            // rollback transaction if we started it\r\n            if (transactionStartedByUs) {\r\n                try {\r\n                    await queryRunner.rollbackTransaction();\r\n                } catch (rollbackError) { }\r\n            }\r\n            throw error;\r\n\r\n        } finally {\r\n            if (queryRunner !== this.queryRunner) { // means we created our own query runner\r\n                await queryRunner.release();\r\n            }\r\n            if (this.connection.driver instanceof SqljsDriver && !queryRunner.isTransactionActive) {\r\n                await this.connection.driver.autoSave();\r\n            }\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Values needs to be updated.\r\n     */\r\n    set(values: ObjectLiteral): this {\r\n        this.expressionMap.valuesSet = values;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets WHERE condition in the query builder.\r\n     * If you had previously WHERE expression defined,\r\n     * calling this function will override previously set WHERE conditions.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    where(where: string|((qb: this) => string)|Brackets|ObjectLiteral|ObjectLiteral[], parameters?: ObjectLiteral): this {\r\n        this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\r\n        const condition = this.computeWhereParameter(where);\r\n        if (condition)\r\n            this.expressionMap.wheres = [{ type: \"simple\", condition: condition }];\r\n        if (parameters)\r\n            this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new AND WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    andWhere(where: string|((qb: this) => string)|Brackets, parameters?: ObjectLiteral): this {\r\n        this.expressionMap.wheres.push({ type: \"and\", condition: this.computeWhereParameter(where) });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new OR WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    orWhere(where: string|((qb: this) => string)|Brackets, parameters?: ObjectLiteral): this {\r\n        this.expressionMap.wheres.push({ type: \"or\", condition: this.computeWhereParameter(where) });\r\n        if (parameters) this.setParameters(parameters);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new AND WHERE with conditions for the given ids.\r\n     */\r\n    whereInIds(ids: any|any[]): this {\r\n        return this.where(this.createWhereIdsExpression(ids));\r\n    }\r\n\r\n    /**\r\n     * Adds new AND WHERE with conditions for the given ids.\r\n     */\r\n    andWhereInIds(ids: any|any[]): this {\r\n        return this.andWhere(this.createWhereIdsExpression(ids));\r\n    }\r\n\r\n    /**\r\n     * Adds new OR WHERE with conditions for the given ids.\r\n     */\r\n    orWhereInIds(ids: any|any[]): this {\r\n        return this.orWhere(this.createWhereIdsExpression(ids));\r\n    }\r\n    /**\r\n     * Optional returning/output clause.\r\n     * This will return given column values.\r\n     */\r\n    output(columns: string[]): this;\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     * Returning is a SQL string containing returning statement.\r\n     */\r\n    output(output: string): this;\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    output(output: string|string[]): this;\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    output(output: string|string[]): this {\r\n        return this.returning(output);\r\n    }\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     * This will return given column values.\r\n     */\r\n    returning(columns: string[]): this;\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     * Returning is a SQL string containing returning statement.\r\n     */\r\n    returning(returning: string): this;\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    returning(returning: string|string[]): this;\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    returning(returning: string|string[]): this {\r\n\r\n        // not all databases support returning/output cause\r\n        if (!this.connection.driver.isReturningSqlSupported())\r\n            throw new ReturningStatementNotSupportedError();\r\n\r\n        this.expressionMap.returning = returning;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets ORDER BY condition in the query builder.\r\n     * If you had previously ORDER BY expression defined,\r\n     * calling this function will override previously set ORDER BY conditions.\r\n     *\r\n     * Calling order by without order set will remove all previously set order bys.\r\n     */\r\n    orderBy(): this;\r\n\r\n    /**\r\n     * Sets ORDER BY condition in the query builder.\r\n     * If you had previously ORDER BY expression defined,\r\n     * calling this function will override previously set ORDER BY conditions.\r\n     */\r\n    orderBy(sort: string, order?: \"ASC\"|\"DESC\", nulls?: \"NULLS FIRST\"|\"NULLS LAST\"): this;\r\n\r\n    /**\r\n     * Sets ORDER BY condition in the query builder.\r\n     * If you had previously ORDER BY expression defined,\r\n     * calling this function will override previously set ORDER BY conditions.\r\n     */\r\n    orderBy(order: OrderByCondition): this;\r\n\r\n    /**\r\n     * Sets ORDER BY condition in the query builder.\r\n     * If you had previously ORDER BY expression defined,\r\n     * calling this function will override previously set ORDER BY conditions.\r\n     */\r\n    orderBy(sort?: string|OrderByCondition, order: \"ASC\"|\"DESC\" = \"ASC\", nulls?: \"NULLS FIRST\"|\"NULLS LAST\"): this {\r\n        if (sort) {\r\n            if (sort instanceof Object) {\r\n                this.expressionMap.orderBys = sort as OrderByCondition;\r\n            } else {\r\n                if (nulls) {\r\n                    this.expressionMap.orderBys = { [sort as string]: { order, nulls } };\r\n                } else {\r\n                    this.expressionMap.orderBys = { [sort as string]: order };\r\n                }\r\n            }\r\n        } else {\r\n            this.expressionMap.orderBys = {};\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds ORDER BY condition in the query builder.\r\n     */\r\n    addOrderBy(sort: string, order: \"ASC\"|\"DESC\" = \"ASC\", nulls?: \"NULLS FIRST\"|\"NULLS LAST\"): this {\r\n        if (nulls) {\r\n            this.expressionMap.orderBys[sort] = { order, nulls };\r\n        } else {\r\n            this.expressionMap.orderBys[sort] = order;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets LIMIT - maximum number of rows to be selected.\r\n     */\r\n    limit(limit?: number): this {\r\n        this.expressionMap.limit = limit;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Indicates if entity must be updated after update operation.\r\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\r\n     * Enabled by default.\r\n     */\r\n    whereEntity(entity: Entity|Entity[]): this {\r\n        if (!this.expressionMap.mainAlias!.hasMetadata)\r\n            throw new Error(`.whereEntity method can only be used on queries which update real entity table.`);\r\n\r\n        this.expressionMap.wheres = [];\r\n        const entities: Entity[] = entity instanceof Array ? entity : [entity];\r\n        entities.forEach(entity => {\r\n\r\n            const entityIdMap = this.expressionMap.mainAlias!.metadata.getEntityIdMap(entity);\r\n            if (!entityIdMap)\r\n                throw new Error(`Provided entity does not have ids set, cannot perform operation.`);\r\n\r\n            this.orWhereInIds(entityIdMap);\r\n        });\r\n\r\n        this.expressionMap.whereEntities = entities;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Indicates if entity must be updated after update operation.\r\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\r\n     * Enabled by default.\r\n     */\r\n    updateEntity(enabled: boolean): this {\r\n        this.expressionMap.updateEntity = enabled;\r\n        return this;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates UPDATE express used to perform insert query.\r\n     */\r\n    protected createUpdateExpression() {\r\n        const valuesSet = this.getValueSet();\r\n        const metadata = this.expressionMap.mainAlias!.hasMetadata ? this.expressionMap.mainAlias!.metadata : undefined;\r\n\r\n        // prepare columns and values to be updated\r\n        const updateColumnAndValues: string[] = [];\r\n        const newParameters: ObjectLiteral = {};\r\n        let parametersCount =   this.connection.driver instanceof MysqlDriver ||\r\n                                this.connection.driver instanceof OracleDriver ||\r\n                                this.connection.driver instanceof AbstractSqliteDriver\r\n            ? 0 : Object.keys(this.expressionMap.nativeParameters).length;\r\n        if (metadata) {\r\n            EntityMetadata.createPropertyPath(metadata, valuesSet).forEach(propertyPath => {\r\n                // todo: make this and other query builder to work with properly with tables without metadata\r\n                const columns = metadata.findColumnsWithPropertyPath(propertyPath);\r\n                columns.forEach(column => {\r\n                    const paramName = \"upd_\" + column.databaseName;\r\n\r\n                    //\r\n                    let value = column.getEntityValue(valuesSet);\r\n                    if (column.referencedColumn && value instanceof Object) {\r\n                        value = column.referencedColumn.getEntityValue(value);\r\n                    }\r\n                    value = this.connection.driver.preparePersistentValue(value, column);\r\n\r\n                    // todo: duplication zone\r\n                    if (value instanceof Function) { // support for SQL expressions in update query\r\n                        updateColumnAndValues.push(this.escape(column.databaseName) + \" = \" + value());\r\n                    } else {\r\n                        if (this.connection.driver instanceof SqlServerDriver) {\r\n                            value = this.connection.driver.parametrizeValue(column, value);\r\n\r\n                        // } else if (value instanceof Array) {\r\n                        //     value = new ArrayParameter(value);\r\n                        }\r\n\r\n                        if (this.connection.driver instanceof MysqlDriver ||\r\n                            this.connection.driver instanceof OracleDriver ||\r\n                            this.connection.driver instanceof AbstractSqliteDriver) {\r\n                            newParameters[paramName] = value;\r\n                        } else {\r\n                            this.expressionMap.nativeParameters[paramName] = value;\r\n                        }\r\n\r\n                        updateColumnAndValues.push(this.escape(column.databaseName) + \" = \" + this.connection.driver.createParameter(paramName, parametersCount));\r\n                        parametersCount++;\r\n                    }\r\n                });\r\n            });\r\n\r\n            if (metadata.versionColumn)\r\n                updateColumnAndValues.push(this.escape(metadata.versionColumn.databaseName) + \" = \" + this.escape(metadata.versionColumn.databaseName) + \" + 1\");\r\n            if (metadata.updateDateColumn)\r\n                updateColumnAndValues.push(this.escape(metadata.updateDateColumn.databaseName) + \" = CURRENT_TIMESTAMP\"); // todo: fix issue with CURRENT_TIMESTAMP(6) being used, can \"DEFAULT\" be used?!\r\n\r\n        } else {\r\n            Object.keys(valuesSet).map(key => {\r\n                let value = valuesSet[key];\r\n\r\n                // todo: duplication zone\r\n                if (value instanceof Function) { // support for SQL expressions in update query\r\n                    updateColumnAndValues.push(this.escape(key) + \" = \" + value());\r\n                } else {\r\n\r\n                    // we need to store array values in a special class to make sure parameter replacement will work correctly\r\n                    // if (value instanceof Array)\r\n                    //     value = new ArrayParameter(value);\r\n\r\n                    if (this.connection.driver instanceof MysqlDriver ||\r\n                        this.connection.driver instanceof OracleDriver ||\r\n                        this.connection.driver instanceof AbstractSqliteDriver) {\r\n                        newParameters[key] = value;\r\n                    } else {\r\n                        this.expressionMap.nativeParameters[key] = value;\r\n                    }\r\n\r\n                    updateColumnAndValues.push(this.escape(key) + \" = \" + this.connection.driver.createParameter(key, parametersCount));\r\n                    parametersCount++;\r\n                }\r\n            });\r\n        }\r\n\r\n        // we re-write parameters this way because we want our \"UPDATE ... SET\" parameters to be first in the list of \"nativeParameters\"\r\n        // because some drivers like mysql depend on order of parameters\r\n        if (this.connection.driver instanceof MysqlDriver ||\r\n            this.connection.driver instanceof OracleDriver ||\r\n            this.connection.driver instanceof AbstractSqliteDriver) {\r\n            this.expressionMap.nativeParameters = Object.assign(newParameters, this.expressionMap.nativeParameters);\r\n        }\r\n\r\n        // get a table name and all column database names\r\n        const whereExpression = this.createWhereExpression();\r\n        const returningExpression = this.createReturningExpression();\r\n\r\n        // generate and return sql update query\r\n        if (returningExpression && (this.connection.driver instanceof PostgresDriver || this.connection.driver instanceof OracleDriver)) {\r\n            return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")}${whereExpression} RETURNING ${returningExpression}`;\r\n\r\n        } else if (returningExpression && this.connection.driver instanceof SqlServerDriver) {\r\n            return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")} OUTPUT ${returningExpression}${whereExpression}`;\r\n\r\n        } else {\r\n            return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")}${whereExpression}`; // todo: how do we replace aliases in where to nothing?\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates \"ORDER BY\" part of SQL query.\r\n     */\r\n    protected createOrderByExpression() {\r\n        const orderBys = this.expressionMap.orderBys;\r\n        if (Object.keys(orderBys).length > 0)\r\n            return \" ORDER BY \" + Object.keys(orderBys)\r\n                    .map(columnName => {\r\n                        if (typeof orderBys[columnName] === \"string\") {\r\n                            return this.replacePropertyNames(columnName) + \" \" + orderBys[columnName];\r\n                        } else {\r\n                            return this.replacePropertyNames(columnName) + \" \" + (orderBys[columnName] as any).order + \" \" + (orderBys[columnName] as any).nulls;\r\n                        }\r\n                    })\r\n                    .join(\", \");\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Creates \"LIMIT\" parts of SQL query.\r\n     */\r\n    protected createLimitExpression(): string {\r\n        let limit: number|undefined = this.expressionMap.limit;\r\n\r\n        if (limit) {\r\n            if (this.connection.driver instanceof MysqlDriver) {\r\n                return \" LIMIT \" + limit;\r\n            } else {\r\n                throw new LimitOnUpdateNotSupportedError();\r\n            }\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Gets array of values need to be inserted into the target table.\r\n     */\r\n    protected getValueSet(): ObjectLiteral {\r\n        if (this.expressionMap.valuesSet instanceof Object)\r\n            return this.expressionMap.valuesSet;\r\n\r\n        throw new Error(`Cannot perform update query because update values are not defined. Call \"qb.set(...)\" method to specify inserted values.`);\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}