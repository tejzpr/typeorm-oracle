{"version":3,"sources":["../../src/decorator/tree/Tree.ts"],"names":[],"mappings":";;AAAA,4BAA8C;AAI9C;;;;;GAKG;AACH,cAAqB,IAAc;IAC/B,OAAO,UAAU,MAAgB;QAE7B,0BAAsB,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC;YAChC,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI;SACO,CAAC,CAAC;IAC3B,CAAC,CAAC;AACN,CAAC;AARD,oBAQC","file":"Tree.js","sourcesContent":["import {getMetadataArgsStorage} from \"../../\";\r\nimport {TreeMetadataArgs} from \"../../metadata-args/TreeMetadataArgs\";\r\nimport {TreeType} from \"../../metadata/types/TreeTypes\";\r\n\r\n/**\r\n * Marks entity to work like a tree.\r\n * Tree pattern that will be used for the tree entity should be specified.\r\n * @TreeParent decorator must be used in tree entities.\r\n * TreeRepository can be used to manipulate with tree entities.\r\n */\r\nexport function Tree(type: TreeType): Function {\r\n    return function (target: Function) {\r\n\r\n        getMetadataArgsStorage().trees.push({\r\n            target: target,\r\n            type: type\r\n        } as TreeMetadataArgs);\r\n    };\r\n}\r\n"],"sourceRoot":"../.."}