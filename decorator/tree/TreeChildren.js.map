{"version":3,"sources":["../../src/decorator/tree/TreeChildren.ts"],"names":[],"mappings":";;AAAA,4BAA+D;AAG/D;;;GAGG;AACH,sBAA6B,OAA8D;IACvF,OAAO,UAAU,MAAc,EAAE,YAAoB;QACjD,IAAI,CAAC,OAAO;YAAE,OAAO,GAAG,EAAqB,CAAC;QAE9C,4CAA4C;QAC5C,IAAM,aAAa,GAAG,OAAO,IAAK,OAAe,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACrI,IAAM,MAAM,GAAG,CAAC,aAAa,IAAI,OAAO,aAAa,CAAC,IAAI,KAAK,QAAQ,IAAI,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,SAAS,CAAC,IAAI,KAAK,CAAC;QAEpI,qCAAqC;QACrC,0BAAsB,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC;YACpC,cAAc,EAAE,IAAI;YACpB,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,MAAM,EAAE,MAAM;YACd,YAAY,EAAE,aAAa;YAC3B,IAAI,EAAE,cAAM,OAAA,MAAM,CAAC,WAAW,EAAlB,CAAkB;YAC9B,OAAO,EAAE,OAAO;SACK,CAAC,CAAC;IAC/B,CAAC,CAAC;AACN,CAAC;AAnBD,oCAmBC","file":"TreeChildren.js","sourcesContent":["import {getMetadataArgsStorage, RelationOptions} from \"../../\";\r\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\r\n\r\n/**\r\n * Marks a entity property as a children of the tree.\r\n * \"Tree children\" will contain all children (bind) of this entity.\r\n */\r\nexport function TreeChildren(options?: { cascade?: boolean|(\"insert\"|\"update\"|\"remove\")[] }): Function {\r\n    return function (object: Object, propertyName: string) {\r\n        if (!options) options = {} as RelationOptions;\r\n\r\n        // now try to determine it its lazy relation\r\n        const reflectedType = Reflect && (Reflect as any).getMetadata ? Reflect.getMetadata(\"design:type\", object, propertyName) : undefined;\r\n        const isLazy = (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\") || false;\r\n\r\n        // add one-to-many relation for this \r\n        getMetadataArgsStorage().relations.push({\r\n            isTreeChildren: true,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            isLazy: isLazy,\r\n            relationType: \"one-to-many\",\r\n            type: () => object.constructor,\r\n            options: options\r\n        } as RelationMetadataArgs);\r\n    };\r\n}\r\n"],"sourceRoot":"../.."}