{"version":3,"sources":["../../src/decorator/columns/Column.ts"],"names":[],"mappings":";;AAAA,4BAA6D;AAY7D,iFAA8E;AA8D9E;;;GAGG;AACH,gBAAuB,aAA2F,EAAE,OAA+C;IAC/J,OAAO,UAAU,MAAc,EAAE,YAAoB;QAEjD,uBAAuB;QACvB,IAAI,IAA0B,CAAC;QAC/B,IAAI,OAAO,aAAa,KAAK,QAAQ,IAAI,aAAa,YAAY,QAAQ,EAAE;YACxE,IAAI,GAAgB,aAAa,CAAC;SAErC;aAAM,IAAI,aAAa,EAAE;YACtB,OAAO,GAAmB,aAAa,CAAC;YACxC,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC;SAC7B;QACD,IAAI,CAAC,OAAO;YAAE,OAAO,GAAG,EAAmB,CAAC;QAE5C,uDAAuD;QACvD,IAAM,mBAAmB,GAAG,OAAO,IAAK,OAAe,CAAC,WAAW,CAAC,CAAC,CAAE,OAAe,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACpJ,IAAI,CAAC,IAAI,IAAI,mBAAmB,EAAE,uDAAuD;YACrF,IAAI,GAAG,mBAAmB,CAAC;QAE/B,yGAAyG;QACzG,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI;YACrB,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;QAExB,0CAA0C;QAC1C,IAAI,OAAO,CAAC,IAAI,KAAK,QAAQ,IAAI,CAAC,OAAO,CAAC,UAAU;YAChD,OAAO,CAAC,UAAU,GAAG,mBAAmB,KAAK,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC;QAE9E,IAAI,aAAa,YAAY,QAAQ,EAAE,EAAE,uBAAuB;YAC5D,0BAAsB,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC;gBACpC,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,OAAO,EAAE,mBAAmB,KAAK,KAAK,IAAI,OAAO,CAAC,KAAK,KAAK,IAAI;gBAChE,MAAM,EAAE,OAAO,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS;gBACjE,IAAI,EAAE,aAAyC;aAC1B,CAAC,CAAC;SAE9B;aAAM,EAAE,4BAA4B;YAEjC,yFAAyF;YACzF,IAAI,CAAC,OAAO,CAAC,IAAI;gBACb,MAAM,IAAI,mDAAwB,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;YAE7D,gBAAgB;YAChB,IAAI,OAAO,CAAC,MAAM,KAAK,IAAI;gBACvB,0BAAsB,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,WAAW,EAAE,OAAO,EAAE,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YAEnG,0BAAsB,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC;gBAClC,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,OAAO;aACG,CAAC,CAAC;SAC5B;IACL,CAAC,CAAC;AACN,CAAC;AAtDD,wBAsDC","file":"Column.js","sourcesContent":["import {ColumnOptions, getMetadataArgsStorage} from \"../../\";\r\nimport {\r\n    ColumnType, SimpleColumnType, WithLengthColumnType,\r\n    WithPrecisionColumnType, WithWidthColumnType\r\n} from \"../../driver/types/ColumnTypes\";\r\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\r\nimport {ColumnCommonOptions} from \"../options/ColumnCommonOptions\";\r\nimport {ColumnWithLengthOptions} from \"../options/ColumnWithLengthOptions\";\r\nimport {ColumnNumericOptions} from \"../options/ColumnNumericOptions\";\r\nimport {ColumnEnumOptions} from \"../options/ColumnEnumOptions\";\r\nimport {ColumnEmbeddedOptions} from \"../options/ColumnEmbeddedOptions\";\r\nimport {EmbeddedMetadataArgs} from \"../../metadata-args/EmbeddedMetadataArgs\";\r\nimport {ColumnTypeUndefinedError} from \"../../error/ColumnTypeUndefinedError\";\r\nimport {ColumnHstoreOptions} from \"../options/ColumnHstoreOptions\";\r\nimport {ColumnWithWidthOptions} from \"../options/ColumnWithWidthOptions\";\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column. Only properties decorated with this\r\n * decorator will be persisted to the database when entity be saved.\r\n */\r\nexport function Column(): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n */\r\nexport function Column(options: ColumnOptions): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n */\r\nexport function Column(type: SimpleColumnType, options?: ColumnCommonOptions): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n */\r\nexport function Column(type: WithLengthColumnType, options?: ColumnCommonOptions & ColumnWithLengthOptions): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n */\r\nexport function Column(type: WithWidthColumnType, options?: ColumnCommonOptions & ColumnWithWidthOptions): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n */\r\nexport function Column(type: WithPrecisionColumnType, options?: ColumnCommonOptions & ColumnNumericOptions): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n */\r\nexport function Column(type: \"enum\", options?: ColumnCommonOptions & ColumnEnumOptions): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n */\r\nexport function Column(type: \"hstore\", options?: ColumnCommonOptions & ColumnHstoreOptions): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n *\r\n * Property in entity can be marked as Embedded, and on persist all columns from the embedded are mapped to the\r\n * single table of the entity where Embedded is used. And on hydration all columns which supposed to be in the\r\n * embedded will be mapped to it from the single table.\r\n */\r\nexport function Column(type: (type?: any) => Function, options?: ColumnEmbeddedOptions): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n */\r\nexport function Column(typeOrOptions?: ((type?: any) => Function)|ColumnType|(ColumnOptions&ColumnEmbeddedOptions), options?: (ColumnOptions&ColumnEmbeddedOptions)): Function {\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        // normalize parameters\r\n        let type: ColumnType|undefined;\r\n        if (typeof typeOrOptions === \"string\" || typeOrOptions instanceof Function) {\r\n            type = <ColumnType> typeOrOptions;\r\n\r\n        } else if (typeOrOptions) {\r\n            options = <ColumnOptions> typeOrOptions;\r\n            type = typeOrOptions.type;\r\n        }\r\n        if (!options) options = {} as ColumnOptions;\r\n\r\n        // if type is not given explicitly then try to guess it\r\n        const reflectMetadataType = Reflect && (Reflect as any).getMetadata ? (Reflect as any).getMetadata(\"design:type\", object, propertyName) : undefined;\r\n        if (!type && reflectMetadataType) // if type is not given explicitly then try to guess it\r\n            type = reflectMetadataType;\r\n\r\n        // check if there is no type in column options then set type from first function argument, or guessed one\r\n        if (!options.type && type)\r\n            options.type = type;\r\n\r\n        // specify HSTORE type if column is HSTORE\r\n        if (options.type === \"hstore\" && !options.hstoreType)\r\n            options.hstoreType = reflectMetadataType === Object ? \"object\" : \"string\";\r\n\r\n        if (typeOrOptions instanceof Function) { // register an embedded\r\n            getMetadataArgsStorage().embeddeds.push({\r\n                target: object.constructor,\r\n                propertyName: propertyName,\r\n                isArray: reflectMetadataType === Array || options.array === true,\r\n                prefix: options.prefix !== undefined ? options.prefix : undefined,\r\n                type: typeOrOptions as (type?: any) => Function\r\n            } as EmbeddedMetadataArgs);\r\n\r\n        } else { // register a regular column\r\n\r\n            // if we still don't have a type then we need to give error to user that type is required\r\n            if (!options.type)\r\n                throw new ColumnTypeUndefinedError(object, propertyName);\r\n\r\n            // create unique\r\n            if (options.unique === true)\r\n                getMetadataArgsStorage().uniques.push({ target: object.constructor, columns: [propertyName] });\r\n\r\n            getMetadataArgsStorage().columns.push({\r\n                target: object.constructor,\r\n                propertyName: propertyName,\r\n                mode: \"regular\",\r\n                options: options\r\n            } as ColumnMetadataArgs);\r\n        }\r\n    };\r\n}\r\n"],"sourceRoot":"../.."}