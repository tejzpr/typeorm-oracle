{"version":3,"sources":["../../src/decorator/columns/PrimaryColumn.ts"],"names":[],"mappings":";;AAAA,4BAAyE;AACzE,iFAA8E;AAC9E,qGAAkG;AAiBlG;;;;GAIG;AACH,uBAA8B,aAAwC,EAAE,OAAuB;IAC3F,OAAO,UAAU,MAAc,EAAE,YAAoB;QAEjD,uBAAuB;QACvB,IAAI,IAA0B,CAAC;QAC/B,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE;YACnC,IAAI,GAAgB,aAAa,CAAC;SACrC;aAAM;YACH,OAAO,GAAmB,aAAa,CAAC;SAC3C;QACD,IAAI,CAAC,OAAO;YAAE,OAAO,GAAG,EAAmB,CAAC;QAE5C,uDAAuD;QACvD,IAAM,mBAAmB,GAAG,OAAO,IAAK,OAAe,CAAC,WAAW,CAAC,CAAC,CAAE,OAAe,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACpJ,IAAI,CAAC,IAAI,IAAI,mBAAmB;YAC5B,IAAI,GAAG,mBAAmB,CAAC;QAE/B,yGAAyG;QACzG,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI;YACrB,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;QAExB,yFAAyF;QACzF,IAAI,CAAC,OAAO,CAAC,IAAI;YACb,MAAM,IAAI,mDAAwB,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;QAE7D,wFAAwF;QACxF,IAAI,OAAO,CAAC,QAAQ;YAChB,MAAM,IAAI,uEAAkC,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;QAEvE,6CAA6C;QAC7C,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC;QAEvB,4CAA4C;QAC5C,0BAAsB,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC;YAClC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,OAAO;SACG,CAAC,CAAC;IAC7B,CAAC,CAAC;AACN,CAAC;AAxCD,sCAwCC","file":"PrimaryColumn.js","sourcesContent":["import {ColumnOptions, ColumnType, getMetadataArgsStorage} from \"../../\";\r\nimport {ColumnTypeUndefinedError} from \"../../error/ColumnTypeUndefinedError\";\r\nimport {PrimaryColumnCannotBeNullableError} from \"../../error/PrimaryColumnCannotBeNullableError\";\r\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n * Primary columns also creates a PRIMARY KEY for this column in a db.\r\n */\r\nexport function PrimaryColumn(options?: ColumnOptions): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n * Primary columns also creates a PRIMARY KEY for this column in a db.\r\n */\r\nexport function PrimaryColumn(type?: ColumnType, options?: ColumnOptions): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n * Primary columns also creates a PRIMARY KEY for this column in a db.\r\n */\r\nexport function PrimaryColumn(typeOrOptions?: ColumnType|ColumnOptions, options?: ColumnOptions): Function {\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        // normalize parameters\r\n        let type: ColumnType|undefined;\r\n        if (typeof typeOrOptions === \"string\") {\r\n            type = <ColumnType> typeOrOptions;\r\n        } else {\r\n            options = <ColumnOptions> typeOrOptions;\r\n        }\r\n        if (!options) options = {} as ColumnOptions;\r\n\r\n        // if type is not given explicitly then try to guess it\r\n        const reflectMetadataType = Reflect && (Reflect as any).getMetadata ? (Reflect as any).getMetadata(\"design:type\", object, propertyName) : undefined;\r\n        if (!type && reflectMetadataType)\r\n            type = reflectMetadataType;\r\n\r\n        // check if there is no type in column options then set type from first function argument, or guessed one\r\n        if (!options.type && type)\r\n            options.type = type;\r\n\r\n        // if we still don't have a type then we need to give error to user that type is required\r\n        if (!options.type)\r\n            throw new ColumnTypeUndefinedError(object, propertyName);\r\n\r\n        // check if column is not nullable, because we cannot allow a primary key to be nullable\r\n        if (options.nullable)\r\n            throw new PrimaryColumnCannotBeNullableError(object, propertyName);\r\n\r\n        // explicitly set a primary to column options\r\n        options.primary = true;\r\n\r\n        // create and register a new column metadata\r\n        getMetadataArgsStorage().columns.push({\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            mode: \"regular\",\r\n            options: options\r\n        } as ColumnMetadataArgs);\r\n    };\r\n}\r\n\r\n"],"sourceRoot":"../.."}