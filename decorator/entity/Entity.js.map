{"version":3,"sources":["../../src/decorator/entity/Entity.ts"],"names":[],"mappings":";;AAAA,4BAA6D;AAe7D;;;GAGG;AACH,gBAAuB,aAAoC,EAAE,YAA4B;IACrF,IAAM,OAAO,GAAG,CAAC,OAAO,aAAa,KAAK,QAAQ,CAAC,CAAC,CAAC,aAA8B,CAAC,CAAC,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;IAC1G,IAAM,IAAI,GAAG,OAAO,aAAa,KAAK,QAAQ,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC;IAE9E,OAAO,UAAU,MAAgB;QAC7B,0BAAsB,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC;YACjC,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS;YACtD,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS;YACnD,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS;YACzD,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS;YACnD,WAAW,EAAE,OAAO,CAAC,WAAW;SACd,CAAC,CAAC;IAC5B,CAAC,CAAC;AACN,CAAC;AAhBD,wBAgBC","file":"Entity.js","sourcesContent":["import {EntityOptions, getMetadataArgsStorage} from \"../../\";\r\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\r\n\r\n/**\r\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\r\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\r\n */\r\nexport function Entity(options?: EntityOptions): Function;\r\n\r\n/**\r\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\r\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\r\n */\r\nexport function Entity(name?: string, options?: EntityOptions): Function;\r\n\r\n/**\r\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\r\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\r\n */\r\nexport function Entity(nameOrOptions?: string|EntityOptions, maybeOptions?: EntityOptions): Function {\r\n    const options = (typeof nameOrOptions === \"object\" ? nameOrOptions as EntityOptions : maybeOptions) || {};\r\n    const name = typeof nameOrOptions === \"string\" ? nameOrOptions : options.name;\r\n\r\n    return function (target: Function) {\r\n        getMetadataArgsStorage().tables.push({\r\n            target: target,\r\n            name: name,\r\n            type: \"regular\",\r\n            orderBy: options.orderBy ? options.orderBy : undefined,\r\n            engine: options.engine ? options.engine : undefined,\r\n            database: options.database ? options.database : undefined,\r\n            schema: options.schema ? options.schema : undefined,\r\n            synchronize: options.synchronize\r\n        } as TableMetadataArgs);\r\n    };\r\n}\r\n"],"sourceRoot":"../.."}