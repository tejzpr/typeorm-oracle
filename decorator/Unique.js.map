{"version":3,"sources":["../../src/decorator/Unique.ts"],"names":[],"mappings":";;AAAA,kCAAgD;AAuBhD;;GAEG;AACH,gBAAuB,YAAmF,EACnF,WAA4E;IAC/F,IAAM,IAAI,GAAG,OAAO,YAAY,KAAK,QAAQ,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS,CAAC;IACzE,IAAM,MAAM,GAAG,OAAO,YAAY,KAAK,QAAQ,CAAC,CAAC,CAAkE,WAAW,CAAC,CAAC,CAAC,YAAwB,CAAC;IAE1J,OAAO,UAAU,WAA4B,EAAE,YAAqB;QAChE,IAAM,IAAI,GAAuB;YAC7B,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,WAAuB;YACxE,IAAI,EAAE,IAAI;YACV,OAAO,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM;SAClD,CAAC;QACF,8BAAsB,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC,CAAC;AACN,CAAC;AAbD,wBAaC","file":"Unique.js","sourcesContent":["import {getMetadataArgsStorage} from \"../index\";\r\nimport {UniqueMetadataArgs} from \"../metadata-args/UniqueMetadataArgs\";\r\n\r\n/**\r\n * Composite unique constraint must be set on entity classes and must specify entity's fields to be unique.\r\n */\r\nexport function Unique(name: string, fields: string[]): Function;\r\n\r\n/**\r\n * Composite unique constraint must be set on entity classes and must specify entity's fields to be unique.\r\n */\r\nexport function Unique(fields: string[]): Function;\r\n\r\n/**\r\n * Composite unique constraint must be set on entity classes and must specify entity's fields to be unique.\r\n */\r\nexport function Unique(fields: (object?: any) => (any[]|{ [key: string]: number })): Function;\r\n\r\n/**\r\n * Composite unique constraint must be set on entity classes and must specify entity's fields to be unique.\r\n */\r\nexport function Unique(name: string, fields: (object?: any) => (any[]|{ [key: string]: number })): Function;\r\n\r\n/**\r\n * Composite unique constraint must be set on entity classes and must specify entity's fields to be unique.\r\n */\r\nexport function Unique(nameOrFields?: string|string[]|((object: any) => (any[]|{ [key: string]: number })),\r\n                       maybeFields?: ((object?: any) => (any[]|{ [key: string]: number }))|string[]): Function {\r\n    const name = typeof nameOrFields === \"string\" ? nameOrFields : undefined;\r\n    const fields = typeof nameOrFields === \"string\" ? <((object?: any) => (any[]|{ [key: string]: number }))|string[]> maybeFields : nameOrFields as string[];\r\n\r\n    return function (clsOrObject: Function|Object, propertyName?: string) {\r\n        const args: UniqueMetadataArgs = {\r\n            target: propertyName ? clsOrObject.constructor : clsOrObject as Function,\r\n            name: name,\r\n            columns: propertyName ? [propertyName] : fields\r\n        };\r\n        getMetadataArgsStorage().uniques.push(args);\r\n    };\r\n}\r\n"],"sourceRoot":".."}