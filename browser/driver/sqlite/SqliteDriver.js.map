{"version":3,"sources":["../browser/src/driver/sqlite/SqliteDriver.ts"],"names":[],"mappings":"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","file":"SqliteDriver.js","sourcesContent":["import {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\r\nimport {SqliteQueryRunner} from \"./SqliteQueryRunner\";\r\nimport {DriverOptionNotSetError} from \"../../error/DriverOptionNotSetError\";\r\nimport {PlatformTools} from \"../../platform/PlatformTools\";\r\nimport {Connection} from \"../../connection/Connection\";\r\nimport {SqliteConnectionOptions} from \"./SqliteConnectionOptions\";\r\nimport {ColumnType} from \"../types/ColumnTypes\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {AbstractSqliteDriver} from \"../sqlite-abstract/AbstractSqliteDriver\";\r\n\r\n/**\r\n * Organizes communication with sqlite DBMS.\r\n */\r\nexport class SqliteDriver extends AbstractSqliteDriver {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection options.\r\n     */\r\n    options: SqliteConnectionOptions;\r\n\r\n    /**\r\n     * SQLite underlying library.\r\n     */\r\n    sqlite: any;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: Connection) {\r\n        super(connection);\r\n\r\n        this.connection = connection;\r\n        this.options = connection.options as SqliteConnectionOptions;\r\n        this.database = this.options.database;\r\n\r\n        // validate options to make sure everything is set\r\n        if (!this.options.database)\r\n            throw new DriverOptionNotSetError(\"database\");\r\n\r\n        // load sqlite package\r\n        this.loadDependencies();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Closes connection with database.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            this.queryRunner = undefined;\r\n            this.databaseConnection.close((err: any) => err ? fail(err) : ok());\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used to execute database queries.\r\n     */\r\n    createQueryRunner(mode: \"master\"|\"slave\" = \"master\"): QueryRunner {\r\n        if (!this.queryRunner)\r\n            this.queryRunner = new SqliteQueryRunner(this);\r\n\r\n        return this.queryRunner;\r\n    }\r\n\r\n    normalizeType(column: { type?: ColumnType, length?: number | string, precision?: number|null, scale?: number }): string {\r\n        if ((column.type as any) === Buffer) {\r\n            return \"blob\";\r\n        }\r\n\r\n        return super.normalizeType(column);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates connection with the database.\r\n     */\r\n    protected createDatabaseConnection() {\r\n        return new Promise<void>(async (ok, fail) => {\r\n            await this.createDatabaseDirectory(this.options.database);\r\n            const databaseConnection = new this.sqlite.Database(this.options.database, (err: any) => {\r\n                if (err) return fail(err);\r\n\r\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\r\n                // working properly. this also makes onDelete to work with sqlite.\r\n                databaseConnection.run(`PRAGMA foreign_keys = ON;`, (err: any, result: any) => {\r\n                    if (err) return fail(err);\r\n                    ok(databaseConnection);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): void {\r\n        try {\r\n            this.sqlite = PlatformTools.load(\"sqlite3\").verbose();\r\n\r\n        } catch (e) {\r\n            throw new DriverPackageNotInstalledError(\"SQLite\", \"sqlite3\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Auto creates database directory if it does not exist.\r\n     */\r\n    protected createDatabaseDirectory(fullPath: string): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            const mkdirp = PlatformTools.load(\"mkdirp\");\r\n            const path = PlatformTools.load(\"path\");\r\n            mkdirp(path.dirname(fullPath), (err: any) => err ? reject(err) : resolve());\r\n        });\r\n    }\r\n\r\n}"],"sourceRoot":"../.."}