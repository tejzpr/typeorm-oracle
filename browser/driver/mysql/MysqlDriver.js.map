{"version":3,"sources":["../browser/src/driver/mysql/MysqlDriver.ts"],"names":[],"mappings":"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","file":"MysqlDriver.js","sourcesContent":["import {Driver} from \"../Driver\";\r\nimport {ConnectionIsNotSetError} from \"../../error/ConnectionIsNotSetError\";\r\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\r\nimport {DriverUtils} from \"../DriverUtils\";\r\nimport {MysqlQueryRunner} from \"./MysqlQueryRunner\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {DateUtils} from \"../../util/DateUtils\";\r\nimport {PlatformTools} from \"../../platform/PlatformTools\";\r\nimport {Connection} from \"../../connection/Connection\";\r\nimport {RdbmsSchemaBuilder} from \"../../schema-builder/RdbmsSchemaBuilder\";\r\nimport {MysqlConnectionOptions} from \"./MysqlConnectionOptions\";\r\nimport {MappedColumnTypes} from \"../types/MappedColumnTypes\";\r\nimport {ColumnType} from \"../types/ColumnTypes\";\r\nimport {DataTypeDefaults} from \"../types/DataTypeDefaults\";\r\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\r\nimport {MysqlConnectionCredentialsOptions} from \"./MysqlConnectionCredentialsOptions\";\r\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {OrmUtils} from \"../../util/OrmUtils\";\r\n\r\n/**\r\n * Organizes communication with MySQL DBMS.\r\n */\r\nexport class MysqlDriver implements Driver {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection used by driver.\r\n     */\r\n    connection: Connection;\r\n\r\n    /**\r\n     * Mysql underlying library.\r\n     */\r\n    mysql: any;\r\n\r\n    /**\r\n     * Connection pool.\r\n     * Used in non-replication mode.\r\n     */\r\n    pool: any;\r\n\r\n    /**\r\n     * Pool cluster used in replication mode.\r\n     */\r\n    poolCluster: any;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection options.\r\n     */\r\n    options: MysqlConnectionOptions;\r\n\r\n    /**\r\n     * Master database used to perform all write queries.\r\n     */\r\n    database?: string;\r\n\r\n    /**\r\n     * Indicates if replication is enabled.\r\n     */\r\n    isReplicated: boolean = false;\r\n\r\n    /**\r\n     * Indicates if tree tables are supported by this driver.\r\n     */\r\n    treeSupport = true;\r\n\r\n    /**\r\n     * Gets list of supported column data types by a driver.\r\n     *\r\n     * @see https://www.tutorialspoint.com/mysql/mysql-data-types.htm\r\n     * @see https://dev.mysql.com/doc/refman/5.7/en/data-types.html\r\n     */\r\n    supportedDataTypes: ColumnType[] = [\r\n        \"int\",\r\n        \"tinyint\",\r\n        \"smallint\",\r\n        \"mediumint\",\r\n        \"bigint\",\r\n        \"float\",\r\n        \"double\",\r\n        \"dec\",\r\n        \"decimal\",\r\n        \"numeric\",\r\n        \"date\",\r\n        \"datetime\",\r\n        \"timestamp\",\r\n        \"time\",\r\n        \"year\",\r\n        \"char\",\r\n        \"varchar\",\r\n        \"nvarchar\",\r\n        \"blob\",\r\n        \"text\",\r\n        \"tinyblob\",\r\n        \"tinytext\",\r\n        \"mediumblob\",\r\n        \"mediumtext\",\r\n        \"longblob\",\r\n        \"longtext\",\r\n        \"enum\",\r\n        \"json\",\r\n        \"binary\",\r\n        \"varbinary\",\r\n        \"geometry\",\r\n        \"point\",\r\n        \"linestring\",\r\n        \"polygon\",\r\n        \"multipoint\",\r\n        \"multilinestring\",\r\n        \"multipolygon\",\r\n        \"geometrycollection\"\r\n    ];\r\n\r\n    /**\r\n     * Gets list of spatial column data types.\r\n     */\r\n    spatialTypes: ColumnType[] = [\r\n        \"geometry\",\r\n        \"point\",\r\n        \"linestring\",\r\n        \"polygon\",\r\n        \"multipoint\",\r\n        \"multilinestring\",\r\n        \"multipolygon\",\r\n        \"geometrycollection\"\r\n    ];\r\n\r\n    /**\r\n     * Gets list of column data types that support length by a driver.\r\n     */\r\n    withLengthColumnTypes: ColumnType[] = [\r\n        \"char\",\r\n        \"varchar\",\r\n        \"nvarchar\",\r\n        \"binary\",\r\n        \"varbinary\"\r\n    ];\r\n\r\n    /**\r\n     * Gets list of column data types that support length by a driver.\r\n     */\r\n    withWidthColumnTypes: ColumnType[] = [\r\n        \"tinyint\",\r\n        \"smallint\",\r\n        \"mediumint\",\r\n        \"int\",\r\n        \"bigint\"\r\n    ];\r\n\r\n    /**\r\n     * Gets list of column data types that support precision by a driver.\r\n     */\r\n    withPrecisionColumnTypes: ColumnType[] = [\r\n        \"decimal\",\r\n        \"float\",\r\n        \"double\",\r\n        \"time\",\r\n        \"datetime\",\r\n        \"timestamp\"\r\n    ];\r\n\r\n    /**\r\n     * Gets list of column data types that supports scale by a driver.\r\n     */\r\n    withScaleColumnTypes: ColumnType[] = [\r\n        \"decimal\",\r\n        \"float\",\r\n        \"double\",\r\n    ];\r\n\r\n    /**\r\n     * Gets list of column data types that supports UNSIGNED and ZEROFILL attributes.\r\n     */\r\n    unsignedAndZerofillTypes: ColumnType[] = [\r\n        \"int\",\r\n        \"smallint\",\r\n        \"tinyint\",\r\n        \"mediumint\",\r\n        \"bigint\",\r\n        \"decimal\",\r\n        \"float\",\r\n        \"double\"\r\n    ];\r\n\r\n    /**\r\n     * ORM has special columns and we need to know what database column types should be for those columns.\r\n     * Column types are driver dependant.\r\n     */\r\n    mappedDataTypes: MappedColumnTypes = {\r\n        createDate: \"datetime\",\r\n        createDatePrecision: 6,\r\n        createDateDefault: \"CURRENT_TIMESTAMP(6)\",\r\n        updateDate: \"datetime\",\r\n        updateDatePrecision: 6,\r\n        updateDateDefault: \"CURRENT_TIMESTAMP(6)\",\r\n        version: \"int\",\r\n        treeLevel: \"int\",\r\n        migrationId: \"int\",\r\n        migrationName: \"varchar\",\r\n        migrationTimestamp: \"bigint\",\r\n        cacheId: \"int\",\r\n        cacheIdentifier: \"varchar\",\r\n        cacheTime: \"bigint\",\r\n        cacheDuration: \"int\",\r\n        cacheQuery: \"text\",\r\n        cacheResult: \"text\",\r\n    };\r\n\r\n    /**\r\n     * Default values of length, precision and scale depends on column data type.\r\n     * Used in the cases when length/precision/scale is not specified by user.\r\n     */\r\n    dataTypeDefaults: DataTypeDefaults = {\r\n        \"varchar\": { length: 255 },\r\n        \"char\": { length: 1 },\r\n        \"binary\": { length: 1 },\r\n        \"varbinary\": { length: 255 },\r\n        \"decimal\": { precision: 10, scale: 0 },\r\n        \"float\": { precision: 12 },\r\n        \"double\": { precision: 22 },\r\n        \"int\": { width: 11 },\r\n        \"tinyint\": { width: 4 },\r\n        \"smallint\": { width: 6 },\r\n        \"mediumint\": { width: 9 },\r\n        \"bigint\": { width: 20 }\r\n    };\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: Connection) {\r\n        this.connection = connection;\r\n        this.options = connection.options as MysqlConnectionOptions;\r\n        this.isReplicated = this.options.replication ? true : false;\r\n\r\n        // load mysql package\r\n        this.loadDependencies();\r\n\r\n        this.database = this.options.replication ? this.options.replication.master.database : this.options.database;\r\n\r\n        // validate options to make sure everything is set\r\n        // todo: revisit validation with replication in mind\r\n        // if (!(this.options.host || (this.options.extra && this.options.extra.socketPath)) && !this.options.socketPath)\r\n        //     throw new DriverOptionNotSetError(\"socketPath and host\");\r\n        // if (!this.options.username)\r\n        //     throw new DriverOptionNotSetError(\"username\");\r\n        // if (!this.options.database)\r\n        //     throw new DriverOptionNotSetError(\"database\");\r\n        // todo: check what is going on when connection is setup without database and how to connect to a database then?\r\n        // todo: provide options to auto-create a database if it does not exist yet\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     */\r\n    async connect(): Promise<void> {\r\n\r\n        if (this.options.replication) {\r\n            this.poolCluster = this.mysql.createPoolCluster(this.options.replication);\r\n            this.options.replication.slaves.forEach((slave, index) => {\r\n                this.poolCluster.add(\"SLAVE\" + index, this.createConnectionOptions(this.options, slave));\r\n            });\r\n            this.poolCluster.add(\"MASTER\", this.createConnectionOptions(this.options, this.options.replication.master));\r\n\r\n        } else {\r\n            this.pool = await this.createPool(this.createConnectionOptions(this.options, this.options));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\r\n     */\r\n    afterConnect(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Closes connection with the database.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n        if (!this.poolCluster && !this.pool)\r\n            return Promise.reject(new ConnectionIsNotSetError(\"mysql\"));\r\n\r\n        if (this.poolCluster) {\r\n            return new Promise<void>((ok, fail) => {\r\n                this.poolCluster.end((err: any) => err ? fail(err) : ok());\r\n                this.poolCluster = undefined;\r\n            });\r\n        }\r\n        if (this.pool) {\r\n            return new Promise<void>((ok, fail) => {\r\n                this.pool.end((err: any) => {\r\n                    if (err) return fail(err);\r\n                    this.pool = undefined;\r\n                    ok();\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a schema builder used to build and sync a schema.\r\n     */\r\n    createSchemaBuilder() {\r\n        return new RdbmsSchemaBuilder(this.connection);\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used to execute database queries.\r\n     */\r\n    createQueryRunner(mode: \"master\"|\"slave\" = \"master\") {\r\n        return new MysqlQueryRunner(this, mode);\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral, nativeParameters: ObjectLiteral): [string, any[]] {\r\n        const escapedParameters: any[] = Object.keys(nativeParameters).map(key => nativeParameters[key]);\r\n        if (!parameters || !Object.keys(parameters).length)\r\n            return [sql, escapedParameters];\r\n\r\n        const keys = Object.keys(parameters).map(parameter => \"(:(\\\\.\\\\.\\\\.)?\" + parameter + \"\\\\b)\").join(\"|\");\r\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\r\n            let value: any;\r\n            if (key.substr(0, 4) === \":...\") {\r\n                value = parameters[key.substr(4)];\r\n            } else {\r\n                value = parameters[key.substr(1)];\r\n            }\r\n\r\n            if (value instanceof Function) {\r\n                return value();\r\n\r\n            } else {\r\n                escapedParameters.push(value);\r\n                return \"?\";\r\n            }\r\n        }); // todo: make replace only in value statements, otherwise problems\r\n        return [sql, escapedParameters];\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escape(columnName: string): string {\r\n        return \"`\" + columnName + \"`\";\r\n    }\r\n\r\n    /**\r\n     * Build full table name with database name, schema name and table name.\r\n     * E.g. \"myDB\".\"mySchema\".\"myTable\"\r\n     */\r\n    buildTableName(tableName: string, schema?: string, database?: string): string {\r\n        return database ? `${database}.${tableName}` : tableName;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (columnMetadata.transformer)\r\n            value = columnMetadata.transformer.to(value);\r\n\r\n        if (value === null || value === undefined)\r\n            return value;\r\n\r\n        if (columnMetadata.type === Boolean) {\r\n            return value === true ? 1 : 0;\r\n\r\n        } else if (columnMetadata.type === \"date\") {\r\n            return DateUtils.mixedDateToDateString(value);\r\n\r\n        } else if (columnMetadata.type === \"time\") {\r\n            return DateUtils.mixedDateToTimeString(value);\r\n\r\n        } else if (columnMetadata.type === \"json\") {\r\n            return JSON.stringify(value);\r\n\r\n        } else if (columnMetadata.type === \"timestamp\" || columnMetadata.type === \"datetime\" || columnMetadata.type === Date) {\r\n            return DateUtils.mixedDateToDate(value);\r\n\r\n        } else if (columnMetadata.type === \"simple-array\") {\r\n            return DateUtils.simpleArrayToString(value);\r\n\r\n        } else if (columnMetadata.type === \"simple-json\") {\r\n            return DateUtils.simpleJsonToString(value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (value === null || value === undefined)\r\n            return value;\r\n\r\n        if (columnMetadata.type === Boolean) {\r\n            value = value ? true : false;\r\n\r\n        } else if (columnMetadata.type === \"datetime\" || columnMetadata.type === Date) {\r\n            value = DateUtils.normalizeHydratedDate(value);\r\n\r\n        } else if (columnMetadata.type === \"date\") {\r\n            value = DateUtils.mixedDateToDateString(value);\r\n\r\n        } else if (columnMetadata.type === \"json\") {\r\n            value = typeof value === \"string\" ? JSON.parse(value) : value;\r\n\r\n        } else if (columnMetadata.type === \"time\") {\r\n            value = DateUtils.mixedTimeToString(value);\r\n\r\n        } else if (columnMetadata.type === \"simple-array\") {\r\n            value = DateUtils.stringToSimpleArray(value);\r\n\r\n        } else if (columnMetadata.type === \"simple-json\") {\r\n            value = DateUtils.stringToSimpleJson(value);\r\n        }\r\n\r\n        if (columnMetadata.transformer)\r\n            value = columnMetadata.transformer.from(value);\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Creates a database type from a given column metadata.\r\n     */\r\n    normalizeType(column: { type: ColumnType, length?: number|string, precision?: number|null, scale?: number }): string {\r\n        if (column.type === Number || column.type === \"integer\") {\r\n            return \"int\";\r\n\r\n        } else if (column.type === String || column.type === \"nvarchar\") {\r\n            return \"varchar\";\r\n\r\n        } else if (column.type === Date) {\r\n            return \"datetime\";\r\n\r\n        } else if ((column.type as any) === Buffer) {\r\n            return \"blob\";\r\n\r\n        } else if (column.type === Boolean) {\r\n            return \"tinyint\";\r\n\r\n        } else if (column.type === \"numeric\" || column.type === \"dec\") {\r\n            return \"decimal\";\r\n\r\n        } else if (column.type === \"uuid\") {\r\n            return \"varchar\";\r\n\r\n        } else if (column.type === \"simple-array\" || column.type === \"simple-json\") {\r\n            return \"text\";\r\n\r\n        } else {\r\n            return column.type as string || \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Normalizes \"default\" value of the column.\r\n     */\r\n    normalizeDefault(columnMetadata: ColumnMetadata): string {\r\n        const defaultValue = columnMetadata.default;\r\n\r\n        if (typeof defaultValue === \"number\") {\r\n            return \"\" + defaultValue;\r\n\r\n        } else if (typeof defaultValue === \"boolean\") {\r\n            return defaultValue === true ? \"1\" : \"0\";\r\n\r\n        } else if (typeof defaultValue === \"function\") {\r\n            return defaultValue();\r\n\r\n        } else if (typeof defaultValue === \"string\") {\r\n            return `'${defaultValue}'`;\r\n\r\n        } else {\r\n            return defaultValue;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Normalizes \"isUnique\" value of the column.\r\n     */\r\n    normalizeIsUnique(column: ColumnMetadata): boolean {\r\n        return column.entityMetadata.indices.some(idx => idx.isUnique && idx.columns.length === 1 && idx.columns[0] === column);\r\n    }\r\n\r\n    /**\r\n     * Returns default column lengths, which is required on column creation.\r\n     */\r\n    getColumnLength(column: ColumnMetadata|TableColumn): string {\r\n        if (column.length)\r\n            return column.length.toString();\r\n\r\n        switch (column.type) {\r\n            case String:\r\n            case \"varchar\":\r\n            case \"nvarchar\":\r\n                return \"255\";\r\n            case \"uuid\":\r\n                return \"36\";\r\n            case \"varbinary\":\r\n                return \"255\";\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates column type definition including length, precision and scale\r\n     */\r\n    createFullType(column: TableColumn): string {\r\n        let type = column.type;\r\n\r\n        // used 'getColumnLength()' method, because MySQL requires column length for `varchar`, `nvarchar` and `varbinary` data types\r\n        if (this.getColumnLength(column)) {\r\n            type += `(${this.getColumnLength(column)})`;\r\n\r\n        } else if (column.width) {\r\n            type += `(${column.width})`;\r\n\r\n        } else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {\r\n            type += `(${column.precision},${column.scale})`;\r\n\r\n        } else if (column.precision !== null && column.precision !== undefined) {\r\n            type += `(${column.precision})`;\r\n        }\r\n\r\n        if (column.isArray)\r\n            type += \" array\";\r\n\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * Obtains a new database connection to a master server.\r\n     * Used for replication.\r\n     * If replication is not setup then returns default connection's database connection.\r\n     */\r\n    obtainMasterConnection(): Promise<any> {\r\n        return new Promise<any>((ok, fail) => {\r\n            if (this.poolCluster) {\r\n                this.poolCluster.getConnection(\"MASTER\", (err: any, dbConnection: any) => {\r\n                    err ? fail(err) : ok(this.prepareDbConnection(dbConnection));\r\n                });\r\n\r\n            } else if (this.pool) {\r\n                this.pool.getConnection((err: any, dbConnection: any) => {\r\n                    err ? fail(err) : ok(this.prepareDbConnection(dbConnection));\r\n                });\r\n            } else {\r\n                fail(new Error(`Connection is not established with mysql database`));\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Obtains a new database connection to a slave server.\r\n     * Used for replication.\r\n     * If replication is not setup then returns master (default) connection's database connection.\r\n     */\r\n    obtainSlaveConnection(): Promise<any> {\r\n        if (!this.poolCluster)\r\n            return this.obtainMasterConnection();\r\n\r\n        return new Promise<any>((ok, fail) => {\r\n            this.poolCluster.getConnection(\"SLAVE*\", (err: any, dbConnection: any) => {\r\n                err ? fail(err) : ok(dbConnection);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates generated map of values generated or returned by database after INSERT query.\r\n     */\r\n    createGeneratedMap(metadata: EntityMetadata, insertResult: any) {\r\n        const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {\r\n            let value: any;\r\n            if (generatedColumn.generationStrategy === \"increment\" && insertResult.insertId) {\r\n                value = insertResult.insertId;\r\n            // } else if (generatedColumn.generationStrategy === \"uuid\") {\r\n            //     console.log(\"getting db value:\", generatedColumn.databaseName);\r\n            //     value = generatedColumn.getEntityValue(uuidMap);\r\n            }\r\n\r\n            return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\r\n        }, {} as ObjectLiteral);\r\n\r\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\r\n    }\r\n\r\n    /**\r\n     * Differentiate columns of this table and columns from the given column metadatas columns\r\n     * and returns only changed.\r\n     */\r\n    findChangedColumns(tableColumns: TableColumn[], columnMetadatas: ColumnMetadata[]): ColumnMetadata[] {\r\n        return columnMetadatas.filter(columnMetadata => {\r\n            const tableColumn = tableColumns.find(c => c.name === columnMetadata.databaseName);\r\n            if (!tableColumn)\r\n                return false; // we don't need new columns, we only need exist and changed\r\n\r\n            // console.log(\"table:\", columnMetadata.entityMetadata.tableName);\r\n            // console.log(\"name:\", tableColumn.name, columnMetadata.databaseName);\r\n            // console.log(\"type:\", tableColumn.type, this.normalizeType(columnMetadata));\r\n            // console.log(\"length:\", tableColumn.length, columnMetadata.length);\r\n            // console.log(\"width:\", tableColumn.width, columnMetadata.width);\r\n            // console.log(\"precision:\", tableColumn.precision, columnMetadata.precision);\r\n            // console.log(\"scale:\", tableColumn.scale, columnMetadata.scale);\r\n            // console.log(\"zerofill:\", tableColumn.zerofill, columnMetadata.zerofill);\r\n            // console.log(\"unsigned:\", tableColumn.unsigned, columnMetadata.unsigned);\r\n            // console.log(\"asExpression:\", tableColumn.asExpression, columnMetadata.asExpression);\r\n            // console.log(\"generatedType:\", tableColumn.generatedType, columnMetadata.generatedType);\r\n            // console.log(\"comment:\", tableColumn.comment, columnMetadata.comment);\r\n            // console.log(\"default:\", tableColumn.default, columnMetadata.default);\r\n            // console.log(\"default changed:\", !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default));\r\n            // console.log(\"onUpdate:\", tableColumn.onUpdate, columnMetadata.onUpdate);\r\n            // console.log(\"isPrimary:\", tableColumn.isPrimary, columnMetadata.isPrimary);\r\n            // console.log(\"isNullable:\", tableColumn.isNullable, columnMetadata.isNullable);\r\n            // console.log(\"isUnique:\", tableColumn.isUnique, this.normalizeIsUnique(columnMetadata));\r\n            // console.log(\"isGenerated:\", tableColumn.isGenerated, columnMetadata.isGenerated);\r\n            // console.log(\"==========================================\");\r\n\r\n            return tableColumn.name !== columnMetadata.databaseName\r\n                || tableColumn.type !== this.normalizeType(columnMetadata)\r\n                || tableColumn.length !== columnMetadata.length\r\n                || tableColumn.width !== columnMetadata.width\r\n                || tableColumn.precision !== columnMetadata.precision\r\n                || tableColumn.scale !== columnMetadata.scale\r\n                || tableColumn.zerofill !== columnMetadata.zerofill\r\n                || tableColumn.unsigned !== columnMetadata.unsigned\r\n                || tableColumn.asExpression !== columnMetadata.asExpression\r\n                || tableColumn.generatedType !== columnMetadata.generatedType\r\n                // || tableColumn.comment !== columnMetadata.comment // todo\r\n                || !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default)\r\n                || tableColumn.onUpdate !== columnMetadata.onUpdate\r\n                || tableColumn.isPrimary !== columnMetadata.isPrimary\r\n                || tableColumn.isNullable !== columnMetadata.isNullable\r\n                || tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata)\r\n                || (columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns true if driver supports RETURNING / OUTPUT statement.\r\n     */\r\n    isReturningSqlSupported(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if driver supports uuid values generation on its own.\r\n     */\r\n    isUUIDGenerationSupported(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Creates an escaped parameter.\r\n     */\r\n    createParameter(parameterName: string, index: number): string {\r\n        return \"?\";\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Loads all driver dependencies.\r\n     */\r\n    protected loadDependencies(): void {\r\n        try {\r\n            this.mysql = PlatformTools.load(\"mysql\");  // try to load first supported package\r\n            /*\r\n             * Some frameworks (such as Jest) may mess up Node's require cache and provide garbage for the 'mysql' module\r\n             * if it was not installed. We check that the object we got actually contains something otherwise we treat\r\n             * it as if the `require` call failed.\r\n             *\r\n             * @see https://github.com/typeorm/typeorm/issues/1373\r\n             */\r\n            if (Object.keys(this.mysql).length === 0) {\r\n                throw new Error(\"'mysql' was found but it is empty. Falling back to 'mysql2'.\");\r\n            }\r\n        } catch (e) {\r\n            try {\r\n                this.mysql = PlatformTools.load(\"mysql2\"); // try to load second supported package\r\n\r\n            } catch (e) {\r\n                throw new DriverPackageNotInstalledError(\"Mysql\", \"mysql\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new connection pool for a given database credentials.\r\n     */\r\n    protected createConnectionOptions(options: MysqlConnectionOptions, credentials: MysqlConnectionCredentialsOptions): Promise<any> {\r\n\r\n        credentials = Object.assign(credentials, DriverUtils.buildDriverOptions(credentials)); // todo: do it better way\r\n\r\n        // build connection options for the driver\r\n        return Object.assign({}, {\r\n            charset: options.charset,\r\n            timezone: options.timezone,\r\n            connectTimeout: options.connectTimeout,\r\n            insecureAuth: options.insecureAuth,\r\n            supportBigNumbers: options.supportBigNumbers !== undefined ? options.supportBigNumbers : true,\r\n            bigNumberStrings: options.bigNumberStrings !== undefined ? options.bigNumberStrings : true,\r\n            dateStrings: options.dateStrings,\r\n            debug: options.debug,\r\n            trace: options.trace,\r\n            multipleStatements: options.multipleStatements,\r\n            flags: options.flags\r\n        }, {\r\n            host: credentials.host,\r\n            user: credentials.username,\r\n            password: credentials.password,\r\n            database: credentials.database,\r\n            port: credentials.port,\r\n            ssl: options.ssl\r\n        }, options.extra || {});\r\n    }\r\n\r\n    /**\r\n     * Creates a new connection pool for a given database credentials.\r\n     */\r\n    protected createPool(connectionOptions: any): Promise<any> {\r\n\r\n        // create a connection pool\r\n        const pool = this.mysql.createPool(connectionOptions);\r\n\r\n        // make sure connection is working fine\r\n        return new Promise<void>((ok, fail) => {\r\n            // (issue #610) we make first connection to database to make sure if connection credentials are wrong\r\n            // we give error before calling any other method that creates actual query runner\r\n            pool.getConnection((err: any, connection: any) => {\r\n                if (err)\r\n                    return pool.end(() => fail(err));\r\n\r\n                connection.release();\r\n                ok(pool);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Attaches all required base handlers to a database connection, such as the unhandled error handler.\r\n     */\r\n    private prepareDbConnection(connection: any): any {\r\n        const { logger } = this.connection;\r\n        /*\r\n          Attaching an error handler to connection errors is essential, as, otherwise, errors raised will go unhandled and\r\n          cause the hosting app to crash.\r\n         */\r\n        if (connection.listeners(\"error\").length === 0) {\r\n            connection.on(\"error\", (error: any) => logger.log(\"warn\", `MySQL connection raised an error. ${error}`));\r\n        }\r\n        return connection;\r\n    }\r\n\r\n    /**\r\n     * Checks if \"DEFAULT\" values in the column metadata and in the database are equal.\r\n     */\r\n    protected compareDefaultValues(columnMetadataValue: string, databaseValue: string): boolean {\r\n        if (typeof columnMetadataValue === \"string\" && typeof databaseValue === \"string\") {\r\n            // we need to cut out \"'\" because in mysql we can understand returned value is a string or a function\r\n            // as result compare cannot understand if default is really changed or not\r\n            columnMetadataValue = columnMetadataValue.replace(/^'+|'+$/g, \"\");\r\n            databaseValue = databaseValue.replace(/^'+|'+$/g, \"\");\r\n        }\r\n\r\n        return columnMetadataValue === databaseValue;\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"../.."}