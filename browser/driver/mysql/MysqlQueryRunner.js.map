{"version":3,"sources":["../browser/src/driver/mysql/MysqlQueryRunner.ts"],"names":[],"mappings":"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","file":"MysqlQueryRunner.js","sourcesContent":["import {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\r\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\r\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\r\nimport {Table} from \"../../schema-builder/table/Table\";\r\nimport {TableForeignKey} from \"../../schema-builder/table/TableForeignKey\";\r\nimport {TableIndex} from \"../../schema-builder/table/TableIndex\";\r\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\r\nimport {MysqlDriver} from \"./MysqlDriver\";\r\nimport {ReadStream} from \"../../platform/PlatformTools\";\r\nimport {OrmUtils} from \"../../util/OrmUtils\";\r\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\r\nimport {TableIndexOptions} from \"../../schema-builder/options/TableIndexOptions\";\r\nimport {TableUnique} from \"../../schema-builder/table/TableUnique\";\r\nimport {BaseQueryRunner} from \"../../query-runner/BaseQueryRunner\";\r\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\r\nimport {ColumnType, PromiseUtils} from \"../../index\";\r\nimport {TableCheck} from \"../../schema-builder/table/TableCheck\";\r\nimport {IsolationLevel} from \"../types/IsolationLevel\";\r\n\r\n/**\r\n * Runs queries on a single mysql database connection.\r\n */\r\nexport class MysqlQueryRunner extends BaseQueryRunner implements QueryRunner {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Database driver used by connection.\r\n     */\r\n    driver: MysqlDriver;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Promise used to obtain a database connection from a pool for a first time.\r\n     */\r\n    protected databaseConnectionPromise: Promise<any>;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(driver: MysqlDriver, mode: \"master\"|\"slave\" = \"master\") {\r\n        super();\r\n        this.driver = driver;\r\n        this.connection = driver.connection;\r\n        this.broadcaster = new Broadcaster(this);\r\n        this.mode = mode;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates/uses database connection from the connection pool to perform further operations.\r\n     * Returns obtained database connection.\r\n     */\r\n    connect(): Promise<any> {\r\n        if (this.databaseConnection)\r\n            return Promise.resolve(this.databaseConnection);\r\n\r\n        if (this.databaseConnectionPromise)\r\n            return this.databaseConnectionPromise;\r\n\r\n        if (this.mode === \"slave\" && this.driver.isReplicated) {\r\n\r\n            this.databaseConnectionPromise = this.driver.obtainSlaveConnection().then(connection => {\r\n                this.databaseConnection = connection;\r\n                return this.databaseConnection;\r\n            });\r\n\r\n        } else { // master\r\n            this.databaseConnectionPromise = this.driver.obtainMasterConnection().then(connection => {\r\n                this.databaseConnection = connection;\r\n                return this.databaseConnection;\r\n            });\r\n        }\r\n\r\n        return this.databaseConnectionPromise;\r\n    }\r\n\r\n    /**\r\n     * Releases used database connection.\r\n     * You cannot use query runner methods once its released.\r\n     */\r\n    release(): Promise<void> {\r\n        this.isReleased = true;\r\n        if (this.databaseConnection)\r\n            this.databaseConnection.release();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Starts transaction on the current connection.\r\n     */\r\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\r\n        if (this.isTransactionActive)\r\n            throw new TransactionAlreadyStartedError();\r\n\r\n        this.isTransactionActive = true;\r\n        await this.query(\"START TRANSACTION\");\r\n        if (isolationLevel) {\r\n            await this.query(\"SET SESSION TRANSACTION ISOLATION LEVEL \" + isolationLevel);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        if (!this.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.query(\"COMMIT\");\r\n        this.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        if (!this.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        await this.query(\"ROLLBACK\");\r\n        this.isTransactionActive = false;\r\n    }\r\n\r\n    /**\r\n     * Executes a raw SQL query.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return new Promise(async (ok, fail) => {\r\n            try {\r\n                const databaseConnection = await this.connect();\r\n                this.driver.connection.logger.logQuery(query, parameters, this);\r\n                const queryStartTime = +new Date();\r\n                databaseConnection.query(query, parameters, (err: any, result: any) => {\r\n\r\n                    // log slow queries if maxQueryExecution time is set\r\n                    const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\r\n                    const queryEndTime = +new Date();\r\n                    const queryExecutionTime = queryEndTime - queryStartTime;\r\n                    if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\r\n                        this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\r\n\r\n                    if (err) {\r\n                        this.driver.connection.logger.logQueryError(err, query, parameters, this);\r\n                        return fail(new QueryFailedError(query, parameters, err));\r\n                    }\r\n\r\n                    ok(result);\r\n                });\r\n\r\n            } catch (err) {\r\n                fail(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns raw data stream.\r\n     */\r\n    stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return new Promise(async (ok, fail) => {\r\n            try {\r\n                const databaseConnection = await this.connect();\r\n                this.driver.connection.logger.logQuery(query, parameters, this);\r\n                const stream = databaseConnection.query(query, parameters);\r\n                if (onEnd) stream.on(\"end\", onEnd);\r\n                if (onError) stream.on(\"error\", onError);\r\n                ok(stream);\r\n\r\n            } catch (err) {\r\n                fail(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns all available database names including system databases.\r\n     */\r\n    async getDatabases(): Promise<string[]> {\r\n        return Promise.resolve([]);\r\n    }\r\n\r\n    /**\r\n     * Returns all available schema names including system schemas.\r\n     * If database parameter specified, returns schemas of that database.\r\n     */\r\n    async getSchemas(database?: string): Promise<string[]> {\r\n        throw new Error(`MySql driver does not support table schemas`);\r\n    }\r\n\r\n    /**\r\n     * Checks if database with the given name exist.\r\n     */\r\n    async hasDatabase(database: string): Promise<boolean> {\r\n        const result = await this.query(`SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`SCHEMATA\\` WHERE \\`SCHEMA_NAME\\` = '${database}'`);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Checks if schema with the given name exist.\r\n     */\r\n    async hasSchema(schema: string): Promise<boolean> {\r\n        throw new Error(`MySql driver does not support table schemas`);\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(tableOrName: Table|string): Promise<boolean> {\r\n        const parsedTableName = this.parseTableName(tableOrName);\r\n        const sql = `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`COLUMNS\\` WHERE \\`TABLE_SCHEMA\\` = '${parsedTableName.database}' AND \\`TABLE_NAME\\` = '${parsedTableName.tableName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    async hasColumn(tableOrName: Table|string, column: TableColumn|string): Promise<boolean> {\r\n        const parsedTableName = this.parseTableName(tableOrName);\r\n        const columnName = column instanceof TableColumn ? column.name : column;\r\n        const sql = `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`COLUMNS\\` WHERE \\`TABLE_SCHEMA\\` = '${parsedTableName.database}' AND \\`TABLE_NAME\\` = '${parsedTableName.tableName}' AND \\`COLUMN_NAME\\` = '${columnName}'`;\r\n        const result = await this.query(sql);\r\n        return result.length ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Creates a new database.\r\n     */\r\n    async createDatabase(database: string, ifNotExist?: boolean): Promise<void> {\r\n        const up = ifNotExist ? `CREATE DATABASE IF NOT EXISTS \\`${database}\\`` : `CREATE DATABASE \\`${database}\\``;\r\n        const down = `DROP DATABASE \\`${database}\\``;\r\n        await this.executeQueries(up, down);\r\n    }\r\n\r\n    /**\r\n     * Drops database.\r\n     */\r\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\r\n        const up = ifExist ? `DROP DATABASE IF EXISTS \\`${database}\\`` : `DROP DATABASE \\`${database}\\``;\r\n        const down = `CREATE DATABASE \\`${database}\\``;\r\n        await this.executeQueries(up, down);\r\n    }\r\n\r\n    /**\r\n     * Creates a new table schema.\r\n     */\r\n    async createSchema(schema: string, ifNotExist?: boolean): Promise<void> {\r\n        throw new Error(`Schema create queries are not supported by MySql driver.`);\r\n    }\r\n\r\n    /**\r\n     * Drops table schema.\r\n     */\r\n    async dropSchema(schemaPath: string, ifExist?: boolean): Promise<void> {\r\n        throw new Error(`Schema drop queries are not supported by MySql driver.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new table.\r\n     */\r\n    async createTable(table: Table, ifNotExist: boolean = false, createForeignKeys: boolean = true): Promise<void> {\r\n        if (ifNotExist) {\r\n            const isTableExist = await this.hasTable(table);\r\n            if (isTableExist) return Promise.resolve();\r\n        }\r\n        const upQueries: string[] = [];\r\n        const downQueries: string[] = [];\r\n\r\n        upQueries.push(this.createTableSql(table, createForeignKeys));\r\n        downQueries.push(this.dropTableSql(table));\r\n\r\n        // we must first drop indices, than drop foreign keys, because drop queries runs in reversed order\r\n        // and foreign keys will be dropped first as indices. This order is very important, because we can't drop index\r\n        // if it related to the foreign key.\r\n\r\n        // createTable does not need separate method to create indices, because it create indices in the same query with table creation.\r\n        table.indices.forEach(index => downQueries.push(this.dropIndexSql(table, index)));\r\n\r\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\r\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\r\n        if (createForeignKeys)\r\n            table.foreignKeys.forEach(foreignKey => downQueries.push(this.dropForeignKeySql(table, foreignKey)));\r\n\r\n        return this.executeQueries(upQueries, downQueries);\r\n    }\r\n\r\n    /**\r\n     * Drop the table.\r\n     */\r\n    async dropTable(target: Table|string, ifExist?: boolean, dropForeignKeys: boolean = true): Promise<void> {\r\n        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\r\n        // to perform drop queries for foreign keys and indices.\r\n        if (ifExist) {\r\n            const isTableExist = await this.hasTable(target);\r\n            if (!isTableExist) return Promise.resolve();\r\n        }\r\n\r\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\r\n        const createForeignKeys: boolean = dropForeignKeys;\r\n        const tableName = target instanceof Table ? target.name : target;\r\n        const table = await this.getCachedTable(tableName);\r\n        const upQueries: string[] = [];\r\n        const downQueries: string[] = [];\r\n\r\n        if (dropForeignKeys)\r\n            table.foreignKeys.forEach(foreignKey => upQueries.push(this.dropForeignKeySql(table, foreignKey)));\r\n\r\n        table.indices.forEach(index => upQueries.push(this.dropIndexSql(table, index)));\r\n\r\n        upQueries.push(this.dropTableSql(table));\r\n        downQueries.push(this.createTableSql(table, createForeignKeys));\r\n\r\n        await this.executeQueries(upQueries, downQueries);\r\n    }\r\n\r\n    /**\r\n     * Renames a table.\r\n     */\r\n    async renameTable(oldTableOrName: Table|string, newTableName: string): Promise<void> {\r\n        const upQueries: string[] = [];\r\n        const downQueries: string[] = [];\r\n        const oldTable = oldTableOrName instanceof Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);\r\n        const newTable = oldTable.clone();\r\n        const dbName = oldTable.name.indexOf(\".\") === -1 ? undefined : oldTable.name.split(\".\")[0];\r\n        newTable.name = dbName ? `${dbName}.${newTableName}` : newTableName;\r\n\r\n        // rename table\r\n        upQueries.push(`RENAME TABLE ${this.escapeTableName(oldTable.name)} TO ${this.escapeTableName(newTable.name)}`);\r\n        downQueries.push(`RENAME TABLE ${this.escapeTableName(newTable.name)} TO ${this.escapeTableName(oldTable.name)}`);\r\n\r\n        // rename index constraints\r\n        newTable.indices.forEach(index => {\r\n            // build new constraint name\r\n            const columnNames = index.columnNames.map(column => `\\`${column}\\``).join(\", \");\r\n            const newIndexName = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\r\n\r\n            // build queries\r\n            let indexType = \"\";\r\n            if (index.isUnique)\r\n                indexType += \"UNIQUE \";\r\n            if (index.isSpatial)\r\n                indexType += \"SPATIAL \";\r\n            if (index.isFulltext)\r\n                indexType += \"FULLTEXT \";\r\n            upQueries.push(`ALTER TABLE ${this.escapeTableName(newTable)} DROP INDEX \\`${index.name}\\`, ADD ${indexType}INDEX \\`${newIndexName}\\` (${columnNames})`);\r\n            downQueries.push(`ALTER TABLE ${this.escapeTableName(newTable)} DROP INDEX \\`${newIndexName}\\`, ADD ${indexType}INDEX \\`${index.name}\\` (${columnNames})`);\r\n\r\n            // replace constraint name\r\n            index.name = newIndexName;\r\n        });\r\n\r\n        // rename foreign key constraint\r\n        newTable.foreignKeys.forEach(foreignKey => {\r\n            // build new constraint name\r\n            const columnNames = foreignKey.columnNames.map(column => `\\`${column}\\``).join(\", \");\r\n            const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\\`${column}\\``).join(\",\");\r\n            const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames);\r\n\r\n            // build queries\r\n            let up = `ALTER TABLE ${this.escapeTableName(newTable)} DROP FOREIGN KEY \\`${foreignKey.name}\\`, ADD CONSTRAINT \\`${newForeignKeyName}\\` FOREIGN KEY (${columnNames}) ` +\r\n                `REFERENCES ${this.escapeTableName(foreignKey.referencedTableName)}(${referencedColumnNames})`;\r\n            if (foreignKey.onDelete)\r\n                up += ` ON DELETE ${foreignKey.onDelete}`;\r\n            if (foreignKey.onUpdate)\r\n                up += ` ON UPDATE ${foreignKey.onUpdate}`;\r\n\r\n            let down = `ALTER TABLE ${this.escapeTableName(newTable)} DROP FOREIGN KEY \\`${newForeignKeyName}\\`, ADD CONSTRAINT \\`${foreignKey.name}\\` FOREIGN KEY (${columnNames}) ` +\r\n                `REFERENCES ${this.escapeTableName(foreignKey.referencedTableName)}(${referencedColumnNames})`;\r\n            if (foreignKey.onDelete)\r\n                down += ` ON DELETE ${foreignKey.onDelete}`;\r\n            if (foreignKey.onUpdate)\r\n                down += ` ON UPDATE ${foreignKey.onUpdate}`;\r\n\r\n            upQueries.push(up);\r\n            downQueries.push(down);\r\n\r\n            // replace constraint name\r\n            foreignKey.name = newForeignKeyName;\r\n        });\r\n\r\n        await this.executeQueries(upQueries, downQueries);\r\n\r\n        // rename old table and replace it in cached tabled;\r\n        oldTable.name = newTable.name;\r\n        this.replaceCachedTable(oldTable, newTable);\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column in the table.\r\n     */\r\n    async addColumn(tableOrName: Table|string, column: TableColumn): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const clonedTable = table.clone();\r\n        const upQueries: string[] = [];\r\n        const downQueries: string[] = [];\r\n        const skipColumnLevelPrimary = clonedTable.primaryColumns.length > 0;\r\n\r\n        upQueries.push(`ALTER TABLE ${this.escapeTableName(table)} ADD ${this.buildCreateColumnSql(column, skipColumnLevelPrimary, false)}`);\r\n        downQueries.push(`ALTER TABLE ${this.escapeTableName(table)} DROP COLUMN \\`${column.name}\\``);\r\n\r\n        // create or update primary key constraint\r\n        if (column.isPrimary && skipColumnLevelPrimary) {\r\n            // if we already have generated column, we must temporary drop AUTO_INCREMENT property.\r\n            const generatedColumn = clonedTable.columns.find(column => column.isGenerated && column.generationStrategy === \"increment\");\r\n            if (generatedColumn) {\r\n                const nonGeneratedColumn = generatedColumn.clone();\r\n                nonGeneratedColumn.isGenerated = false;\r\n                nonGeneratedColumn.generationStrategy = undefined;\r\n                upQueries.push(`ALTER TABLE ${this.escapeTableName(table)} CHANGE \\`${column.name}\\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`);\r\n                downQueries.push(`ALTER TABLE ${this.escapeTableName(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${this.buildCreateColumnSql(column, true)}`);\r\n            }\r\n\r\n            const primaryColumns = clonedTable.primaryColumns;\r\n            let columnNames = primaryColumns.map(column => `\\`${column.name}\\``).join(\", \");\r\n            upQueries.push(`ALTER TABLE ${this.escapeTableName(table)} DROP PRIMARY KEY`);\r\n            downQueries.push(`ALTER TABLE ${this.escapeTableName(table)} ADD PRIMARY KEY (${columnNames})`);\r\n\r\n            primaryColumns.push(column);\r\n            columnNames = primaryColumns.map(column => `\\`${column.name}\\``).join(\", \");\r\n            upQueries.push(`ALTER TABLE ${this.escapeTableName(table)} ADD PRIMARY KEY (${columnNames})`);\r\n            downQueries.push(`ALTER TABLE ${this.escapeTableName(table)} DROP PRIMARY KEY`);\r\n\r\n            // if we previously dropped AUTO_INCREMENT property, we must bring it back\r\n            if (generatedColumn) {\r\n                const nonGeneratedColumn = generatedColumn.clone();\r\n                nonGeneratedColumn.isGenerated = false;\r\n                nonGeneratedColumn.generationStrategy = undefined;\r\n                upQueries.push(`ALTER TABLE ${this.escapeTableName(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${this.buildCreateColumnSql(column, true)}`);\r\n                downQueries.push(`ALTER TABLE ${this.escapeTableName(table)} CHANGE \\`${column.name}\\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`);\r\n            }\r\n        }\r\n\r\n        // create column index\r\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\r\n        if (columnIndex) {\r\n            upQueries.push(this.createIndexSql(table, columnIndex));\r\n            downQueries.push(this.dropIndexSql(table, columnIndex));\r\n\r\n        } else if (column.isUnique) {\r\n            const uniqueIndex = new TableIndex({\r\n                name: this.connection.namingStrategy.indexName(table.name, [column.name]),\r\n                columnNames: [column.name],\r\n                isUnique: true\r\n            });\r\n            clonedTable.indices.push(uniqueIndex);\r\n            clonedTable.uniques.push(new TableUnique({\r\n                name: uniqueIndex.name,\r\n                columnNames: uniqueIndex.columnNames\r\n            }));\r\n            upQueries.push(`ALTER TABLE ${this.escapeTableName(table)} ADD UNIQUE INDEX \\`${uniqueIndex.name}\\` (\\`${column.name}\\`)`);\r\n            downQueries.push(`ALTER TABLE ${this.escapeTableName(table)} DROP INDEX \\`${uniqueIndex.name}\\``);\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries);\r\n\r\n        clonedTable.addColumn(column);\r\n        this.replaceCachedTable(table, clonedTable);\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column in the table.\r\n     */\r\n    async addColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\r\n        await PromiseUtils.runInSequence(columns, column => this.addColumn(tableOrName, column));\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newTableColumnOrName: TableColumn|string): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\r\n\r\n        let newColumn: TableColumn|undefined = undefined;\r\n        if (newTableColumnOrName instanceof TableColumn) {\r\n            newColumn = newTableColumnOrName;\r\n        } else {\r\n            newColumn = oldColumn.clone();\r\n            newColumn.name = newTableColumnOrName;\r\n        }\r\n\r\n        await this.changeColumn(table, oldColumn, newColumn);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(tableOrName: Table|string, oldColumnOrName: TableColumn|string, newColumn: TableColumn): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        let clonedTable = table.clone();\r\n        const upQueries: string[] = [];\r\n        const downQueries: string[] = [];\r\n\r\n        const oldColumn = oldColumnOrName instanceof TableColumn\r\n            ? oldColumnOrName\r\n            : table.columns.find(column => column.name === oldColumnOrName);\r\n        if (!oldColumn)\r\n            throw new Error(`Column \"${oldColumnOrName}\" was not found in the \"${table.name}\" table.`);\r\n\r\n        if ((newColumn.isGenerated !== oldColumn.isGenerated && newColumn.generationStrategy !== \"uuid\")\r\n            || oldColumn.type !== newColumn.type\r\n            || oldColumn.length !== newColumn.length\r\n            || oldColumn.generatedType !== newColumn.generatedType) {\r\n            await this.dropColumn(table, oldColumn);\r\n            await this.addColumn(table, newColumn);\r\n\r\n            // update cloned table\r\n            clonedTable = table.clone();\r\n\r\n        } else {\r\n            if (newColumn.name !== oldColumn.name) {\r\n                // We don't change any column properties, just rename it.\r\n                upQueries.push(`ALTER TABLE ${this.escapeTableName(table)} CHANGE \\`${oldColumn.name}\\` \\`${newColumn.name}\\` ${this.buildCreateColumnSql(oldColumn, true, true)}`);\r\n                downQueries.push(`ALTER TABLE ${this.escapeTableName(table)} CHANGE \\`${newColumn.name}\\` \\`${oldColumn.name}\\` ${this.buildCreateColumnSql(oldColumn, true, true)}`);\r\n\r\n                // rename index constraints\r\n                clonedTable.findColumnIndices(oldColumn).forEach(index => {\r\n                    // build new constraint name\r\n                    index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\r\n                    index.columnNames.push(newColumn.name);\r\n                    const columnNames = index.columnNames.map(column => `\\`${column}\\``).join(\", \");\r\n                    const newIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);\r\n\r\n                    // build queries\r\n                    let indexType = \"\";\r\n                    if (index.isUnique)\r\n                        indexType += \"UNIQUE \";\r\n                    if (index.isSpatial)\r\n                        indexType += \"SPATIAL \";\r\n                    if (index.isFulltext)\r\n                        indexType += \"FULLTEXT \";\r\n                    upQueries.push(`ALTER TABLE ${this.escapeTableName(table)} DROP INDEX \\`${index.name}\\`, ADD ${indexType}INDEX \\`${newIndexName}\\` (${columnNames})`);\r\n                    downQueries.push(`ALTER TABLE ${this.escapeTableName(table)} DROP INDEX \\`${newIndexName}\\`, ADD ${indexType}INDEX \\`${index.name}\\` (${columnNames})`);\r\n\r\n                    // replace constraint name\r\n                    index.name = newIndexName;\r\n                });\r\n\r\n                // rename foreign key constraints\r\n                clonedTable.findColumnForeignKeys(oldColumn).forEach(foreignKey => {\r\n                    // build new constraint name\r\n                    foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\r\n                    foreignKey.columnNames.push(newColumn.name);\r\n                    const columnNames = foreignKey.columnNames.map(column => `\\`${column}\\``).join(\", \");\r\n                    const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\\`${column}\\``).join(\",\");\r\n                    const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames);\r\n\r\n                    // build queries\r\n                    let up = `ALTER TABLE ${this.escapeTableName(table)} DROP FOREIGN KEY \\`${foreignKey.name}\\`, ADD CONSTRAINT \\`${newForeignKeyName}\\` FOREIGN KEY (${columnNames}) ` +\r\n                        `REFERENCES ${this.escapeTableName(foreignKey.referencedTableName)}(${referencedColumnNames})`;\r\n                    if (foreignKey.onDelete)\r\n                        up += ` ON DELETE ${foreignKey.onDelete}`;\r\n                    if (foreignKey.onUpdate)\r\n                        up += ` ON UPDATE ${foreignKey.onUpdate}`;\r\n\r\n                    let down = `ALTER TABLE ${this.escapeTableName(table)} DROP FOREIGN KEY \\`${newForeignKeyName}\\`, ADD CONSTRAINT \\`${foreignKey.name}\\` FOREIGN KEY (${columnNames}) ` +\r\n                        `REFERENCES ${this.escapeTableName(foreignKey.referencedTableName)}(${referencedColumnNames})`;\r\n                    if (foreignKey.onDelete)\r\n                        down += ` ON DELETE ${foreignKey.onDelete}`;\r\n                    if (foreignKey.onUpdate)\r\n                        down += ` ON UPDATE ${foreignKey.onUpdate}`;\r\n\r\n                    upQueries.push(up);\r\n                    downQueries.push(down);\r\n\r\n                    // replace constraint name\r\n                    foreignKey.name = newForeignKeyName;\r\n                });\r\n\r\n                // rename old column in the Table object\r\n                const oldTableColumn = clonedTable.columns.find(column => column.name === oldColumn.name);\r\n                clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn!)].name = newColumn.name;\r\n                oldColumn.name = newColumn.name;\r\n            }\r\n\r\n            if (this.isColumnChanged(oldColumn, newColumn, true)) {\r\n                upQueries.push(`ALTER TABLE ${this.escapeTableName(table)} CHANGE \\`${oldColumn.name}\\` ${this.buildCreateColumnSql(newColumn, true)}`);\r\n                downQueries.push(`ALTER TABLE ${this.escapeTableName(table)} CHANGE \\`${newColumn.name}\\` ${this.buildCreateColumnSql(oldColumn, true)}`);\r\n            }\r\n\r\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\r\n                // if table have generated column, we must drop AUTO_INCREMENT before changing primary constraints.\r\n                const generatedColumn = clonedTable.columns.find(column => column.isGenerated && column.generationStrategy === \"increment\");\r\n                if (generatedColumn) {\r\n                    const nonGeneratedColumn = generatedColumn.clone();\r\n                    nonGeneratedColumn.isGenerated = false;\r\n                    nonGeneratedColumn.generationStrategy = undefined;\r\n\r\n                    upQueries.push(`ALTER TABLE ${this.escapeTableName(table)} CHANGE \\`${generatedColumn.name}\\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`);\r\n                    downQueries.push(`ALTER TABLE ${this.escapeTableName(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${this.buildCreateColumnSql(generatedColumn, true)}`);\r\n                }\r\n\r\n                const primaryColumns = clonedTable.primaryColumns;\r\n\r\n                // if primary column state changed, we must always drop existed constraint.\r\n                if (primaryColumns.length > 0) {\r\n                    const columnNames = primaryColumns.map(column => `\\`${column.name}\\``).join(\", \");\r\n                    upQueries.push(`ALTER TABLE ${this.escapeTableName(table)} DROP PRIMARY KEY`);\r\n                    downQueries.push(`ALTER TABLE ${this.escapeTableName(table)} ADD PRIMARY KEY (${columnNames})`);\r\n                }\r\n\r\n                if (newColumn.isPrimary === true) {\r\n                    primaryColumns.push(newColumn);\r\n                    // update column in table\r\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\r\n                    column!.isPrimary = true;\r\n                    const columnNames = primaryColumns.map(column => `\\`${column.name}\\``).join(\", \");\r\n                    upQueries.push(`ALTER TABLE ${this.escapeTableName(table)} ADD PRIMARY KEY (${columnNames})`);\r\n                    downQueries.push(`ALTER TABLE ${this.escapeTableName(table)} DROP PRIMARY KEY`);\r\n\r\n                } else {\r\n                    const primaryColumn = primaryColumns.find(c => c.name === newColumn.name);\r\n                    primaryColumns.splice(primaryColumns.indexOf(primaryColumn!), 1);\r\n                    // update column in table\r\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\r\n                    column!.isPrimary = false;\r\n\r\n                    // if we have another primary keys, we must recreate constraint.\r\n                    if (primaryColumns.length > 0) {\r\n                        const columnNames = primaryColumns.map(column => `\\`${column.name}\\``).join(\", \");\r\n                        upQueries.push(`ALTER TABLE ${this.escapeTableName(table)} ADD PRIMARY KEY (${columnNames})`);\r\n                        downQueries.push(`ALTER TABLE ${this.escapeTableName(table)} DROP PRIMARY KEY`);\r\n                    }\r\n                }\r\n\r\n                // if we have generated column, and we dropped AUTO_INCREMENT property before, we must bring it back\r\n                if (generatedColumn) {\r\n                    const nonGeneratedColumn = generatedColumn.clone();\r\n                    nonGeneratedColumn.isGenerated = false;\r\n                    nonGeneratedColumn.generationStrategy = undefined;\r\n\r\n                    upQueries.push(`ALTER TABLE ${this.escapeTableName(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${this.buildCreateColumnSql(generatedColumn, true)}`);\r\n                    downQueries.push(`ALTER TABLE ${this.escapeTableName(table)} CHANGE \\`${generatedColumn.name}\\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`);\r\n                }\r\n            }\r\n\r\n            if (newColumn.isUnique !== oldColumn.isUnique) {\r\n                if (newColumn.isUnique === true) {\r\n                    const uniqueIndex = new TableIndex({\r\n                        name: this.connection.namingStrategy.indexName(table.name, [newColumn.name]),\r\n                        columnNames: [newColumn.name],\r\n                        isUnique: true\r\n                    });\r\n                    clonedTable.indices.push(uniqueIndex);\r\n                    clonedTable.uniques.push(new TableUnique({\r\n                        name: uniqueIndex.name,\r\n                        columnNames: uniqueIndex.columnNames\r\n                    }));\r\n                    upQueries.push(`ALTER TABLE ${this.escapeTableName(table)} ADD UNIQUE INDEX \\`${uniqueIndex.name}\\` (\\`${newColumn.name}\\`)`);\r\n                    downQueries.push(`ALTER TABLE ${this.escapeTableName(table)} DROP INDEX \\`${uniqueIndex.name}\\``);\r\n\r\n                } else {\r\n                    const uniqueIndex = clonedTable.indices.find(index => {\r\n                        return index.columnNames.length === 1 && index.isUnique === true && !!index.columnNames.find(columnName => columnName === newColumn.name);\r\n                    });\r\n                    clonedTable.indices.splice(clonedTable.indices.indexOf(uniqueIndex!), 1);\r\n\r\n                    const tableUnique = clonedTable.uniques.find(unique => unique.name === uniqueIndex!.name);\r\n                    clonedTable.uniques.splice(clonedTable.uniques.indexOf(tableUnique!), 1);\r\n\r\n                    upQueries.push(`ALTER TABLE ${this.escapeTableName(table)} DROP INDEX \\`${uniqueIndex!.name}\\``);\r\n                    downQueries.push(`ALTER TABLE ${this.escapeTableName(table)} ADD UNIQUE INDEX \\`${uniqueIndex!.name}\\` (\\`${newColumn.name}\\`)`);\r\n                }\r\n            }\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries);\r\n        this.replaceCachedTable(table, clonedTable);\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumns(tableOrName: Table|string, changedColumns: { newColumn: TableColumn, oldColumn: TableColumn }[]): Promise<void> {\r\n        await PromiseUtils.runInSequence(changedColumns, changedColumn => this.changeColumn(tableOrName, changedColumn.oldColumn, changedColumn.newColumn));\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(tableOrName: Table|string, columnOrName: TableColumn|string): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\r\n        if (!column)\r\n            throw new Error(`Column \"${columnOrName}\" was not found in table \"${table.name}\"`);\r\n\r\n        const clonedTable = table.clone();\r\n        const upQueries: string[] = [];\r\n        const downQueries: string[] = [];\r\n\r\n        // drop primary key constraint\r\n        if (column.isPrimary) {\r\n            // if table have generated column, we must drop AUTO_INCREMENT before changing primary constraints.\r\n            const generatedColumn = clonedTable.columns.find(column => column.isGenerated && column.generationStrategy === \"increment\");\r\n            if (generatedColumn) {\r\n                const nonGeneratedColumn = generatedColumn.clone();\r\n                nonGeneratedColumn.isGenerated = false;\r\n                nonGeneratedColumn.generationStrategy = undefined;\r\n\r\n                upQueries.push(`ALTER TABLE ${this.escapeTableName(table)} CHANGE \\`${generatedColumn.name}\\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`);\r\n                downQueries.push(`ALTER TABLE ${this.escapeTableName(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${this.buildCreateColumnSql(generatedColumn, true)}`);\r\n            }\r\n\r\n            // dropping primary key constraint\r\n            const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\\`${primaryColumn.name}\\``).join(\", \");\r\n            upQueries.push(`ALTER TABLE ${this.escapeTableName(clonedTable)} DROP PRIMARY KEY`);\r\n            downQueries.push(`ALTER TABLE ${this.escapeTableName(clonedTable)} ADD PRIMARY KEY (${columnNames})`);\r\n\r\n            // update column in table\r\n            const tableColumn = clonedTable.findColumnByName(column.name);\r\n            tableColumn!.isPrimary = false;\r\n\r\n            // if primary key have multiple columns, we must recreate it without dropped column\r\n            if (clonedTable.primaryColumns.length > 0) {\r\n                const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\\`${primaryColumn.name}\\``).join(\", \");\r\n                upQueries.push(`ALTER TABLE ${this.escapeTableName(clonedTable)} ADD PRIMARY KEY (${columnNames})`);\r\n                downQueries.push(`ALTER TABLE ${this.escapeTableName(clonedTable)} DROP PRIMARY KEY`);\r\n            }\r\n\r\n            // if we have generated column, and we dropped AUTO_INCREMENT property before, and this column is not current dropping column, we must bring it back\r\n            if (generatedColumn && generatedColumn.name !== column.name) {\r\n                const nonGeneratedColumn = generatedColumn.clone();\r\n                nonGeneratedColumn.isGenerated = false;\r\n                nonGeneratedColumn.generationStrategy = undefined;\r\n\r\n                upQueries.push(`ALTER TABLE ${this.escapeTableName(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${this.buildCreateColumnSql(generatedColumn, true)}`);\r\n                downQueries.push(`ALTER TABLE ${this.escapeTableName(table)} CHANGE \\`${generatedColumn.name}\\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`);\r\n            }\r\n        }\r\n\r\n        // drop column index\r\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\r\n        if (columnIndex) {\r\n            clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\r\n            upQueries.push(this.dropIndexSql(table, columnIndex));\r\n            downQueries.push(this.createIndexSql(table, columnIndex));\r\n\r\n        } else if (column.isUnique) {\r\n            // we splice constraints both from table uniques and indices.\r\n            const uniqueName = this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]);\r\n            const foundUnique = clonedTable.uniques.find(unique => unique.name === uniqueName);\r\n            if (foundUnique)\r\n                clonedTable.uniques.splice(clonedTable.uniques.indexOf(foundUnique), 1);\r\n\r\n            const indexName = this.connection.namingStrategy.indexName(table.name, [column.name]);\r\n            const foundIndex = clonedTable.indices.find(index => index.name === indexName);\r\n            if (foundIndex)\r\n                clonedTable.indices.splice(clonedTable.indices.indexOf(foundIndex), 1);\r\n\r\n            upQueries.push(`ALTER TABLE ${this.escapeTableName(table)} DROP INDEX \\`${indexName}\\``);\r\n            downQueries.push(`ALTER TABLE ${this.escapeTableName(table)} ADD UNIQUE INDEX \\`${indexName}\\` (\\`${column.name}\\`)`);\r\n        }\r\n\r\n        upQueries.push(`ALTER TABLE ${this.escapeTableName(table)} DROP COLUMN \\`${column.name}\\``);\r\n        downQueries.push(`ALTER TABLE ${this.escapeTableName(table)} ADD ${this.buildCreateColumnSql(column, true)}`);\r\n\r\n        await this.executeQueries(upQueries, downQueries);\r\n\r\n        clonedTable.removeColumn(column);\r\n        this.replaceCachedTable(table, clonedTable);\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\r\n        await PromiseUtils.runInSequence(columns, column => this.dropColumn(tableOrName, column));\r\n    }\r\n\r\n    /**\r\n     * Creates a new primary key.\r\n     */\r\n    async createPrimaryKey(tableOrName: Table|string, columnNames: string[]): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const clonedTable = table.clone();\r\n\r\n        const up = this.createPrimaryKeySql(table, columnNames);\r\n        const down = this.dropPrimaryKeySql(table);\r\n\r\n        await this.executeQueries(up, down);\r\n        clonedTable.columns.forEach(column => {\r\n            if (columnNames.find(columnName => columnName === column.name))\r\n                column.isPrimary = true;\r\n        });\r\n        this.replaceCachedTable(table, clonedTable);\r\n    }\r\n\r\n    /**\r\n     * Updates composite primary keys.\r\n     */\r\n    async updatePrimaryKeys(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const clonedTable = table.clone();\r\n        const columnNames = columns.map(column => column.name);\r\n        const upQueries: string[] = [];\r\n        const downQueries: string[] = [];\r\n\r\n        // if table have generated column, we must drop AUTO_INCREMENT before changing primary constraints.\r\n        const generatedColumn = clonedTable.columns.find(column => column.isGenerated && column.generationStrategy === \"increment\");\r\n        if (generatedColumn) {\r\n            const nonGeneratedColumn = generatedColumn.clone();\r\n            nonGeneratedColumn.isGenerated = false;\r\n            nonGeneratedColumn.generationStrategy = undefined;\r\n\r\n            upQueries.push(`ALTER TABLE ${this.escapeTableName(table)} CHANGE \\`${generatedColumn.name}\\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`);\r\n            downQueries.push(`ALTER TABLE ${this.escapeTableName(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${this.buildCreateColumnSql(generatedColumn, true)}`);\r\n        }\r\n\r\n        // if table already have primary columns, we must drop them.\r\n        const primaryColumns = clonedTable.primaryColumns;\r\n        if (primaryColumns.length > 0) {\r\n            const columnNames = primaryColumns.map(column => `\\`${column.name}\\``).join(\", \");\r\n            upQueries.push(`ALTER TABLE ${this.escapeTableName(table)} DROP PRIMARY KEY`);\r\n            downQueries.push(`ALTER TABLE ${this.escapeTableName(table)} ADD PRIMARY KEY (${columnNames})`);\r\n        }\r\n\r\n        // update columns in table.\r\n        clonedTable.columns\r\n            .filter(column => columnNames.indexOf(column.name) !== -1)\r\n            .forEach(column => column.isPrimary = true);\r\n\r\n        const columnNamesString = columnNames.map(columnName => `\\`${columnName}\\``).join(\", \");\r\n        upQueries.push(`ALTER TABLE ${this.escapeTableName(table)} ADD PRIMARY KEY (${columnNamesString})`);\r\n        downQueries.push(`ALTER TABLE ${this.escapeTableName(table)} DROP PRIMARY KEY`);\r\n\r\n        // if we already have generated column or column is changed to generated, and we dropped AUTO_INCREMENT property before, we must bring it back\r\n        const newOrExistGeneratedColumn = generatedColumn ? generatedColumn : columns.find(column => column.isGenerated && column.generationStrategy === \"increment\");\r\n        if (newOrExistGeneratedColumn) {\r\n            const nonGeneratedColumn = newOrExistGeneratedColumn.clone();\r\n            nonGeneratedColumn.isGenerated = false;\r\n            nonGeneratedColumn.generationStrategy = undefined;\r\n\r\n            upQueries.push(`ALTER TABLE ${this.escapeTableName(table)} CHANGE \\`${nonGeneratedColumn.name}\\` ${this.buildCreateColumnSql(newOrExistGeneratedColumn, true)}`);\r\n            downQueries.push(`ALTER TABLE ${this.escapeTableName(table)} CHANGE \\`${newOrExistGeneratedColumn.name}\\` ${this.buildCreateColumnSql(nonGeneratedColumn, true)}`);\r\n\r\n            // if column changed to generated, we must update it in table\r\n            const changedGeneratedColumn = clonedTable.columns.find(column => column.name === newOrExistGeneratedColumn.name);\r\n            changedGeneratedColumn!.isGenerated = true;\r\n            changedGeneratedColumn!.generationStrategy = \"increment\";\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries);\r\n        this.replaceCachedTable(table, clonedTable);\r\n    }\r\n\r\n    /**\r\n     * Drops a primary key.\r\n     */\r\n    async dropPrimaryKey(tableOrName: Table|string): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const up = this.dropPrimaryKeySql(table);\r\n        const down = this.createPrimaryKeySql(table, table.primaryColumns.map(column => column.name));\r\n        await this.executeQueries(up, down);\r\n        table.primaryColumns.forEach(column => {\r\n            column.isPrimary = false;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a new unique constraint.\r\n     */\r\n    async createUniqueConstraint(tableOrName: Table|string, uniqueConstraint: TableUnique): Promise<void> {\r\n        throw new Error(`MySql does not support unique constraints. Use unique index instead.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new unique constraints.\r\n     */\r\n    async createUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\r\n        throw new Error(`MySql does not support unique constraints. Use unique index instead.`);\r\n    }\r\n\r\n    /**\r\n     * Drops an unique constraint.\r\n     */\r\n    async dropUniqueConstraint(tableOrName: Table|string, uniqueOrName: TableUnique|string): Promise<void> {\r\n        throw new Error(`MySql does not support unique constraints. Use unique index instead.`);\r\n    }\r\n\r\n    /**\r\n     * Drops an unique constraints.\r\n     */\r\n    async dropUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\r\n        throw new Error(`MySql does not support unique constraints. Use unique index instead.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new check constraint.\r\n     */\r\n    async createCheckConstraint(tableOrName: Table|string, checkConstraint: TableCheck): Promise<void> {\r\n        throw new Error(`MySql does not support check constraints.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new check constraints.\r\n     */\r\n    async createCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\r\n        throw new Error(`MySql does not support check constraints.`);\r\n    }\r\n\r\n    /**\r\n     * Drops check constraint.\r\n     */\r\n    async dropCheckConstraint(tableOrName: Table|string, checkOrName: TableCheck|string): Promise<void> {\r\n        throw new Error(`MySql does not support check constraints.`);\r\n    }\r\n\r\n    /**\r\n     * Drops check constraints.\r\n     */\r\n    async dropCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\r\n        throw new Error(`MySql does not support check constraints.`);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(tableOrName: Table|string, foreignKey: TableForeignKey): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n\r\n        // new FK may be passed without name. In this case we generate FK name manually.\r\n        if (!foreignKey.name)\r\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames);\r\n\r\n        const up = this.createForeignKeySql(table, foreignKey);\r\n        const down = this.dropForeignKeySql(table, foreignKey);\r\n        await this.executeQueries(up, down);\r\n        table.addForeignKey(foreignKey);\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\r\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableOrName, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key.\r\n     */\r\n    async dropForeignKey(tableOrName: Table|string, foreignKeyOrName: TableForeignKey|string): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const foreignKey = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);\r\n        if (!foreignKey)\r\n            throw new Error(`Supplied foreign key was not found in table ${table.name}`);\r\n\r\n        const up = this.dropForeignKeySql(table, foreignKey);\r\n        const down = this.createForeignKeySql(table, foreignKey);\r\n        await this.executeQueries(up, down);\r\n        table.removeForeignKey(foreignKey);\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\r\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableOrName, foreignKey));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(tableOrName: Table|string, index: TableIndex): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n\r\n        // new index may be passed without name. In this case we generate index name manually.\r\n        if (!index.name)\r\n            index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\r\n\r\n        const up = this.createIndexSql(table, index);\r\n        const down = this.dropIndexSql(table, index);\r\n        await this.executeQueries(up, down);\r\n        table.addIndex(index, true);\r\n    }\r\n\r\n    /**\r\n     * Creates a new indices\r\n     */\r\n    async createIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\r\n        const promises = indices.map(index => this.createIndex(tableOrName, index));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Drops an index.\r\n     */\r\n    async dropIndex(tableOrName: Table|string, indexOrName: TableIndex|string): Promise<void> {\r\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\r\n        const index = indexOrName instanceof TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);\r\n        if (!index)\r\n            throw new Error(`Supplied index was not found in table ${table.name}`);\r\n\r\n        const up = this.dropIndexSql(table, index);\r\n        const down = this.createIndexSql(table, index);\r\n        await this.executeQueries(up, down);\r\n        table.removeIndex(index, true);\r\n    }\r\n\r\n    /**\r\n     * Drops an indices from the table.\r\n     */\r\n    async dropIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\r\n        const promises = indices.map(index => this.dropIndex(tableOrName, index));\r\n        await Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Clears all table contents.\r\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\r\n     */\r\n    async clearTable(tableOrName: Table|string): Promise<void> {\r\n        await this.query(`TRUNCATE TABLE ${this.escapeTableName(tableOrName)}`);\r\n    }\r\n\r\n    /**\r\n     * Removes all tables from the currently connected database.\r\n     * Be careful using this method and avoid using it in production or migrations\r\n     * (because it can clear all your database).\r\n     */\r\n    async clearDatabase(database?: string): Promise<void> {\r\n        const dbName = database ? database : this.driver.database;\r\n        if (dbName) {\r\n            const isDatabaseExist = await this.hasDatabase(dbName);\r\n            if (!isDatabaseExist)\r\n                return Promise.resolve();\r\n        } else {\r\n            throw new Error(`Can not clear database. No database is specified`);\r\n        }\r\n\r\n        await this.startTransaction();\r\n        try {\r\n            const disableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 0;`;\r\n            const dropTablesQuery = `SELECT concat('DROP TABLE IF EXISTS \\`', table_schema, '\\`.\\`', table_name, '\\`') AS \\`query\\` FROM \\`INFORMATION_SCHEMA\\`.\\`TABLES\\` WHERE \\`TABLE_SCHEMA\\` = '${dbName}'`;\r\n            const enableForeignKeysCheckQuery = `SET FOREIGN_KEY_CHECKS = 1;`;\r\n\r\n            await this.query(disableForeignKeysCheckQuery);\r\n            const dropQueries: ObjectLiteral[] = await this.query(dropTablesQuery);\r\n            await Promise.all(dropQueries.map(query => this.query(query[\"query\"])));\r\n            await this.query(enableForeignKeysCheckQuery);\r\n\r\n            await this.commitTransaction();\r\n\r\n        } catch (error) {\r\n            try { // we throw original error even if rollback thrown an error\r\n                await this.rollbackTransaction();\r\n            } catch (rollbackError) { }\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Returns current database.\r\n     */\r\n    protected async getCurrentDatabase(): Promise<string> {\r\n        const currentDBQuery = await this.query(`SELECT DATABASE() AS \\`db_name\\``);\r\n        return currentDBQuery[0][\"db_name\"];\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a Table from them.\r\n     */\r\n    protected async loadTables(tableNames: string[]): Promise<Table[]> {\r\n\r\n        // if no tables given then no need to proceed\r\n        if (!tableNames || !tableNames.length)\r\n            return [];\r\n\r\n        const currentDatabase = await this.getCurrentDatabase();\r\n        const tablesCondition = tableNames.map(tableName => {\r\n            let [database, name] = tableName.split(\".\");\r\n            if (!name) {\r\n                name = database;\r\n                database = this.driver.database || currentDatabase;\r\n            }\r\n            return `(\\`TABLE_SCHEMA\\` = '${database}' AND \\`TABLE_NAME\\` = '${name}')`;\r\n        }).join(\" OR \");\r\n        const tablesSql = `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`TABLES\\` WHERE ` + tablesCondition;\r\n        \r\n        const columnsSql = `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`COLUMNS\\` WHERE ` + tablesCondition;\r\n\r\n        const primaryKeySql = `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`KEY_COLUMN_USAGE\\` WHERE \\`CONSTRAINT_NAME\\` = 'PRIMARY' AND (${tablesCondition})`;\r\n\r\n        const collationsSql = `SELECT \\`SCHEMA_NAME\\`, \\`DEFAULT_CHARACTER_SET_NAME\\` as \\`CHARSET\\`, \\`DEFAULT_COLLATION_NAME\\` AS \\`COLLATION\\` FROM \\`INFORMATION_SCHEMA\\`.\\`SCHEMATA\\``;\r\n\r\n        const indicesCondition = tableNames.map(tableName => {\r\n            let [database, name] = tableName.split(\".\");\r\n            if (!name) {\r\n                name = database;\r\n                database = this.driver.database || currentDatabase;\r\n            }\r\n            return `(\\`s\\`.\\`TABLE_SCHEMA\\` = '${database}' AND \\`s\\`.\\`TABLE_NAME\\` = '${name}')`;\r\n        }).join(\" OR \");\r\n        const indicesSql = `SELECT \\`s\\`.* FROM \\`INFORMATION_SCHEMA\\`.\\`STATISTICS\\` \\`s\\` ` +\r\n            `LEFT JOIN \\`INFORMATION_SCHEMA\\`.\\`REFERENTIAL_CONSTRAINTS\\` \\`rc\\` ON \\`s\\`.\\`INDEX_NAME\\` = \\`rc\\`.\\`CONSTRAINT_NAME\\` ` +\r\n            `WHERE (${indicesCondition}) AND \\`s\\`.\\`INDEX_NAME\\` != 'PRIMARY' AND \\`rc\\`.\\`CONSTRAINT_NAME\\` IS NULL`;\r\n\r\n        const foreignKeysCondition = tableNames.map(tableName => {\r\n            let [database, name] = tableName.split(\".\");\r\n            if (!name) {\r\n                name = database;\r\n                database = this.driver.database || currentDatabase;\r\n            }\r\n            return `(\\`kcu\\`.\\`TABLE_SCHEMA\\` = '${database}' AND \\`kcu\\`.\\`TABLE_NAME\\` = '${name}')`;\r\n        }).join(\" OR \");\r\n        const foreignKeysSql = `SELECT \\`kcu\\`.\\`TABLE_SCHEMA\\`, \\`kcu\\`.\\`TABLE_NAME\\`, \\`kcu\\`.\\`CONSTRAINT_NAME\\`, \\`kcu\\`.\\`COLUMN_NAME\\`, \\`kcu\\`.\\`REFERENCED_TABLE_SCHEMA\\`, ` +\r\n            `\\`kcu\\`.\\`REFERENCED_TABLE_NAME\\`, \\`kcu\\`.\\`REFERENCED_COLUMN_NAME\\`, \\`rc\\`.\\`DELETE_RULE\\` \\`ON_DELETE\\`, \\`rc\\`.\\`UPDATE_RULE\\` \\`ON_UPDATE\\` ` +\r\n            `FROM \\`INFORMATION_SCHEMA\\`.\\`KEY_COLUMN_USAGE\\` \\`kcu\\` ` +\r\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`REFERENTIAL_CONSTRAINTS\\` \\`rc\\` ON \\`rc\\`.\\`constraint_name\\` = \\`kcu\\`.\\`constraint_name\\` ` +\r\n            `WHERE ` + foreignKeysCondition;\r\n        const [dbTables, dbColumns, dbPrimaryKeys, dbCollations, dbIndices, dbForeignKeys]: ObjectLiteral[][] = await Promise.all([\r\n            this.query(tablesSql),\r\n            this.query(columnsSql),\r\n            this.query(primaryKeySql),\r\n            this.query(collationsSql),\r\n            this.query(indicesSql),\r\n            this.query(foreignKeysSql)\r\n        ]);\r\n\r\n        // if tables were not found in the db, no need to proceed\r\n        if (!dbTables.length)\r\n            return [];\r\n\r\n        const isMariaDb = this.driver.options.type === \"mariadb\";\r\n\r\n        // create tables for loaded tables\r\n        return Promise.all(dbTables.map(async dbTable => {\r\n            const table = new Table();\r\n\r\n            const dbCollation = dbCollations.find(coll => coll[\"SCHEMA_NAME\"] === dbTable[\"TABLE_SCHEMA\"])!;\r\n            const defaultCollation = dbCollation[\"COLLATION\"];\r\n            const defaultCharset = dbCollation[\"CHARSET\"];\r\n\r\n            // We do not need to join database name, when database is by default.\r\n            // In this case we need local variable `tableFullName` for below comparision.\r\n            const db = dbTable[\"TABLE_SCHEMA\"] === currentDatabase ? undefined : dbTable[\"TABLE_SCHEMA\"];\r\n            table.name = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], undefined, db);\r\n            const tableFullName = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], undefined, dbTable[\"TABLE_SCHEMA\"]);\r\n\r\n            // create columns from the loaded columns\r\n            table.columns = dbColumns\r\n                .filter(dbColumn => this.driver.buildTableName(dbColumn[\"TABLE_NAME\"], undefined, dbColumn[\"TABLE_SCHEMA\"]) === tableFullName)\r\n                .map(dbColumn => {\r\n\r\n                    const columnUniqueIndex = dbIndices.find(dbIndex => {\r\n                        return this.driver.buildTableName(dbIndex[\"TABLE_NAME\"], undefined, dbIndex[\"TABLE_SCHEMA\"]) === tableFullName\r\n                            && dbIndex[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"] && dbIndex[\"NON_UNIQUE\"] === \"0\";\r\n                    });\r\n\r\n                    const tableMetadata = this.connection.entityMetadatas.find(metadata => metadata.tablePath === table.name);\r\n                    const hasIgnoredIndex = columnUniqueIndex && tableMetadata && tableMetadata.indices\r\n                        .some(index => index.name === columnUniqueIndex[\"INDEX_NAME\"] && index.synchronize === false);\r\n\r\n                    const isConstraintComposite = columnUniqueIndex\r\n                        ? !!dbIndices.find(dbIndex => dbIndex[\"INDEX_NAME\"] === columnUniqueIndex[\"INDEX_NAME\"] && dbIndex[\"COLUMN_NAME\"] !== dbColumn[\"COLUMN_NAME\"])\r\n                        : false;\r\n\r\n                    const tableColumn = new TableColumn();\r\n                    tableColumn.name = dbColumn[\"COLUMN_NAME\"];\r\n                    tableColumn.type = dbColumn[\"DATA_TYPE\"].toLowerCase();\r\n\r\n                    if (this.driver.withWidthColumnTypes.indexOf(tableColumn.type as ColumnType) !== -1) {\r\n                        const width = dbColumn[\"COLUMN_TYPE\"].substring(dbColumn[\"COLUMN_TYPE\"].indexOf(\"(\") + 1, dbColumn[\"COLUMN_TYPE\"].indexOf(\")\"));\r\n                        tableColumn.width = width && !this.isDefaultColumnWidth(table, tableColumn, parseInt(width)) ? parseInt(width) : undefined;\r\n                    }\r\n\r\n                    if (dbColumn[\"COLUMN_DEFAULT\"] === null\r\n                        || dbColumn[\"COLUMN_DEFAULT\"] === undefined\r\n                        || (isMariaDb && dbColumn[\"COLUMN_DEFAULT\"] === \"NULL\")) {\r\n                        tableColumn.default = undefined;\r\n\r\n                    } else {\r\n                        tableColumn.default = dbColumn[\"COLUMN_DEFAULT\"] === \"CURRENT_TIMESTAMP\" ? dbColumn[\"COLUMN_DEFAULT\"] : `'${dbColumn[\"COLUMN_DEFAULT\"]}'`;\r\n                    }\r\n\r\n                    if (dbColumn[\"EXTRA\"].indexOf(\"on update\") !== -1) {\r\n                        tableColumn.onUpdate = dbColumn[\"EXTRA\"].substring(10);\r\n                    }\r\n\r\n                    if (dbColumn[\"GENERATION_EXPRESSION\"]) {\r\n                        tableColumn.asExpression = dbColumn[\"GENERATION_EXPRESSION\"];\r\n                        tableColumn.generatedType = dbColumn[\"EXTRA\"].indexOf(\"VIRTUAL\") !== -1 ? \"VIRTUAL\" : \"STORED\";\r\n                    }\r\n\r\n                    tableColumn.isUnique = !!columnUniqueIndex && !hasIgnoredIndex && !isConstraintComposite;\r\n                    tableColumn.isNullable = dbColumn[\"IS_NULLABLE\"] === \"YES\";\r\n                    tableColumn.isPrimary = dbPrimaryKeys.some(dbPrimaryKey => {\r\n                        return this.driver.buildTableName(dbPrimaryKey[\"TABLE_NAME\"], undefined, dbPrimaryKey[\"TABLE_SCHEMA\"]) === tableFullName && dbPrimaryKey[\"COLUMN_NAME\"] === tableColumn.name;\r\n                    });\r\n                    tableColumn.zerofill = dbColumn[\"COLUMN_TYPE\"].indexOf(\"zerofill\") !== -1;\r\n                    tableColumn.unsigned = tableColumn.zerofill ? true : dbColumn[\"COLUMN_TYPE\"].indexOf(\"unsigned\") !== -1;\r\n                    tableColumn.isGenerated = dbColumn[\"EXTRA\"].indexOf(\"auto_increment\") !== -1;\r\n                    if (tableColumn.isGenerated)\r\n                        tableColumn.generationStrategy = \"increment\";\r\n\r\n                    tableColumn.comment = dbColumn[\"COLUMN_COMMENT\"];\r\n                    if (dbColumn[\"CHARACTER_SET_NAME\"])\r\n                        tableColumn.charset = dbColumn[\"CHARACTER_SET_NAME\"] === defaultCharset ? undefined : dbColumn[\"CHARACTER_SET_NAME\"];\r\n                    if (dbColumn[\"COLLATION_NAME\"])\r\n                        tableColumn.collation = dbColumn[\"COLLATION_NAME\"] === defaultCollation ? undefined : dbColumn[\"COLLATION_NAME\"];\r\n\r\n                    // check only columns that have length property\r\n                    if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type as ColumnType) !== -1 && dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"]) {\r\n                        const length = dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"].toString();\r\n                        tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length) ? length : \"\";\r\n                    }\r\n\r\n                    if (tableColumn.type === \"decimal\" || tableColumn.type === \"double\" || tableColumn.type === \"float\") {\r\n                        if (dbColumn[\"NUMERIC_PRECISION\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"NUMERIC_PRECISION\"]))\r\n                            tableColumn.precision = parseInt(dbColumn[\"NUMERIC_PRECISION\"]);\r\n                        if (dbColumn[\"NUMERIC_SCALE\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"NUMERIC_SCALE\"]))\r\n                            tableColumn.scale = parseInt(dbColumn[\"NUMERIC_SCALE\"]);\r\n                    }\r\n\r\n                    if (tableColumn.type === \"enum\") {\r\n                        const colType = dbColumn[\"COLUMN_TYPE\"];\r\n                        const items = colType.substring(colType.indexOf(\"(\") + 1, colType.indexOf(\")\")).split(\",\");\r\n                        tableColumn.enum = (items as string[]).map(item => {\r\n                            return item.substring(1, item.length - 1);\r\n                        });\r\n                        tableColumn.length = \"\";\r\n                    }\r\n\r\n                    if ((tableColumn.type === \"datetime\" || tableColumn.type === \"time\" || tableColumn.type === \"timestamp\") && dbColumn[\"DATETIME_PRECISION\"]) {\r\n                        tableColumn.precision = parseInt(dbColumn[\"DATETIME_PRECISION\"]);\r\n                    }\r\n\r\n                    return tableColumn;\r\n                });\r\n\r\n            // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\r\n            const tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys.filter(dbForeignKey => {\r\n                return this.driver.buildTableName(dbForeignKey[\"TABLE_NAME\"], undefined, dbForeignKey[\"TABLE_SCHEMA\"]) === tableFullName;\r\n            }), dbForeignKey => dbForeignKey[\"CONSTRAINT_NAME\"]);\r\n\r\n            table.foreignKeys = tableForeignKeyConstraints.map(dbForeignKey => {\r\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\r\n\r\n                // if referenced table located in currently used db, we don't need to concat db name to table name.\r\n                const database = dbForeignKey[\"REFERENCED_TABLE_SCHEMA\"] === currentDatabase ? undefined : dbForeignKey[\"REFERENCED_TABLE_SCHEMA\"];\r\n                const referencedTableName = this.driver.buildTableName(dbForeignKey[\"REFERENCED_TABLE_NAME\"], undefined, database);\r\n\r\n                return new TableForeignKey({\r\n                    name: dbForeignKey[\"CONSTRAINT_NAME\"],\r\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\r\n                    referencedTableName: referencedTableName,\r\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\r\n                    onDelete: dbForeignKey[\"ON_DELETE\"],\r\n                    onUpdate: dbForeignKey[\"ON_UPDATE\"]\r\n                });\r\n            });\r\n\r\n            // find index constraints of table, group them by constraint name and build TableIndex.\r\n            const tableIndexConstraints = OrmUtils.uniq(dbIndices.filter(dbIndex => {\r\n                return this.driver.buildTableName(dbIndex[\"TABLE_NAME\"], undefined, dbIndex[\"TABLE_SCHEMA\"]) === tableFullName;\r\n            }), dbIndex => dbIndex[\"INDEX_NAME\"]);\r\n\r\n            table.indices = tableIndexConstraints.map(constraint => {\r\n                const indices = dbIndices.filter(index => index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"]);\r\n                return new TableIndex(<TableIndexOptions>{\r\n                    table: table,\r\n                    name: constraint[\"INDEX_NAME\"],\r\n                    columnNames: indices.map(i => i[\"COLUMN_NAME\"]),\r\n                    isUnique: constraint[\"NON_UNIQUE\"] === \"0\",\r\n                    isSpatial: constraint[\"INDEX_TYPE\"] === \"SPATIAL\",\r\n                    isFulltext: constraint[\"INDEX_TYPE\"] === \"FULLTEXT\"\r\n                });\r\n            });\r\n\r\n            return table;\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Builds create table sql\r\n     */\r\n    protected createTableSql(table: Table, createForeignKeys?: boolean): string {\r\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column, true)).join(\", \");\r\n        let sql = `CREATE TABLE ${this.escapeTableName(table)} (${columnDefinitions}`;\r\n\r\n        // we create unique indexes instead of unique constraints, because MySql does not have unique constraints.\r\n        // if we mark column as Unique, it means that we create UNIQUE INDEX.\r\n        table.columns\r\n            .filter(column => column.isUnique)\r\n            .forEach(column => {\r\n                const isUniqueIndexExist = table.indices.some(index => {\r\n                    return index.columnNames.length === 1 && !!index.isUnique && index.columnNames.indexOf(column.name) !== -1;\r\n                });\r\n                const isUniqueConstraintExist = table.uniques.some(unique => {\r\n                    return unique.columnNames.length === 1 && unique.columnNames.indexOf(column.name) !== -1;\r\n                });\r\n                if (!isUniqueIndexExist && !isUniqueConstraintExist)\r\n                    table.indices.push(new TableIndex({\r\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\r\n                        columnNames: [column.name],\r\n                        isUnique: true\r\n                    }));\r\n            });\r\n\r\n        // as MySql does not have unique constraints, we must create table indices from table uniques and mark them as unique.\r\n        if (table.uniques.length > 0) {\r\n            table.uniques.forEach(unique => {\r\n                const uniqueExist = table.indices.some(index => index.name === unique.name);\r\n                if (!uniqueExist) {\r\n                    table.indices.push(new TableIndex({\r\n                        name: unique.name,\r\n                        columnNames: unique.columnNames,\r\n                        isUnique: true\r\n                    }));\r\n                }\r\n            });\r\n        }\r\n\r\n        if (table.indices.length > 0) {\r\n            const indicesSql = table.indices.map(index => {\r\n                const columnNames = index.columnNames.map(columnName => `\\`${columnName}\\``).join(\", \");\r\n                if (!index.name)\r\n                    index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\r\n\r\n                let indexType = \"\";\r\n                if (index.isUnique)\r\n                    indexType += \"UNIQUE \";\r\n                if (index.isSpatial)\r\n                    indexType += \"SPATIAL \";\r\n                if (index.isFulltext)\r\n                    indexType += \"FULLTEXT \";\r\n\r\n                return `${indexType}INDEX \\`${index.name}\\` (${columnNames})`;\r\n            }).join(\", \");\r\n\r\n            sql += `, ${indicesSql}`;\r\n        }\r\n\r\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\r\n            const foreignKeysSql = table.foreignKeys.map(fk => {\r\n                const columnNames = fk.columnNames.map(columnName => `\\`${columnName}\\``).join(\", \");\r\n                if (!fk.name)\r\n                    fk.name = this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames);\r\n                const referencedColumnNames = fk.referencedColumnNames.map(columnName => `\\`${columnName}\\``).join(\", \");\r\n\r\n                let constraint = `CONSTRAINT \\`${fk.name}\\` FOREIGN KEY (${columnNames}) REFERENCES ${this.escapeTableName(fk.referencedTableName)} (${referencedColumnNames})`;\r\n                if (fk.onDelete)\r\n                    constraint += ` ON DELETE ${fk.onDelete}`;\r\n                if (fk.onUpdate)\r\n                    constraint += ` ON UPDATE ${fk.onUpdate}`;\r\n\r\n                return constraint;\r\n            }).join(\", \");\r\n\r\n            sql += `, ${foreignKeysSql}`;\r\n        }\r\n\r\n        if (table.primaryColumns.length > 0) {\r\n            const columnNames = table.primaryColumns.map(column => `\\`${column.name}\\``).join(\", \");\r\n            sql += `, PRIMARY KEY (${columnNames})`;\r\n        }\r\n\r\n        sql += `) ENGINE=${table.engine || \"InnoDB\"}`;\r\n\r\n        return sql;\r\n    }\r\n\r\n    /**\r\n     * Builds drop table sql\r\n     */\r\n    protected dropTableSql(tableOrName: Table|string): string {\r\n        return `DROP TABLE ${this.escapeTableName(tableOrName)}`;\r\n    }\r\n\r\n    /**\r\n     * Builds create index sql.\r\n     */\r\n    protected createIndexSql(table: Table, index: TableIndex): string {\r\n        const columns = index.columnNames.map(columnName => `\\`${columnName}\\``).join(\", \");\r\n        let indexType = \"\";\r\n        if (index.isUnique)\r\n            indexType += \"UNIQUE \";\r\n        if (index.isSpatial)\r\n            indexType += \"SPATIAL \";\r\n        if (index.isFulltext)\r\n            indexType += \"FULLTEXT \";\r\n        return `CREATE ${indexType}INDEX \\`${index.name}\\` ON ${this.escapeTableName(table)}(${columns})`;\r\n    }\r\n\r\n    /**\r\n     * Builds drop index sql.\r\n     */\r\n    protected dropIndexSql(table: Table, indexOrName: TableIndex|string): string {\r\n        let indexName = indexOrName instanceof TableIndex ? indexOrName.name : indexOrName;\r\n        return `DROP INDEX \\`${indexName}\\` ON ${this.escapeTableName(table)}`;\r\n    }\r\n\r\n    /**\r\n     * Builds create primary key sql.\r\n     */\r\n    protected createPrimaryKeySql(table: Table, columnNames: string[]): string {\r\n        const columnNamesString = columnNames.map(columnName => `\\`${columnName}\\``).join(\", \");\r\n        return `ALTER TABLE ${this.escapeTableName(table)} ADD PRIMARY KEY (${columnNamesString})`;\r\n    }\r\n\r\n    /**\r\n     * Builds drop primary key sql.\r\n     */\r\n    protected dropPrimaryKeySql(table: Table): string {\r\n        return `ALTER TABLE ${this.escapeTableName(table)} DROP PRIMARY KEY`;\r\n    }\r\n\r\n    /**\r\n     * Builds create foreign key sql.\r\n     */\r\n    protected createForeignKeySql(table: Table, foreignKey: TableForeignKey): string {\r\n        const columnNames = foreignKey.columnNames.map(column => `\\`${column}\\``).join(\", \");\r\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\\`${column}\\``).join(\",\");\r\n        let sql = `ALTER TABLE ${this.escapeTableName(table)} ADD CONSTRAINT \\`${foreignKey.name}\\` FOREIGN KEY (${columnNames}) ` +\r\n            `REFERENCES ${this.escapeTableName(foreignKey.referencedTableName)}(${referencedColumnNames})`;\r\n        if (foreignKey.onDelete)\r\n            sql += ` ON DELETE ${foreignKey.onDelete}`;\r\n        if (foreignKey.onUpdate)\r\n            sql += ` ON UPDATE ${foreignKey.onUpdate}`;\r\n\r\n        return sql;\r\n    }\r\n\r\n    /**\r\n     * Builds drop foreign key sql.\r\n     */\r\n    protected dropForeignKeySql(table: Table, foreignKeyOrName: TableForeignKey|string): string {\r\n        const foreignKeyName = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;\r\n        return `ALTER TABLE ${this.escapeTableName(table)} DROP FOREIGN KEY \\`${foreignKeyName}\\``;\r\n    }\r\n\r\n    protected parseTableName(target: Table|string) {\r\n        const tableName = target instanceof Table ? target.name : target;\r\n        return {\r\n            database: tableName.indexOf(\".\") !== -1 ? tableName.split(\".\")[0] : this.driver.database,\r\n            tableName: tableName.indexOf(\".\") !== -1 ? tableName.split(\".\")[1] : tableName\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Escapes given table name.\r\n     */\r\n    protected escapeTableName(target: Table|string, disableEscape?: boolean): string {\r\n        const tableName = target instanceof Table ? target.name : target;\r\n        return tableName.split(\".\").map(i => disableEscape ? i : `\\`${i}\\``).join(\".\");\r\n    }\r\n\r\n    /**\r\n     * Builds a part of query to create/change a column.\r\n     */\r\n    protected buildCreateColumnSql(column: TableColumn, skipPrimary: boolean, skipName: boolean = false) {\r\n        let c = \"\";\r\n        if (skipName) {\r\n            c = this.connection.driver.createFullType(column);\r\n        } else {\r\n            c = `\\`${column.name}\\` ${this.connection.driver.createFullType(column)}`;\r\n        }\r\n        if (column.asExpression)\r\n            c += ` AS (${column.asExpression}) ${column.generatedType ? column.generatedType : \"VIRTUAL\"}`;\r\n\r\n        // if you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to that column.\r\n        if (column.zerofill) {\r\n            c += \" ZEROFILL\";\r\n        } else if (column.unsigned) {\r\n            c += \" UNSIGNED\";\r\n        }\r\n        if (column.enum)\r\n            c += ` (${column.enum.map(value => \"'\" + value + \"'\").join(\", \")})`;\r\n        if (column.charset)\r\n            c += ` CHARACTER SET \"${column.charset}\"`;\r\n        if (column.collation)\r\n            c += ` COLLATE \"${column.collation}\"`;\r\n        if (!column.isNullable)\r\n            c += \" NOT NULL\";\r\n        if (column.isNullable)\r\n            c += \" NULL\";\r\n        if (column.isPrimary && !skipPrimary)\r\n            c += \" PRIMARY KEY\";\r\n        if (column.isGenerated && column.generationStrategy === \"increment\") // don't use skipPrimary here since updates can update already exist primary without auto inc.\r\n            c += \" AUTO_INCREMENT\";\r\n        if (column.comment)\r\n            c += ` COMMENT '${column.comment}'`;\r\n        if (column.default !== undefined && column.default !== null)\r\n            c += ` DEFAULT ${column.default}`;\r\n        if (column.onUpdate)\r\n            c += ` ON UPDATE ${column.onUpdate}`;\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"../.."}