{"version":3,"sources":["../browser/src/driver/sqljs/SqljsQueryRunner.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAC,+BAA+B,EAAC,MAAM,6CAA6C,CAAC;AAC5F,OAAO,EAAC,yBAAyB,EAAC,MAAM,8CAA8C,CAAC;AAEvF,OAAO,EAAC,WAAW,EAAC,MAAM,8BAA8B,CAAC;AACzD,OAAO,EAAC,gBAAgB,EAAC,MAAM,8BAA8B,CAAC;AAE9D;;GAEG;AACH;IAAsC,oCAAyB;IAO3D,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,0BAAY,MAAmB;QAA/B,YACI,iBAAO,SAIV;QAHG,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,KAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACpC,KAAI,CAAC,WAAW,GAAG,IAAI,WAAW,CAAC,KAAI,CAAC,CAAC;;IAC7C,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;;OAGG;IACG,4CAAiB,GAAvB;;;;4BACI,qBAAM,iBAAM,iBAAiB,WAAE,EAAA;;wBAA/B,SAA+B,CAAC;wBAChC,qBAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAA;;wBAA5B,SAA4B,CAAC;;;;;KAChC;IAED;;OAEG;IACH,gCAAK,GAAL,UAAM,KAAa,EAAE,UAAkB;QAAvC,iBAiCC;QAhCG,IAAI,IAAI,CAAC,UAAU;YACf,MAAM,IAAI,+BAA+B,EAAE,CAAC;QAEhD,OAAO,IAAI,OAAO,CAAQ,UAAO,EAAE,EAAE,IAAI;;;gBAC/B,kBAAkB,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC;gBAC1D,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;gBAC1D,cAAc,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC;gBACnC,IAAI;oBACM,SAAS,GAAG,kBAAkB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;oBACpD,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBAGrB,qBAAqB,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,qBAAqB,CAAC;oBAC7E,YAAY,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC;oBAC3B,kBAAkB,GAAG,YAAY,GAAG,cAAc,CAAC;oBACzD,IAAI,qBAAqB,IAAI,kBAAkB,GAAG,qBAAqB;wBACnE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,YAAY,CAAC,kBAAkB,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;oBAEtF,MAAM,GAAU,EAAE,CAAC;oBAEzB,OAAO,SAAS,CAAC,IAAI,EAAE,EAAE;wBACrB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC;qBACxC;oBAED,SAAS,CAAC,IAAI,EAAE,CAAC;oBACjB,EAAE,CAAC,MAAM,CAAC,CAAC;iBACd;gBACD,OAAO,CAAC,EAAE;oBACN,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;oBACxE,IAAI,CAAC,IAAI,gBAAgB,CAAC,KAAK,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;iBACpD;;;aACJ,CAAC,CAAC;IACP,CAAC;IACL,uBAAC;AAAD,CApEA,AAoEC,CApEqC,yBAAyB,GAoE9D","file":"SqljsQueryRunner.js","sourcesContent":["import {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\r\nimport {AbstractSqliteQueryRunner} from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\r\nimport {SqljsDriver} from \"./SqljsDriver\";\r\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\r\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\r\n\r\n/**\r\n * Runs queries on a single sqlite database connection.\r\n */\r\nexport class SqljsQueryRunner extends AbstractSqliteQueryRunner {\r\n    \r\n    /**\r\n     * Database driver used by connection.\r\n     */\r\n    driver: SqljsDriver;\r\n    \r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(driver: SqljsDriver) {\r\n        super();\r\n        this.driver = driver;\r\n        this.connection = driver.connection;\r\n        this.broadcaster = new Broadcaster(this);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public methods\r\n    // -------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * Commits transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        await super.commitTransaction();\r\n        await this.driver.autoSave();\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        return new Promise<any[]>(async (ok, fail) => {\r\n            const databaseConnection = this.driver.databaseConnection;\r\n            this.driver.connection.logger.logQuery(query, parameters, this);\r\n            const queryStartTime = +new Date();\r\n            try {\r\n                const statement = databaseConnection.prepare(query);\r\n                statement.bind(parameters);\r\n                \r\n                // log slow queries if maxQueryExecution time is set\r\n                const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\r\n                const queryEndTime = +new Date();\r\n                const queryExecutionTime = queryEndTime - queryStartTime;\r\n                if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\r\n                    this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\r\n\r\n                const result: any[] = [];\r\n\r\n                while (statement.step()) {\r\n                    result.push(statement.getAsObject());\r\n                }\r\n                \r\n                statement.free();\r\n                ok(result);\r\n            }\r\n            catch (e) {\r\n                this.driver.connection.logger.logQueryError(e, query, parameters, this);\r\n                fail(new QueryFailedError(query, parameters, e));\r\n            }\r\n        });\r\n    }\r\n}"],"sourceRoot":"../.."}