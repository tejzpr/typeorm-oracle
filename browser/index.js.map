{"version":3,"sources":["../browser/src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/*!\r\n */\r\nimport \"reflect-metadata\";\r\nimport {ConnectionManager} from \"./connection/ConnectionManager\";\r\nimport {Connection} from \"./connection/Connection\";\r\nimport {MetadataArgsStorage} from \"./metadata-args/MetadataArgsStorage\";\r\nimport {ConnectionOptions} from \"./connection/ConnectionOptions\";\r\nimport {getFromContainer} from \"./container\";\r\nimport {ObjectType} from \"./common/ObjectType\";\r\nimport {Repository} from \"./repository/Repository\";\r\nimport {EntityManager} from \"./entity-manager/EntityManager\";\r\nimport {PlatformTools} from \"./platform/PlatformTools\";\r\nimport {TreeRepository} from \"./repository/TreeRepository\";\r\nimport {MongoRepository} from \"./repository/MongoRepository\";\r\nimport {ConnectionOptionsReader} from \"./connection/ConnectionOptionsReader\";\r\nimport {PromiseUtils} from \"./util/PromiseUtils\";\r\nimport {MongoEntityManager} from \"./entity-manager/MongoEntityManager\";\r\nimport {SqljsEntityManager} from \"./entity-manager/SqljsEntityManager\";\r\nimport {SelectQueryBuilder} from \"./query-builder/SelectQueryBuilder\";\r\n\r\n// -------------------------------------------------------------------------\r\n// Commonly Used exports\r\n// -------------------------------------------------------------------------\r\n\r\nexport * from \"./container\";\r\nexport * from \"./common/ObjectType\";\r\nexport * from \"./common/ObjectLiteral\";\r\nexport * from \"./common/DeepPartial\";\r\nexport * from \"./error/QueryFailedError\";\r\nexport * from \"./decorator/columns/Column\";\r\nexport * from \"./decorator/columns/CreateDateColumn\";\r\nexport * from \"./decorator/columns/PrimaryGeneratedColumn\";\r\nexport * from \"./decorator/columns/PrimaryColumn\";\r\nexport * from \"./decorator/columns/UpdateDateColumn\";\r\nexport * from \"./decorator/columns/VersionColumn\";\r\nexport * from \"./decorator/columns/ObjectIdColumn\";\r\nexport * from \"./decorator/listeners/AfterInsert\";\r\nexport * from \"./decorator/listeners/AfterLoad\";\r\nexport * from \"./decorator/listeners/AfterRemove\";\r\nexport * from \"./decorator/listeners/AfterUpdate\";\r\nexport * from \"./decorator/listeners/BeforeInsert\";\r\nexport * from \"./decorator/listeners/BeforeRemove\";\r\nexport * from \"./decorator/listeners/BeforeUpdate\";\r\nexport * from \"./decorator/listeners/EventSubscriber\";\r\nexport * from \"./decorator/options/ColumnOptions\";\r\nexport * from \"./decorator/options/IndexOptions\";\r\nexport * from \"./decorator/options/JoinColumnOptions\";\r\nexport * from \"./decorator/options/JoinTableOptions\";\r\nexport * from \"./decorator/options/RelationOptions\";\r\nexport * from \"./decorator/options/EntityOptions\";\r\nexport * from \"./decorator/relations/JoinColumn\";\r\nexport * from \"./decorator/relations/JoinTable\";\r\nexport * from \"./decorator/relations/ManyToMany\";\r\nexport * from \"./decorator/relations/ManyToOne\";\r\nexport * from \"./decorator/relations/OneToMany\";\r\nexport * from \"./decorator/relations/OneToOne\";\r\nexport * from \"./decorator/relations/RelationCount\";\r\nexport * from \"./decorator/relations/RelationId\";\r\nexport * from \"./decorator/entity/Entity\";\r\nexport * from \"./decorator/entity/ChildEntity\";\r\nexport * from \"./decorator/entity/TableInheritance\";\r\nexport * from \"./decorator/transaction/Transaction\";\r\nexport * from \"./decorator/transaction/TransactionManager\";\r\nexport * from \"./decorator/transaction/TransactionRepository\";\r\nexport * from \"./decorator/tree/TreeLevelColumn\";\r\nexport * from \"./decorator/tree/TreeParent\";\r\nexport * from \"./decorator/tree/TreeChildren\";\r\nexport * from \"./decorator/tree/Tree\";\r\nexport * from \"./decorator/Index\";\r\nexport * from \"./decorator/Unique\";\r\nexport * from \"./decorator/Check\";\r\nexport * from \"./decorator/Generated\";\r\nexport * from \"./decorator/EntityRepository\";\r\nexport * from \"./find-options/operator/Any\";\r\nexport * from \"./find-options/operator/Between\";\r\nexport * from \"./find-options/operator/Equal\";\r\nexport * from \"./find-options/operator/In\";\r\nexport * from \"./find-options/operator/IsNull\";\r\nexport * from \"./find-options/operator/LessThan\";\r\nexport * from \"./find-options/operator/Like\";\r\nexport * from \"./find-options/operator/MoreThan\";\r\nexport * from \"./find-options/operator/Not\";\r\nexport * from \"./find-options/operator/Raw\";\r\nexport * from \"./find-options/FindConditions\";\r\nexport * from \"./find-options/FindManyOptions\";\r\nexport * from \"./find-options/FindOneOptions\";\r\nexport * from \"./find-options/FindOperator\";\r\nexport * from \"./find-options/FindOperatorType\";\r\nexport * from \"./find-options/JoinOptions\";\r\nexport * from \"./find-options/OrderByCondition\";\r\nexport * from \"./logger/Logger\";\r\nexport * from \"./logger/AdvancedConsoleLogger\";\r\nexport * from \"./logger/SimpleConsoleLogger\";\r\nexport * from \"./logger/FileLogger\";\r\nexport * from \"./metadata/EntityMetadata\";\r\nexport * from \"./entity-manager/EntityManager\";\r\nexport * from \"./repository/AbstractRepository\";\r\nexport * from \"./repository/Repository\";\r\nexport * from \"./repository/BaseEntity\";\r\nexport * from \"./repository/TreeRepository\";\r\nexport * from \"./repository/MongoRepository\";\r\nexport * from \"./repository/RemoveOptions\";\r\nexport * from \"./repository/SaveOptions\";\r\nexport * from \"./schema-builder/table/TableColumn\";\r\nexport * from \"./schema-builder/table/TableForeignKey\";\r\nexport * from \"./schema-builder/table/TableIndex\";\r\nexport * from \"./schema-builder/table/Table\";\r\nexport * from \"./driver/mongodb/typings\";\r\nexport * from \"./driver/types/DatabaseType\";\r\nexport * from \"./driver/sqlserver/MssqlParameter\";\r\n\r\nexport {ConnectionOptionsReader} from \"./connection/ConnectionOptionsReader\";\r\nexport {Connection} from \"./connection/Connection\";\r\nexport {ConnectionManager} from \"./connection/ConnectionManager\";\r\nexport {ConnectionOptions} from \"./connection/ConnectionOptions\";\r\nexport {Driver} from \"./driver/Driver\";\r\nexport {QueryBuilder} from \"./query-builder/QueryBuilder\";\r\nexport {SelectQueryBuilder} from \"./query-builder/SelectQueryBuilder\";\r\nexport {DeleteQueryBuilder} from \"./query-builder/DeleteQueryBuilder\";\r\nexport {InsertQueryBuilder} from \"./query-builder/InsertQueryBuilder\";\r\nexport {UpdateQueryBuilder} from \"./query-builder/UpdateQueryBuilder\";\r\nexport {RelationQueryBuilder} from \"./query-builder/RelationQueryBuilder\";\r\nexport {Brackets} from \"./query-builder/Brackets\";\r\nexport {WhereExpression} from \"./query-builder/WhereExpression\";\r\nexport {InsertResult} from \"./query-builder/result/InsertResult\";\r\nexport {UpdateResult} from \"./query-builder/result/UpdateResult\";\r\nexport {DeleteResult} from \"./query-builder/result/DeleteResult\";\r\nexport {QueryRunner} from \"./query-runner/QueryRunner\";\r\nexport {EntityManager} from \"./entity-manager/EntityManager\";\r\nexport {MongoEntityManager} from \"./entity-manager/MongoEntityManager\";\r\nexport {MigrationInterface} from \"./migration/MigrationInterface\";\r\nexport {DefaultNamingStrategy} from \"./naming-strategy/DefaultNamingStrategy\";\r\nexport {NamingStrategyInterface} from \"./naming-strategy/NamingStrategyInterface\";\r\nexport {Repository} from \"./repository/Repository\";\r\nexport {TreeRepository} from \"./repository/TreeRepository\";\r\nexport {MongoRepository} from \"./repository/MongoRepository\";\r\nexport {FindOneOptions} from \"./find-options/FindOneOptions\";\r\nexport {FindManyOptions} from \"./find-options/FindManyOptions\";\r\nexport {InsertEvent} from \"./subscriber/event/InsertEvent\";\r\nexport {UpdateEvent} from \"./subscriber/event/UpdateEvent\";\r\nexport {RemoveEvent} from \"./subscriber/event/RemoveEvent\";\r\nexport {EntitySubscriberInterface} from \"./subscriber/EntitySubscriberInterface\";\r\nexport {BaseEntity} from \"./repository/BaseEntity\";\r\nexport {EntitySchema} from \"./entity-schema/EntitySchema\";\r\nexport {EntitySchemaColumnOptions} from \"./entity-schema/EntitySchemaColumnOptions\";\r\nexport {EntitySchemaIndexOptions} from \"./entity-schema/EntitySchemaIndexOptions\";\r\nexport {EntitySchemaRelationOptions} from \"./entity-schema/EntitySchemaRelationOptions\";\r\nexport {ColumnType} from \"./driver/types/ColumnTypes\";\r\nexport {PromiseUtils} from \"./util/PromiseUtils\";\r\n\r\n// -------------------------------------------------------------------------\r\n// Deprecated\r\n// -------------------------------------------------------------------------\r\n\r\n// -------------------------------------------------------------------------\r\n// Commonly used functionality\r\n// -------------------------------------------------------------------------\r\n\r\n/**\r\n * Gets metadata args storage.\r\n */\r\nexport function getMetadataArgsStorage(): MetadataArgsStorage {\r\n    // we should store metadata storage in a global variable otherwise it brings too much problems\r\n    // one of the problem is that if any entity (or any other) will be imported before consumer will call\r\n    // useContainer method with his own container implementation, that entity will be registered in the\r\n    // old old container (default one post probably) and consumer will his entity.\r\n    // calling useContainer before he imports any entity (or any other) is not always convenient.\r\n    // another reason is that when we run migrations typeorm is being called from a global package\r\n    // and it may load entities which register decorators in typeorm of local package\r\n    // this leads to impossibility of usage of entities in migrations and cli related operations\r\n    const globalScope = PlatformTools.getGlobalVariable();\r\n    if (!globalScope.typeormMetadataArgsStorage)\r\n        globalScope.typeormMetadataArgsStorage = new MetadataArgsStorage();\r\n\r\n    return globalScope.typeormMetadataArgsStorage;\r\n}\r\n\r\n/**\r\n * Reads connection options stored in ormconfig configuration file.\r\n */\r\nexport async function getConnectionOptions(connectionName: string = \"default\"): Promise<ConnectionOptions> {\r\n    return new ConnectionOptionsReader().get(connectionName);\r\n}\r\n\r\n/**\r\n * Gets a ConnectionManager which creates connections.\r\n */\r\nexport function getConnectionManager(): ConnectionManager {\r\n    return getFromContainer(ConnectionManager);\r\n}\r\n\r\n/**\r\n * Creates a new connection and registers it in the manager.\r\n * Only one connection from ormconfig will be created (name \"default\" or connection without name).\r\n */\r\nexport async function createConnection(): Promise<Connection>;\r\n\r\n/**\r\n * Creates a new connection from the ormconfig file with a given name.\r\n */\r\nexport async function createConnection(name: string): Promise<Connection>;\r\n\r\n/**\r\n * Creates a new connection and registers it in the manager.\r\n */\r\nexport async function createConnection(options: ConnectionOptions): Promise<Connection>;\r\n\r\n/**\r\n * Creates a new connection and registers it in the manager.\r\n *\r\n * If connection options were not specified, then it will try to create connection automatically,\r\n * based on content of ormconfig (json/js/yml/xml/env) file or environment variables.\r\n * Only one connection from ormconfig will be created (name \"default\" or connection without name).\r\n */\r\nexport async function createConnection(optionsOrName?: any): Promise<Connection> {\r\n    const connectionName = typeof optionsOrName === \"string\" ? optionsOrName : \"default\";\r\n    const options = optionsOrName instanceof Object ? optionsOrName : await getConnectionOptions(connectionName);\r\n    return getConnectionManager().create(options).connect();\r\n}\r\n\r\n/**\r\n * Creates new connections and registers them in the manager.\r\n *\r\n * If connection options were not specified, then it will try to create connection automatically,\r\n * based on content of ormconfig (json/js/yml/xml/env) file or environment variables.\r\n * All connections from the ormconfig will be created.\r\n */\r\nexport async function createConnections(options?: ConnectionOptions[]): Promise<Connection[]> {\r\n    if (!options)\r\n        options = await new ConnectionOptionsReader().all();\r\n    const connections = options.map(options => getConnectionManager().create(options));\r\n    return PromiseUtils.runInSequence(connections, connection => connection.connect());\r\n}\r\n\r\n/**\r\n * Gets connection from the connection manager.\r\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\r\n */\r\nexport function getConnection(connectionName: string = \"default\"): Connection {\r\n    return getConnectionManager().get(connectionName);\r\n}\r\n\r\n/**\r\n * Gets entity manager from the connection.\r\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\r\n */\r\nexport function getManager(connectionName: string = \"default\"): EntityManager {\r\n    return getConnectionManager().get(connectionName).manager;\r\n}\r\n\r\n/**\r\n * Gets MongoDB entity manager from the connection.\r\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\r\n */\r\nexport function getMongoManager(connectionName: string = \"default\"): MongoEntityManager {\r\n    return getConnectionManager().get(connectionName).manager as MongoEntityManager;\r\n}\r\n\r\n/**\r\n * Gets Sqljs entity manager from connection name.\r\n * \"default\" connection is used, when no name is specified.\r\n * Only works when Sqljs driver is used.\r\n */\r\nexport function getSqljsManager(connectionName: string = \"default\"): SqljsEntityManager {\r\n    return getConnectionManager().get(connectionName).manager as SqljsEntityManager;\r\n}\r\n\r\n/**\r\n * Gets repository for the given entity class.\r\n */\r\nexport function getRepository<Entity>(entityClass: ObjectType<Entity>|string, connectionName: string = \"default\"): Repository<Entity> {\r\n    return getConnectionManager().get(connectionName).getRepository<Entity>(entityClass);\r\n}\r\n\r\n/**\r\n * Gets tree repository for the given entity class.\r\n */\r\nexport function getTreeRepository<Entity>(entityClass: ObjectType<Entity>|string, connectionName: string = \"default\"): TreeRepository<Entity> {\r\n    return getConnectionManager().get(connectionName).getTreeRepository<Entity>(entityClass);\r\n}\r\n\r\n/**\r\n * Gets tree repository for the given entity class.\r\n */\r\nexport function getCustomRepository<T>(customRepository: ObjectType<T>, connectionName: string = \"default\"): T {\r\n    return getConnectionManager().get(connectionName).getCustomRepository(customRepository);\r\n}\r\n\r\n/**\r\n * Gets mongodb repository for the given entity class or name.\r\n */\r\nexport function getMongoRepository<Entity>(entityClass: ObjectType<Entity>|string, connectionName: string = \"default\"): MongoRepository<Entity> {\r\n    return getConnectionManager().get(connectionName).getMongoRepository<Entity>(entityClass);\r\n}\r\n\r\n/**\r\n * Creates a new query builder.\r\n */\r\nexport function createQueryBuilder<Entity>(entityClass?: ObjectType<Entity>|string, alias?: string, connectionName: string = \"default\"): SelectQueryBuilder<Entity> {\r\n    if (entityClass) {\r\n        return getRepository(entityClass, connectionName).createQueryBuilder(alias);\r\n    }\r\n\r\n    return getConnection(connectionName).createQueryBuilder();\r\n}\r\n"],"sourceRoot":"."}