{"version":3,"sources":["../browser/src/entity-schema/EntitySchemaTransformer.ts"],"names":[],"mappings":"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","file":"EntitySchemaTransformer.js","sourcesContent":["import {EntitySchema} from \"./EntitySchema\";\r\nimport {MetadataArgsStorage} from \"../metadata-args/MetadataArgsStorage\";\r\nimport {TableMetadataArgs} from \"../metadata-args/TableMetadataArgs\";\r\nimport {ColumnMetadataArgs} from \"../metadata-args/ColumnMetadataArgs\";\r\nimport {IndexMetadataArgs} from \"../metadata-args/IndexMetadataArgs\";\r\nimport {RelationMetadataArgs} from \"../metadata-args/RelationMetadataArgs\";\r\nimport {JoinColumnMetadataArgs} from \"../metadata-args/JoinColumnMetadataArgs\";\r\nimport {JoinTableMetadataArgs} from \"../metadata-args/JoinTableMetadataArgs\";\r\nimport {JoinTableOptions} from \"../decorator/options/JoinTableOptions\";\r\nimport {JoinTableMultipleColumnsOptions} from \"../decorator/options/JoinTableMuplipleColumnsOptions\";\r\nimport {ColumnMode} from \"../metadata-args/types/ColumnMode\";\r\nimport {GeneratedMetadataArgs} from \"../metadata-args/GeneratedMetadataArgs\";\r\nimport {UniqueMetadataArgs} from \"../metadata-args/UniqueMetadataArgs\";\r\nimport {CheckMetadataArgs} from \"../metadata-args/CheckMetadataArgs\";\r\n\r\n/**\r\n * Transforms entity schema into metadata args storage.\r\n * The result will be just like entities read from decorators.\r\n */\r\nexport class EntitySchemaTransformer {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Transforms entity schema into new metadata args storage object.\r\n     */\r\n    transform(schemas: EntitySchema<any>[]): MetadataArgsStorage {\r\n        const metadataArgsStorage = new MetadataArgsStorage();\r\n\r\n        schemas.forEach(entitySchema => {\r\n            const options = entitySchema.options;\r\n\r\n            // add table metadata args from the schema\r\n            const tableMetadata: TableMetadataArgs = {\r\n                target: options.target || options.name,\r\n                name: options.tableName,\r\n                database: options.database,\r\n                schema: options.schema,\r\n                type: options.type || \"regular\",\r\n                orderBy: options.orderBy,\r\n                synchronize: options.synchronize\r\n            };\r\n            metadataArgsStorage.tables.push(tableMetadata);\r\n\r\n            // add columns metadata args from the schema\r\n            Object.keys(options.columns).forEach(columnName => {\r\n                const column = options.columns[columnName]!;\r\n                let mode: ColumnMode = \"regular\";\r\n                if (column.createDate)\r\n                    mode = \"createDate\";\r\n                if (column.updateDate)\r\n                    mode = \"updateDate\";\r\n                if (column.version)\r\n                    mode = \"version\";\r\n                if (column.treeChildrenCount)\r\n                    mode = \"treeChildrenCount\";\r\n                if (column.treeLevel)\r\n                    mode = \"treeLevel\";\r\n                if (column.objectId)\r\n                    mode = \"objectId\";\r\n\r\n                const columnAgrs: ColumnMetadataArgs = {\r\n                    target: options.target || options.name,\r\n                    mode: mode,\r\n                    propertyName: columnName,\r\n                    options: {\r\n                        type: column.type,\r\n                        name: column.objectId ? \"_id\" : column.name,\r\n                        length: column.length,\r\n                        width: column.width,\r\n                        nullable: column.nullable,\r\n                        readonly: column.readonly,\r\n                        select: column.select,\r\n                        primary: column.primary,\r\n                        unique: column.unique,\r\n                        comment: column.comment,\r\n                        default: column.default,\r\n                        onUpdate: column.onUpdate,\r\n                        precision: column.precision,\r\n                        scale: column.scale,\r\n                        zerofill: column.zerofill,\r\n                        unsigned: column.unsigned,\r\n                        charset: column.charset,\r\n                        collation: column.collation,\r\n                        enum: column.enum,\r\n                        asExpression: column.asExpression,\r\n                        generatedType: column.generatedType,\r\n                        hstoreType: column.hstoreType,\r\n                        array: column.array,\r\n                        transformer: column.transformer\r\n                    }\r\n                };\r\n                metadataArgsStorage.columns.push(columnAgrs);\r\n\r\n                if (column.generated) {\r\n                    const generationArgs: GeneratedMetadataArgs = {\r\n                        target: options.target || options.name,\r\n                        propertyName: columnName,\r\n                        strategy: typeof column.generated === \"string\" ? column.generated : \"increment\"\r\n                    };\r\n                    metadataArgsStorage.generations.push(generationArgs);\r\n                }\r\n            });\r\n\r\n            // add relation metadata args from the schema\r\n            if (options.relations) {\r\n                Object.keys(options.relations).forEach(relationName => {\r\n                    const relationSchema = options.relations![relationName]!;\r\n                    const relation: RelationMetadataArgs = {\r\n                        target: options.target || options.name,\r\n                        propertyName: relationName,\r\n                        relationType: relationSchema.type,\r\n                        isLazy: relationSchema.lazy || false,\r\n                        type: relationSchema.target,\r\n                        inverseSideProperty: relationSchema.inverseSide,\r\n                        isTreeParent: relationSchema.treeParent,\r\n                        isTreeChildren: relationSchema.treeChildren,\r\n                        options: {\r\n                            eager: relationSchema.eager || false,\r\n                            cascade: relationSchema.cascade,\r\n                            nullable: relationSchema.nullable,\r\n                            onDelete: relationSchema.onDelete,\r\n                            onUpdate: relationSchema.onUpdate,\r\n                            primary: relationSchema.primary,\r\n                            persistence: relationSchema.persistence\r\n                        }\r\n                    };\r\n\r\n                    metadataArgsStorage.relations.push(relation);\r\n\r\n                    // add join column\r\n                    if (relationSchema.joinColumn) {\r\n                        if (typeof relationSchema.joinColumn === \"boolean\") {\r\n                            const joinColumn: JoinColumnMetadataArgs = {\r\n                                target: options.target || options.name,\r\n                                propertyName: relationName\r\n                            };\r\n                            metadataArgsStorage.joinColumns.push(joinColumn);\r\n                        } else {\r\n                            const joinColumn: JoinColumnMetadataArgs = {\r\n                                target: options.target || options.name,\r\n                                propertyName: relationName,\r\n                                name: relationSchema.joinColumn.name,\r\n                                referencedColumnName: relationSchema.joinColumn.referencedColumnName\r\n                            };\r\n                            metadataArgsStorage.joinColumns.push(joinColumn);\r\n                        }\r\n                    }\r\n\r\n                    // add join table\r\n                    if (relationSchema.joinTable) {\r\n                        if (typeof relationSchema.joinTable === \"boolean\") {\r\n                            const joinTable: JoinTableMetadataArgs = {\r\n                                target: options.target || options.name,\r\n                                propertyName: relationName\r\n                            };\r\n                            metadataArgsStorage.joinTables.push(joinTable);\r\n                        } else {\r\n                            const joinTable: JoinTableMetadataArgs = {\r\n                                target: options.target || options.name,\r\n                                propertyName: relationName,\r\n                                name: relationSchema.joinTable.name,\r\n                                database: relationSchema.joinTable.database,\r\n                                schema: relationSchema.joinTable.schema,\r\n                                joinColumns: ((relationSchema.joinTable as JoinTableOptions).joinColumn ? [(relationSchema.joinTable as JoinTableOptions).joinColumn!] : (relationSchema.joinTable as JoinTableMultipleColumnsOptions).joinColumns) as any,\r\n                                inverseJoinColumns: ((relationSchema.joinTable as JoinTableOptions).inverseJoinColumn ? [(relationSchema.joinTable as JoinTableOptions).inverseJoinColumn!] : (relationSchema.joinTable as JoinTableMultipleColumnsOptions).inverseJoinColumns) as any,\r\n                            };\r\n                            metadataArgsStorage.joinTables.push(joinTable);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            // add index metadata args from the schema\r\n            if (options.indices) {\r\n                options.indices.forEach(index => {\r\n                    const indexAgrs: IndexMetadataArgs = {\r\n                        target: options.target || options.name,\r\n                        name: index.name,\r\n                        unique: index.unique === true ? true : false,\r\n                        spatial: index.spatial === true ? true : false,\r\n                        fulltext: index.fulltext === true ? true : false,\r\n                        synchronize: index.synchronize === false ? false : true,\r\n                        where: index.where,\r\n                        sparse: index.sparse,\r\n                        columns: index.columns\r\n                    };\r\n                    metadataArgsStorage.indices.push(indexAgrs);\r\n                });\r\n            }\r\n\r\n            // add unique metadata args from the schema\r\n            if (options.uniques) {\r\n                options.uniques.forEach(unique => {\r\n                    const uniqueAgrs: UniqueMetadataArgs = {\r\n                        target: options.target || options.name,\r\n                        name: unique.name,\r\n                        columns: unique.columns\r\n                    };\r\n                    metadataArgsStorage.uniques.push(uniqueAgrs);\r\n                });\r\n            }\r\n\r\n            // add check metadata args from the schema\r\n            if (options.checks) {\r\n                options.checks.forEach(check => {\r\n                    const checkAgrs: CheckMetadataArgs = {\r\n                        target: options.target || options.name,\r\n                        name: check.name,\r\n                        expression: check.expression\r\n                    };\r\n                    metadataArgsStorage.checks.push(checkAgrs);\r\n                });\r\n            }\r\n\r\n        });\r\n\r\n        return metadataArgsStorage;\r\n    }\r\n}\r\n"],"sourceRoot":".."}