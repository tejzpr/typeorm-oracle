{"version":3,"sources":["../browser/src/metadata-builder/ClosureJunctionEntityMetadataBuilder.ts"],"names":[],"mappings":"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","file":"ClosureJunctionEntityMetadataBuilder.js","sourcesContent":["import {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\r\nimport {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\r\nimport {Connection} from \"../connection/Connection\";\r\n\r\n/**\r\n * Creates EntityMetadata for junction tables of the closure entities.\r\n * Closure junction tables are tables generated by closure entities.\r\n */\r\nexport class ClosureJunctionEntityMetadataBuilder {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private connection: Connection) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds EntityMetadata for the closure junction of the given closure entity.\r\n     */\r\n    build(parentClosureEntityMetadata: EntityMetadata) {\r\n\r\n        // create entity metadata itself\r\n        const entityMetadata = new EntityMetadata({\r\n            parentClosureEntityMetadata: parentClosureEntityMetadata,\r\n            connection: this.connection,\r\n            args: {\r\n                target: \"\",\r\n                name: parentClosureEntityMetadata.tableNameWithoutPrefix,\r\n                type: \"closure-junction\"\r\n            }\r\n        });\r\n        entityMetadata.build();\r\n\r\n        // create ancestor and descendant columns for new closure junction table\r\n        parentClosureEntityMetadata.primaryColumns.forEach(primaryColumn => {\r\n            entityMetadata.ownColumns.push(new ColumnMetadata({\r\n                connection: this.connection,\r\n                entityMetadata: entityMetadata,\r\n                closureType: \"ancestor\",\r\n                referencedColumn: primaryColumn,\r\n                args: {\r\n                    target: \"\",\r\n                    mode: \"virtual\",\r\n                    propertyName: primaryColumn.propertyName + \"_ancestor\", // todo: naming strategy\r\n                    options: {\r\n                        primary: true,\r\n                        length: primaryColumn.length,\r\n                        type: primaryColumn.type\r\n                    }\r\n                }\r\n            }));\r\n            entityMetadata.ownColumns.push(new ColumnMetadata({\r\n                connection: this.connection,\r\n                entityMetadata: entityMetadata,\r\n                closureType: \"descendant\",\r\n                referencedColumn: primaryColumn,\r\n                args: {\r\n                    target: \"\",\r\n                    mode: \"virtual\",\r\n                    propertyName: primaryColumn.propertyName + \"_descendant\",\r\n                    options: {\r\n                        primary: true,\r\n                        length: primaryColumn.length,\r\n                        type: primaryColumn.type,\r\n                    }\r\n                }\r\n            }));\r\n        });\r\n\r\n        // if tree level column was defined by a closure entity then add it to the junction columns as well\r\n        if (parentClosureEntityMetadata.treeLevelColumn) {\r\n            entityMetadata.ownColumns.push(new ColumnMetadata({\r\n                connection: this.connection,\r\n                entityMetadata: entityMetadata,\r\n                args: {\r\n                    target: \"\",\r\n                    mode: \"virtual\",\r\n                    propertyName: \"level\",\r\n                    options: {\r\n                        type: this.connection.driver.mappedDataTypes.treeLevel,\r\n                    }\r\n                }\r\n            }));\r\n        }\r\n\r\n        // create junction table foreign keys\r\n        entityMetadata.foreignKeys = [\r\n            new ForeignKeyMetadata({\r\n                entityMetadata: entityMetadata,\r\n                referencedEntityMetadata: parentClosureEntityMetadata,\r\n                columns: [entityMetadata.ownColumns[0]],\r\n                referencedColumns: parentClosureEntityMetadata.primaryColumns,\r\n                // onDelete: \"CASCADE\" // todo: does not work in mssql for some reason\r\n            }),\r\n            new ForeignKeyMetadata({\r\n                entityMetadata: entityMetadata,\r\n                referencedEntityMetadata: parentClosureEntityMetadata,\r\n                columns: [entityMetadata.ownColumns[1]],\r\n                referencedColumns: parentClosureEntityMetadata.primaryColumns,\r\n                // onDelete: \"CASCADE\" // todo: does not work in mssql for some reason\r\n            }),\r\n        ];\r\n\r\n        return entityMetadata;\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}