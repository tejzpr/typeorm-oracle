{"version":3,"sources":["../browser/src/entity-manager/EntityManager.ts"],"names":[],"mappings":"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","file":"EntityManager.js","sourcesContent":["import {Connection} from \"../connection/Connection\";\r\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\r\nimport {ObjectType} from \"../common/ObjectType\";\r\nimport { EntityNotFoundError } from \"../error/EntityNotFoundError\";\r\nimport {QueryRunnerProviderAlreadyReleasedError} from \"../error/QueryRunnerProviderAlreadyReleasedError\";\r\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\r\nimport {DeepPartial} from \"../common/DeepPartial\";\r\nimport {RemoveOptions} from \"../repository/RemoveOptions\";\r\nimport {SaveOptions} from \"../repository/SaveOptions\";\r\nimport {NoNeedToReleaseEntityManagerError} from \"../error/NoNeedToReleaseEntityManagerError\";\r\nimport {MongoRepository} from \"../repository/MongoRepository\";\r\nimport {TreeRepository} from \"../repository/TreeRepository\";\r\nimport {Repository} from \"../repository/Repository\";\r\nimport {FindOptionsUtils} from \"../find-options/FindOptionsUtils\";\r\nimport {PlainObjectToNewEntityTransformer} from \"../query-builder/transformer/PlainObjectToNewEntityTransformer\";\r\nimport {PlainObjectToDatabaseEntityTransformer} from \"../query-builder/transformer/PlainObjectToDatabaseEntityTransformer\";\r\nimport {CustomRepositoryNotFoundError} from \"../error/CustomRepositoryNotFoundError\";\r\nimport {EntitySchema, getMetadataArgsStorage, ObjectLiteral} from \"../index\";\r\nimport {AbstractRepository} from \"../repository/AbstractRepository\";\r\nimport {CustomRepositoryCannotInheritRepositoryError} from \"../error/CustomRepositoryCannotInheritRepositoryError\";\r\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\r\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\r\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\r\nimport {RepositoryNotFoundError} from \"../error/RepositoryNotFoundError\";\r\nimport {RepositoryNotTreeError} from \"../error/RepositoryNotTreeError\";\r\nimport {RepositoryFactory} from \"../repository/RepositoryFactory\";\r\nimport {TreeRepositoryNotSupportedError} from \"../error/TreeRepositoryNotSupportedError\";\r\nimport {QueryPartialEntity} from \"../query-builder/QueryPartialEntity\";\r\nimport {EntityPersistExecutor} from \"../persistence/EntityPersistExecutor\";\r\nimport {ObjectID} from \"../driver/mongodb/typings\";\r\nimport {InsertResult} from \"../query-builder/result/InsertResult\";\r\nimport {UpdateResult} from \"../query-builder/result/UpdateResult\";\r\nimport {DeleteResult} from \"../query-builder/result/DeleteResult\";\r\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\r\nimport {FindConditions} from \"../find-options/FindConditions\";\r\nimport {IsolationLevel} from \"../driver/types/IsolationLevel\";\r\n\r\n/**\r\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\r\n * whatever entity type are you passing.\r\n */\r\nexport class EntityManager {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection used by this entity manager.\r\n     */\r\n    readonly connection: Connection;\r\n\r\n    /**\r\n     * Custom query runner to be used for operations in this entity manager.\r\n     * Used only in non-global entity manager.\r\n     */\r\n    readonly queryRunner?: QueryRunner;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Once created and then reused by en repositories.\r\n     */\r\n    protected repositories: Repository<any>[] = [];\r\n\r\n    /**\r\n     * Plain to object transformer used in create and merge operations.\r\n     */\r\n    protected plainObjectToEntityTransformer = new PlainObjectToNewEntityTransformer();\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: Connection, queryRunner?: QueryRunner) {\r\n        this.connection = connection;\r\n        if (queryRunner) {\r\n            this.queryRunner = queryRunner;\r\n            // dynamic: this.queryRunner = manager;\r\n            Object.assign(this.queryRunner, { manager: this });\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Wraps given function execution (and all operations made there) in a transaction.\r\n     * All database operations must be executed using provided entity manager.\r\n     */\r\n    async transaction<T>(runInTransaction: (entityManger: EntityManager) => Promise<T>): Promise<T>;\r\n    async transaction<T>(isolationLevel: IsolationLevel, runInTransaction: (entityManger: EntityManager) => Promise<T>): Promise<T>;\r\n    async transaction<T>(\r\n        isolationOrRunInTransaction: IsolationLevel | ((entityManger: EntityManager) => Promise<T>),\r\n        runInTransactionParam?: (entityManger: EntityManager) => Promise<T>\r\n    ): Promise<T> {\r\n\r\n        const isolation = typeof isolationOrRunInTransaction === \"string\" ? isolationOrRunInTransaction : undefined;\r\n        const runInTransaction = typeof isolationOrRunInTransaction === \"function\" ? isolationOrRunInTransaction : runInTransactionParam;\r\n\r\n        if (!runInTransaction) {\r\n            throw new Error(`Transaction method requires callback in second paramter if isolation level is supplied.`);\r\n        }\r\n\r\n        if (this.connection.driver instanceof MongoDriver)\r\n            throw new Error(`Transactions aren't supported by MongoDB.`);\r\n\r\n        if (this.queryRunner && this.queryRunner.isReleased)\r\n            throw new QueryRunnerProviderAlreadyReleasedError();\r\n\r\n        if (this.queryRunner && this.queryRunner.isTransactionActive)\r\n            throw new Error(`Cannot start transaction because its already started`);\r\n\r\n        // if query runner is already defined in this class, it means this entity manager was already created for a single connection\r\n        // if its not defined we create a new query runner - single connection where we'll execute all our operations\r\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\r\n\r\n        try {\r\n            if (isolation) {\r\n                await queryRunner.startTransaction(isolation);\r\n              } else {\r\n                await queryRunner.startTransaction();\r\n              }\r\n            const result = await runInTransaction(queryRunner.manager);\r\n            await queryRunner.commitTransaction();\r\n            return result;\r\n\r\n        } catch (err) {\r\n            try { // we throw original error even if rollback thrown an error\r\n                await queryRunner.rollbackTransaction();\r\n            } catch (rollbackError) { }\r\n            throw err;\r\n\r\n        } finally {\r\n            if (!this.queryRunner) // if we used a new query runner provider then release it\r\n                await queryRunner.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes raw SQL query and returns raw database results.\r\n     */\r\n    async query(query: string, parameters?: any[]): Promise<any> {\r\n        return this.connection.query(query, parameters, this.queryRunner);\r\n    }\r\n\r\n    /**\r\n     * Creates a new query builder that can be used to build a sql query.\r\n     */\r\n    createQueryBuilder<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|Function|string, alias: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity>;\r\n\r\n    /**\r\n     * Creates a new query builder that can be used to build a sql query.\r\n     */\r\n    createQueryBuilder(queryRunner?: QueryRunner): SelectQueryBuilder<any>;\r\n\r\n    /**\r\n     * Creates a new query builder that can be used to build a sql query.\r\n     */\r\n    createQueryBuilder<Entity>(entityClass?: ObjectType<Entity>|EntitySchema<Entity>|Function|string|QueryRunner, alias?: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity> {\r\n        if (alias) {\r\n            return this.connection.createQueryBuilder(entityClass as Function|EntitySchema<Entity>|string, alias, queryRunner || this.queryRunner);\r\n\r\n        } else {\r\n            return this.connection.createQueryBuilder(entityClass as QueryRunner|undefined || queryRunner || this.queryRunner);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if entity has an id.\r\n     */\r\n    hasId(entity: any): boolean;\r\n\r\n    /**\r\n     * Checks if entity of given schema name has an id.\r\n     */\r\n    hasId(target: Function|string, entity: any): boolean;\r\n\r\n    /**\r\n     * Checks if entity has an id by its Function type or schema name.\r\n     */\r\n    hasId(targetOrEntity: any|Function|string, maybeEntity?: any): boolean {\r\n        const target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\r\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\r\n        const metadata = this.connection.getMetadata(target);\r\n        return metadata.hasId(entity);\r\n    }\r\n\r\n    /**\r\n     * Gets entity mixed id.\r\n     */\r\n    getId(entity: any): any;\r\n\r\n    /**\r\n     * Gets entity mixed id.\r\n     */\r\n    getId(target: Function|string, entity: any): any;\r\n\r\n    /**\r\n     * Gets entity mixed id.\r\n     */\r\n    getId(targetOrEntity: any|Function|string, maybeEntity?: any): any {\r\n        const target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\r\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\r\n        const metadata = this.connection.getMetadata(target);\r\n        return metadata.getEntityIdMixedMap(entity);\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity instance.\r\n     */\r\n    create<Entity>(entityClass: ObjectType<Entity>): Entity;\r\n\r\n    /**\r\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\r\n     * Note that it copies only properties that present in entity schema.\r\n     */\r\n    create<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, plainObject: DeepPartial<Entity>): Entity;\r\n\r\n    /**\r\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\r\n     * Note that it copies only properties that present in entity schema.\r\n     */\r\n    create<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, plainObjects: DeepPartial<Entity>[]): Entity[];\r\n\r\n    /**\r\n     * Creates a new entity instance or instances.\r\n     * Can copy properties from the given object into new entities.\r\n     */\r\n    create<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, plainObjectOrObjects?: DeepPartial<Entity>|DeepPartial<Entity>[]): Entity|Entity[] {\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n\r\n        if (!plainObjectOrObjects)\r\n            return metadata.create(this.queryRunner);\r\n\r\n        if (plainObjectOrObjects instanceof Array)\r\n            return plainObjectOrObjects.map(plainEntityLike => this.create(entityClass, plainEntityLike));\r\n\r\n        const mergeIntoEntity = metadata.create(this.queryRunner);\r\n        this.plainObjectToEntityTransformer.transform(mergeIntoEntity, plainObjectOrObjects, metadata, true);\r\n        return mergeIntoEntity;\r\n    }\r\n\r\n    /**\r\n     * Merges two entities into one new entity.\r\n     */\r\n    merge<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, mergeIntoEntity: Entity, ...entityLikes: DeepPartial<Entity>[]): Entity { // todo: throw exception if entity manager is released\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        entityLikes.forEach(object => this.plainObjectToEntityTransformer.transform(mergeIntoEntity, object, metadata));\r\n        return mergeIntoEntity;\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\r\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\r\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\r\n     * replaced from the new object.\r\n     */\r\n    async preload<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, entityLike: DeepPartial<Entity>): Promise<Entity|undefined> {\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        const plainObjectToDatabaseEntityTransformer = new PlainObjectToDatabaseEntityTransformer(this.connection.manager);\r\n        const transformedEntity = await plainObjectToDatabaseEntityTransformer.transform(entityLike, metadata);\r\n        if (transformedEntity)\r\n            return this.merge(entityClass, transformedEntity as Entity, entityLike);\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Saves all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    save<Entity>(entities: Entity[], options?: SaveOptions): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Saves all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    save<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Saves all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    save<Entity, T extends DeepPartial<Entity>>(targetOrEntity: ObjectType<Entity>|EntitySchema<Entity>|string, entities: T[], options?: SaveOptions): Promise<T[]>;\r\n\r\n    /**\r\n     * Saves all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    save<Entity, T extends DeepPartial<Entity>>(targetOrEntity: ObjectType<Entity>|EntitySchema<Entity>|string, entity: T, options?: SaveOptions): Promise<T>;\r\n\r\n    /**\r\n     * Saves a given entity in the database.\r\n     */\r\n    save<Entity, T extends DeepPartial<Entity>>(targetOrEntity: (T|T[])|ObjectType<Entity>|EntitySchema<Entity>|string, maybeEntityOrOptions?: T|T[], maybeOptions?: SaveOptions): Promise<T|T[]> {\r\n\r\n        // normalize mixed parameters\r\n        let target = (arguments.length > 1 && (targetOrEntity instanceof Function || targetOrEntity instanceof EntitySchema || typeof targetOrEntity === \"string\")) ? targetOrEntity as Function|string : undefined;\r\n        const entity: T|T[] = target ? maybeEntityOrOptions as T|T[] : targetOrEntity as T|T[];\r\n        const options = target ? maybeOptions : maybeEntityOrOptions as SaveOptions;\r\n\r\n        if (target instanceof EntitySchema)\r\n            target = target.options.name;\r\n\r\n        // if user passed empty array of entities then we don't need to do anything\r\n        if (entity instanceof Array && entity.length === 0)\r\n            return Promise.resolve(entity);\r\n\r\n        // execute save operation\r\n        return new EntityPersistExecutor(this.connection, this.queryRunner, \"save\", target, entity, options)\r\n            .execute()\r\n            .then(() => entity);\r\n    }\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(entity: Entity, options?: RemoveOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(targetOrEntity: ObjectType<Entity>|EntitySchema<Entity>|string, entity: Entity, options?: RemoveOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(entity: Entity[], options?: RemoveOptions): Promise<Entity>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(targetOrEntity: ObjectType<Entity>|EntitySchema<Entity>|string, entity: Entity[], options?: RemoveOptions): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove<Entity>(targetOrEntity: (Entity|Entity[])|Function|string, maybeEntityOrOptions?: Entity|Entity[], maybeOptions?: RemoveOptions): Promise<Entity|Entity[]> {\r\n\r\n        // normalize mixed parameters\r\n        const target = (arguments.length > 1 && (targetOrEntity instanceof Function || typeof targetOrEntity === \"string\")) ? targetOrEntity as Function|string : undefined;\r\n        const entity: Entity|Entity[] = target ? maybeEntityOrOptions as Entity|Entity[] : targetOrEntity as Entity|Entity[];\r\n        const options = target ? maybeOptions : maybeEntityOrOptions as SaveOptions;\r\n\r\n        // if user passed empty array of entities then we don't need to do anything\r\n        if (entity instanceof Array && entity.length === 0)\r\n            return Promise.resolve(entity);\r\n\r\n        // execute save operation\r\n        return new EntityPersistExecutor(this.connection, this.queryRunner, \"remove\", target, entity, options)\r\n            .execute()\r\n            .then(() => entity);\r\n    }\r\n\r\n    /**\r\n     * Inserts a given entity into the database.\r\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\r\n     * Executes fast and efficient INSERT query.\r\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\r\n     * You can execute bulk inserts using this method.\r\n     */\r\n    async insert<Entity>(target: ObjectType<Entity>|EntitySchema<Entity>|string, entity: QueryPartialEntity<Entity>|(QueryPartialEntity<Entity>[]), options?: SaveOptions): Promise<InsertResult> {\r\n\r\n        // TODO: Oracle does not support multiple values. Need to create another nice solution.\r\n        if (this.connection.driver instanceof OracleDriver && entity instanceof Array) {\r\n            const results = await Promise.all(entity.map(entity => this.insert(target, entity)));\r\n            return results.reduce((mergedResult, result) => Object.assign(mergedResult, result), {} as InsertResult);\r\n        }\r\n        return this.createQueryBuilder()\r\n            .insert()\r\n            .into(target)\r\n            .values(entity)\r\n            .execute();\r\n    }\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given condition(s).\r\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\r\n     * Executes fast and efficient UPDATE query.\r\n     * Does not check if entity exist in the database.\r\n     * Condition(s) cannot be empty.\r\n     */\r\n    update<Entity>(target: ObjectType<Entity>|EntitySchema<Entity>|string, criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindConditions<Entity>, partialEntity: DeepPartial<Entity>, options?: SaveOptions): Promise<UpdateResult> {\r\n        \r\n        // if user passed empty criteria or empty list of criterias, then throw an error\r\n        if (criteria === undefined ||\r\n            criteria === null ||\r\n            criteria === \"\" ||\r\n            (criteria instanceof Array && criteria.length === 0)) {\r\n\r\n            return Promise.reject(new Error(`Empty criteria(s) are not allowed for the update method.`));\r\n        }\r\n        \r\n        if (typeof criteria === \"string\" ||\r\n            typeof criteria === \"number\" ||\r\n            criteria instanceof Date ||\r\n            criteria instanceof Array) {\r\n\r\n            return this.createQueryBuilder()\r\n                .update(target)\r\n                .set(partialEntity)\r\n                .whereInIds(criteria)\r\n                .execute();\r\n\r\n        } else {\r\n            return this.createQueryBuilder()\r\n                .update(target)\r\n                .set(partialEntity)\r\n                .where(criteria)\r\n                .execute();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes entities by a given condition(s).\r\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\r\n     * Executes fast and efficient DELETE query.\r\n     * Does not check if entity exist in the database.\r\n     * Condition(s) cannot be empty.\r\n     */\r\n    delete<Entity>(targetOrEntity: ObjectType<Entity>|EntitySchema<Entity>|string, criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindConditions<Entity>, options?: RemoveOptions): Promise<DeleteResult> {\r\n        \r\n        // if user passed empty criteria or empty list of criterias, then throw an error\r\n        if (criteria === undefined ||\r\n            criteria === null ||\r\n            criteria === \"\" ||\r\n            (criteria instanceof Array && criteria.length === 0)) {\r\n\r\n            return Promise.reject(new Error(`Empty criteria(s) are not allowed for the delete method.`));\r\n        }\r\n        \r\n        if (typeof criteria === \"string\" ||\r\n            typeof criteria === \"number\" ||\r\n            criteria instanceof Date ||\r\n            criteria instanceof Array) {\r\n\r\n            return this.createQueryBuilder()\r\n                .delete()\r\n                .from(targetOrEntity)\r\n                .whereInIds(criteria)\r\n                .execute();\r\n\r\n        } else {\r\n            return this.createQueryBuilder()\r\n                .delete()\r\n                .from(targetOrEntity)\r\n                .where(criteria)\r\n                .execute();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Counts entities that match given options.\r\n     * Useful for pagination.\r\n     */\r\n    count<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, options?: FindManyOptions<Entity>): Promise<number>;\r\n\r\n    /**\r\n     * Counts entities that match given conditions.\r\n     * Useful for pagination.\r\n     */\r\n    count<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, conditions?: FindConditions<Entity>): Promise<number>;\r\n\r\n    /**\r\n     * Counts entities that match given find options or conditions.\r\n     * Useful for pagination.\r\n     */\r\n    async count<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|FindConditions<Entity>): Promise<number> {\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\r\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getCount();\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given options.\r\n     */\r\n    find<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, options?: FindManyOptions<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities that match given conditions.\r\n     */\r\n    find<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, conditions?: FindConditions<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities that match given find options or conditions.\r\n     */\r\n    async find<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|FindConditions<Entity>): Promise<Entity[]> {\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\r\n\r\n        if (!FindOptionsUtils.isFindManyOptions(optionsOrConditions) || optionsOrConditions.loadEagerRelations !== false)\r\n            FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);\r\n\r\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getMany();\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    findAndCount<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, options?: FindManyOptions<Entity>): Promise<[Entity[], number]>;\r\n\r\n    /**\r\n     * Finds entities that match given conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    findAndCount<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, conditions?: FindConditions<Entity>): Promise<[Entity[], number]>;\r\n\r\n    /**\r\n     * Finds entities that match given find options and conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    async findAndCount<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, optionsOrConditions?: FindManyOptions<Entity>|FindConditions<Entity>): Promise<[Entity[], number]> {\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\r\n\r\n        if (!FindOptionsUtils.isFindManyOptions(optionsOrConditions) || optionsOrConditions.loadEagerRelations !== false)\r\n            FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);\r\n\r\n        return FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions).getManyAndCount();\r\n    }\r\n\r\n    /**\r\n     * Finds entities with ids.\r\n     * Optionally find options can be applied.\r\n     */\r\n    findByIds<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, ids: any[], options?: FindManyOptions<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities with ids.\r\n     * Optionally conditions can be applied.\r\n     */\r\n    findByIds<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, ids: any[], conditions?: FindConditions<Entity>): Promise<Entity[]>;\r\n\r\n    /**\r\n     * Finds entities with ids.\r\n     * Optionally find options or conditions can be applied.\r\n     */\r\n    async findByIds<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, ids: any[], optionsOrConditions?: FindManyOptions<Entity>|FindConditions<Entity>): Promise<Entity[]> {\r\n\r\n        // if no ids passed, no need to execute a query - just return an empty array of values\r\n        if (!ids.length)\r\n            return Promise.resolve([]);\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        const qb = this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name);\r\n        FindOptionsUtils.applyFindManyOptionsOrConditionsToQueryBuilder(qb, optionsOrConditions);\r\n\r\n        if (!FindOptionsUtils.isFindManyOptions(optionsOrConditions) || optionsOrConditions.loadEagerRelations !== false)\r\n            FindOptionsUtils.joinEagerRelations(qb, qb.alias, metadata);\r\n\r\n        return qb.andWhereInIds(ids).getMany();\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given find options.\r\n     */\r\n    findOne<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, id?: string|number|Date|ObjectID, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds first entity that matches given find options.\r\n     */\r\n    findOne<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions.\r\n     */\r\n    findOne<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, conditions?: FindConditions<Entity>, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions.\r\n     */\r\n    async findOne<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, idOrOptionsOrConditions?: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindOneOptions<Entity>|FindConditions<Entity>, maybeOptions?: FindOneOptions<Entity>): Promise<Entity|undefined> {\r\n\r\n        let findOptions: FindOneOptions<any>|undefined = undefined;\r\n        if (FindOptionsUtils.isFindOneOptions(idOrOptionsOrConditions)) {\r\n            findOptions = idOrOptionsOrConditions;\r\n        } else if (maybeOptions && FindOptionsUtils.isFindOneOptions(maybeOptions)) {\r\n            findOptions = maybeOptions;\r\n        }\r\n\r\n        let options: ObjectLiteral|undefined = undefined;\r\n        if (idOrOptionsOrConditions instanceof Object && !FindOptionsUtils.isFindOneOptions(idOrOptionsOrConditions))\r\n            options = idOrOptionsOrConditions as ObjectLiteral;\r\n\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        let alias: string = metadata.name;\r\n        if (findOptions && findOptions.join) {\r\n            alias = findOptions.join.alias;\r\n\r\n        } else if (maybeOptions && FindOptionsUtils.isFindOneOptions(maybeOptions) && maybeOptions.join) {\r\n            alias = maybeOptions.join.alias;\r\n        }\r\n        const qb = this.createQueryBuilder(entityClass, alias);\r\n\r\n        if (!findOptions || findOptions.loadEagerRelations !== false)\r\n            FindOptionsUtils.joinEagerRelations(qb, qb.alias, qb.expressionMap.mainAlias!.metadata);\r\n\r\n        if (findOptions)\r\n            FindOptionsUtils.applyOptionsToQueryBuilder(qb, findOptions);\r\n\r\n        if (options) {\r\n            qb.where(options);\r\n\r\n        } else if (typeof idOrOptionsOrConditions === \"string\" || typeof idOrOptionsOrConditions === \"number\" || (idOrOptionsOrConditions as any) instanceof Date) {\r\n            qb.andWhereInIds(metadata.ensureEntityIdMap(idOrOptionsOrConditions));\r\n        }\r\n\r\n        return qb.getOne();\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given find options or rejects the returned promise on error.\r\n     */\r\n    findOneOrFail<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, id?: string|number|Date|ObjectID, options?: FindOneOptions<Entity>): Promise<Entity>;\r\n\r\n    /**\r\n     * Finds first entity that matches given find options or rejects the returned promise on error.\r\n     */\r\n    findOneOrFail<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, options?: FindOneOptions<Entity>): Promise<Entity>;\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions or rejects the returned promise on error.\r\n     */\r\n    findOneOrFail<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, conditions?: FindConditions<Entity>, options?: FindOneOptions<Entity>): Promise<Entity>;\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions or rejects the returned promise on error.\r\n     */\r\n    async findOneOrFail<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string, idOrOptionsOrConditions?: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindOneOptions<Entity>|FindConditions<Entity>, maybeOptions?: FindOneOptions<Entity>): Promise<Entity> {\r\n        return this.findOne(entityClass, idOrOptionsOrConditions as any, maybeOptions).then((value) => {\r\n            if (value === undefined) {\r\n                return Promise.reject(new EntityNotFoundError(entityClass, idOrOptionsOrConditions));\r\n            }\r\n            return Promise.resolve(value);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clears all the data from the given table (truncates/drops it).\r\n     *\r\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\r\n     * @see https://stackoverflow.com/a/5972738/925151\r\n     */\r\n    async clear<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string): Promise<void> {\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        const queryRunner = this.queryRunner || this.connection.createQueryRunner(\"master\");\r\n        try {\r\n            return await queryRunner.clearTable(metadata.tablePath); // await is needed here because we are using finally\r\n\r\n        } finally {\r\n            if (!this.queryRunner)\r\n                await queryRunner.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Increments some column by provided value of the entities matched given conditions.\r\n     */\r\n    async increment<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string,\r\n                            conditions: FindConditions<Entity>,\r\n                            propertyPath: string,\r\n                            value: number): Promise<void> {\r\n\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        const column = metadata.findColumnWithPropertyPath(propertyPath);\r\n        if (!column)\r\n            throw new Error(`Column ${propertyPath} was not found in ${metadata.targetName} entity.`);\r\n\r\n        await this\r\n            .createQueryBuilder(entityClass, \"entity\")\r\n            .update(entityClass)\r\n            .set({\r\n                [propertyPath]: () => this.connection.driver.escape(column.databaseName) + \" + \" + Number(value)\r\n            })\r\n            .where(conditions)\r\n            .execute();\r\n    }\r\n\r\n    /**\r\n     * Decrements some column by provided value of the entities matched given conditions.\r\n     */\r\n    async decrement<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|string,\r\n                            conditions: FindConditions<Entity>,\r\n                            propertyPath: string,\r\n                            value: number): Promise<void> {\r\n\r\n        const metadata = this.connection.getMetadata(entityClass);\r\n        const column = metadata.findColumnWithPropertyPath(propertyPath);\r\n        if (!column)\r\n            throw new Error(`Column ${propertyPath} was not found in ${metadata.targetName} entity.`);\r\n\r\n        await this\r\n            .createQueryBuilder(entityClass, \"entity\")\r\n            .update(entityClass)\r\n            .set({\r\n                [propertyPath]: () => this.connection.driver.escape(column.databaseName) + \" - \" + Number(value)\r\n            })\r\n            .where(conditions)\r\n            .execute();\r\n    }\r\n\r\n    /**\r\n     * Gets repository for the given entity class or name.\r\n     * If single database connection mode is used, then repository is obtained from the\r\n     * repository aggregator, where each repository is individually created for this entity manager.\r\n     * When single database connection is not used, repository is being obtained from the connection.\r\n     */\r\n    getRepository<Entity>(target: ObjectType<Entity>|EntitySchema<Entity>|string): Repository<Entity> {\r\n\r\n        // throw exception if there is no repository with this target registered\r\n        if (!this.connection.hasMetadata(target))\r\n            throw new RepositoryNotFoundError(this.connection.name, target);\r\n\r\n        // find already created repository instance and return it if found\r\n        const metadata = this.connection.getMetadata(target);\r\n        const repository = this.repositories.find(repository => repository.metadata === metadata);\r\n        if (repository)\r\n            return repository;\r\n\r\n        // if repository was not found then create it, store its instance and return it\r\n        const newRepository = new RepositoryFactory().create(this, metadata, this.queryRunner);\r\n        this.repositories.push(newRepository);\r\n        return newRepository;\r\n    }\r\n\r\n    /**\r\n     * Gets tree repository for the given entity class or name.\r\n     * If single database connection mode is used, then repository is obtained from the\r\n     * repository aggregator, where each repository is individually created for this entity manager.\r\n     * When single database connection is not used, repository is being obtained from the connection.\r\n     */\r\n    getTreeRepository<Entity>(target: ObjectType<Entity>|EntitySchema<Entity>|string): TreeRepository<Entity> {\r\n\r\n        // tree tables aren't supported by some drivers (mongodb)\r\n        if (this.connection.driver.treeSupport === false)\r\n            throw new TreeRepositoryNotSupportedError(this.connection.driver);\r\n\r\n        // check if repository is real tree repository\r\n        const repository = this.getRepository(target);\r\n        if (!(repository instanceof TreeRepository))\r\n            throw new RepositoryNotTreeError(target);\r\n\r\n        return repository;\r\n    }\r\n\r\n    /**\r\n     * Gets mongodb repository for the given entity class.\r\n     */\r\n    getMongoRepository<Entity>(target: ObjectType<Entity>|EntitySchema<Entity>|string): MongoRepository<Entity> {\r\n        return this.connection.getMongoRepository<Entity>(target);\r\n    }\r\n\r\n    /**\r\n     * Gets custom entity repository marked with @EntityRepository decorator.\r\n     */\r\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\r\n        const entityRepositoryMetadataArgs = getMetadataArgsStorage().entityRepositories.find(repository => {\r\n            return repository.target === (customRepository instanceof Function ? customRepository : (customRepository as any).constructor);\r\n        });\r\n        if (!entityRepositoryMetadataArgs)\r\n            throw new CustomRepositoryNotFoundError(customRepository);\r\n\r\n        const entityMetadata = entityRepositoryMetadataArgs.entity ? this.connection.getMetadata(entityRepositoryMetadataArgs.entity) : undefined;\r\n        const entityRepositoryInstance = new (entityRepositoryMetadataArgs.target as any)(this, entityMetadata);\r\n\r\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\r\n        // however we need these properties for internal work of the class\r\n        if (entityRepositoryInstance instanceof AbstractRepository) {\r\n            if (!(entityRepositoryInstance as any)[\"manager\"])\r\n                (entityRepositoryInstance as any)[\"manager\"] = this;\r\n        }\r\n        if (entityRepositoryInstance instanceof Repository) {\r\n            if (!entityMetadata)\r\n                throw new CustomRepositoryCannotInheritRepositoryError(customRepository);\r\n\r\n            (entityRepositoryInstance as any)[\"manager\"] = this;\r\n            (entityRepositoryInstance as any)[\"metadata\"] = entityMetadata;\r\n        }\r\n\r\n        return entityRepositoryInstance;\r\n    }\r\n\r\n    /**\r\n     * Releases all resources used by entity manager.\r\n     * This is used when entity manager is created with a single query runner,\r\n     * and this single query runner needs to be released after job with entity manager is done.\r\n     */\r\n    async release(): Promise<void> {\r\n        if (!this.queryRunner)\r\n            throw new NoNeedToReleaseEntityManagerError();\r\n\r\n        return this.queryRunner.release();\r\n    }\r\n}"],"sourceRoot":".."}