{"version":3,"sources":["../browser/src/entity-manager/SqljsEntityManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAO,EAAC,aAAa,EAAC,MAAM,iBAAiB,CAAC;AAG9C;;;GAGG;AACH;IAAwC,sCAAa;IAGjD,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,4BAAY,UAAsB,EAAE,WAAyB;QAA7D,YACI,kBAAM,UAAU,EAAE,WAAW,CAAC,SAEjC;QADG,KAAI,CAAC,MAAM,GAAG,UAAU,CAAC,MAAqB,CAAC;;IACnD,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;;OAGG;IACH,yCAAY,GAAZ,UAAa,4BAAiD;QAC1D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;IACnD,CAAC;IAED;;;OAGG;IACG,yCAAY,GAAlB,UAAmB,sBAA+B;;;;4BAC9C,qBAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,EAAA;;wBAA9C,SAA8C,CAAC;;;;;KAClD;IAED;;OAEG;IACH,2CAAc,GAAd;QACI,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;IAChC,CAAC;IAEJ,yBAAC;AAAD,CAvCD,AAuCE,CAvCsC,aAAa,GAuCnD","file":"SqljsEntityManager.js","sourcesContent":["import {Connection} from \"../connection/Connection\";\r\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\r\nimport {EntityManager} from \"./EntityManager\";\r\nimport {SqljsDriver} from \"../driver/sqljs/SqljsDriver\";\r\n\r\n/**\r\n * A special EntityManager that includes import/export and load/save function\r\n * that are unique to Sql.js.\r\n */\r\nexport class SqljsEntityManager extends EntityManager {\r\n    private driver: SqljsDriver;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: Connection, queryRunner?: QueryRunner) {\r\n        super(connection, queryRunner);\r\n        this.driver = connection.driver as SqljsDriver;\r\n    }\r\n    \r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Loads either the definition from a file (Node.js) or localstorage (browser)\r\n     * or uses the given definition to open a new database.\r\n     */\r\n    loadDatabase(fileNameOrLocalStorageOrData: string | Uint8Array) {\r\n        this.driver.load(fileNameOrLocalStorageOrData);\r\n    }\r\n    \r\n    /**\r\n     * Saves the current database to a file (Node.js) or localstorage (browser)\r\n     * if fileNameOrLocalStorage is not set options.location is used.\r\n     */\r\n    async saveDatabase(fileNameOrLocalStorage?: string): Promise<void> {\r\n        await this.driver.save(fileNameOrLocalStorage);\r\n    }\r\n\r\n    /**\r\n     * Returns the current database definition.\r\n     */\r\n    exportDatabase(): Uint8Array {\r\n        return this.driver.export();\r\n    }\r\n\r\n }"],"sourceRoot":".."}