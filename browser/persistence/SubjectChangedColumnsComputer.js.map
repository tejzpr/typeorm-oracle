{"version":3,"sources":["../browser/src/persistence/SubjectChangedColumnsComputer.ts"],"names":[],"mappings":"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","file":"SubjectChangedColumnsComputer.js","sourcesContent":["import {Subject} from \"./Subject\";\r\nimport {DateUtils} from \"../util/DateUtils\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\n\r\n/**\r\n * Finds what columns are changed in the subject entities.\r\n */\r\nexport class SubjectChangedColumnsComputer {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Finds what columns are changed in the subject entities.\r\n     */\r\n    compute(subjects: Subject[]) {\r\n        subjects.forEach(subject => {\r\n            this.computeDiffColumns(subject);\r\n            this.computeDiffRelationalColumns(subjects, subject);\r\n        });\r\n    }\r\n    \r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Differentiate columns from the updated entity and entity stored in the database.\r\n     */\r\n    protected computeDiffColumns(subject: Subject): void {\r\n\r\n        // if there is no persisted entity then nothing to compute changed in it\r\n        if (!subject.entity)\r\n            return;\r\n\r\n        subject.metadata.columns.forEach(column => {\r\n\r\n            // ignore special columns\r\n            if (column.isVirtual ||\r\n                column.isDiscriminator ||\r\n                column.isUpdateDate ||\r\n                column.isVersion ||\r\n                column.isCreateDate)\r\n                return;\r\n\r\n            // get user provided value - column value from the user provided persisted entity\r\n            const entityValue = column.getEntityValue(subject.entity!);\r\n\r\n            // we don't perform operation over undefined properties (but we DO need null properties!)\r\n            if (entityValue === undefined)\r\n                return;\r\n\r\n            // if there is no database entity then all columns are treated as new, e.g. changed\r\n            if (subject.databaseEntity) {\r\n\r\n                // get database value of the column\r\n                let databaseValue = column.getEntityValue(subject.databaseEntity);\r\n\r\n                // filter out \"relational columns\" only in the case if there is a relation object in entity\r\n                if (column.relationMetadata) {\r\n                    const value = column.relationMetadata.getEntityValue(subject.entity!);\r\n                    if (value !== null && value !== undefined)\r\n                        return;\r\n                }\r\n                let normalizedValue = entityValue;\r\n                // normalize special values to make proper comparision\r\n                if (entityValue !== null && entityValue !== undefined) {\r\n                    if (column.type === \"date\") {\r\n                        normalizedValue = DateUtils.mixedDateToDateString(entityValue);\r\n\r\n                    } else if (column.type === \"time\") {\r\n                        normalizedValue = DateUtils.mixedDateToTimeString(entityValue);\r\n\r\n                    } else if (column.type === \"datetime\" || column.type === Date) {\r\n                        normalizedValue = DateUtils.mixedDateToUtcDatetimeString(entityValue);\r\n                        databaseValue = DateUtils.mixedDateToUtcDatetimeString(databaseValue);\r\n\r\n                    } else if (column.type === \"json\" || column.type === \"jsonb\") {\r\n                        normalizedValue = JSON.stringify(entityValue);\r\n                        if (databaseValue !== null && databaseValue !== undefined)\r\n                            databaseValue = JSON.stringify(databaseValue);\r\n\r\n                    } else if (column.type === \"sample-array\") {\r\n                        normalizedValue = DateUtils.simpleArrayToString(entityValue);\r\n                        databaseValue = DateUtils.simpleArrayToString(databaseValue);\r\n                    }\r\n                }\r\n\r\n                // if value is not changed - then do nothing\r\n                if (normalizedValue === databaseValue)\r\n                    return;\r\n            }\r\n\r\n            // find if there is already a column to be changed\r\n            const changeMap = subject.changeMaps.find(changeMap => changeMap.column === column);\r\n            if (changeMap) { // and update its value if it was found\r\n                changeMap.value = entityValue;\r\n\r\n            } else { // if it wasn't found add a new column for change\r\n                subject.changeMaps.push({\r\n                    column: column,\r\n                    value: entityValue\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Difference columns of the owning one-to-one and many-to-one columns.\r\n     */\r\n    protected computeDiffRelationalColumns(allSubjects: Subject[], subject: Subject): void {\r\n\r\n        // if there is no persisted entity then nothing to compute changed in it\r\n        if (!subject.entity)\r\n            return;\r\n\r\n        subject.metadata.relationsWithJoinColumns.forEach(relation => {\r\n\r\n            // get the related entity from the persisted entity\r\n            let relatedEntity = relation.getEntityValue(subject.entity!);\r\n\r\n            // we don't perform operation over undefined properties (but we DO need null properties!)\r\n            if (relatedEntity === undefined)\r\n                return;\r\n\r\n            // if there is no database entity then all relational columns are treated as new, e.g. changed\r\n            if (subject.databaseEntity) {\r\n\r\n                // here we cover two scenarios:\r\n                // 1. related entity can be another entity which is natural way\r\n                // 2. related entity can be just an entity id\r\n                // if relation entity is just a relation id set (for example post.tag = 1)\r\n                // then we create an id map from it to make a proper comparision\r\n                let relatedEntityRelationIdMap: ObjectLiteral = relatedEntity;\r\n                if (relatedEntityRelationIdMap !== null && relatedEntityRelationIdMap instanceof Object)\r\n                    relatedEntityRelationIdMap = relation.getRelationIdMap(relatedEntityRelationIdMap)!;\r\n\r\n                // get database related entity. Since loadRelationIds are used on databaseEntity\r\n                // related entity will contain only its relation ids\r\n                const databaseRelatedEntityRelationIdMap = relation.getEntityValue(subject.databaseEntity);\r\n\r\n                // if relation ids are equal then we don't need to update anything\r\n                const areRelatedIdsEqual = EntityMetadata.compareIds(relatedEntityRelationIdMap, databaseRelatedEntityRelationIdMap);\r\n                if (areRelatedIdsEqual)\r\n                    return;\r\n            }\r\n\r\n            // if there is an inserted subject for the related entity of the persisted entity then use it as related entity\r\n            // this code is used for related entities without ids to be properly inserted (and then updated if needed)\r\n            const valueSubject = allSubjects.find(subject => subject.mustBeInserted && subject.entity === relatedEntity);\r\n            if (valueSubject)\r\n                relatedEntity = valueSubject;\r\n\r\n            // find if there is already a relation to be changed\r\n            const changeMap = subject.changeMaps.find(changeMap => changeMap.relation === relation);\r\n            if (changeMap) { // and update its value if it was found\r\n                changeMap.value = relatedEntity;\r\n\r\n            } else { // if it wasn't found add a new relation for change\r\n                subject.changeMaps.push({\r\n                    relation: relation,\r\n                    value: relatedEntity\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}