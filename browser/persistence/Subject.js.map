{"version":3,"sources":["../browser/src/persistence/Subject.ts"],"names":[],"mappings":"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","file":"Subject.js","sourcesContent":["import {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {SubjectChangeMap} from \"./SubjectChangeMap\";\r\nimport {OrmUtils} from \"../util/OrmUtils\";\r\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\r\n\r\n/**\r\n * Subject is a subject of persistence.\r\n * It holds information about each entity that needs to be persisted:\r\n * - what entity should be persisted\r\n * - what is database representation of the persisted entity\r\n * - what entity metadata of the persisted entity\r\n * - what is allowed to with persisted entity (insert/update/remove)\r\n *\r\n * Having this collection of subjects we can perform database queries.\r\n */\r\nexport class Subject {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata of the subject entity.\r\n     */\r\n    metadata: EntityMetadata;\r\n\r\n    /**\r\n     * Subject identifier.\r\n     * This identifier is not limited to table entity primary columns.\r\n     * This can be entity id or ids as well as some unique entity properties, like name or title.\r\n     * Insert / Update / Remove operation will be executed by a given identifier.\r\n     */\r\n    identifier: ObjectLiteral|undefined = undefined;\r\n\r\n    /**\r\n     * Copy of entity but with relational ids fulfilled.\r\n     */\r\n    entityWithFulfilledIds: ObjectLiteral|undefined = undefined;\r\n\r\n    /**\r\n     * If subject was created by cascades this property will contain subject\r\n     * from where this subject was created.\r\n     */\r\n    parentSubject?: Subject;\r\n\r\n    /**\r\n     * Gets entity sent to the persistence (e.g. changed entity).\r\n     * If entity is not set then this subject is created only for the entity loaded from the database,\r\n     * or this subject is used for the junction operation (junction operations are relying only on identifier).\r\n     */\r\n    entity?: ObjectLiteral;\r\n\r\n    /**\r\n     * Database entity.\r\n     * THIS IS NOT RAW ENTITY DATA, its a real entity.\r\n     */\r\n    databaseEntity?: ObjectLiteral;\r\n\r\n    /**\r\n     * Changes needs to be applied in the database for the given subject.\r\n     */\r\n    changeMaps: SubjectChangeMap[] = [];\r\n\r\n    /**\r\n     * Generated values returned by a database (for example generated id or default values).\r\n     * Used in insert and update operations.\r\n     * Has entity-like structure (not just column database name and values).\r\n     */\r\n    generatedMap?: ObjectLiteral;\r\n\r\n    /**\r\n     * Inserted values with updated values of special and default columns.\r\n     * Has entity-like structure (not just column database name and values).\r\n     */\r\n    insertedValueSet?: ObjectLiteral;\r\n\r\n    /**\r\n     * Indicates if this subject can be inserted into the database.\r\n     * This means that this subject either is newly persisted, either can be inserted by cascades.\r\n     */\r\n    canBeInserted: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this subject can be updated in the database.\r\n     * This means that this subject either was persisted, either can be updated by cascades.\r\n     */\r\n    canBeUpdated: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this subject MUST be removed from the database.\r\n     * This means that this subject either was removed, either was removed by cascades.\r\n     */\r\n    mustBeRemoved: boolean = false;\r\n\r\n    /**\r\n     * Relations updated by the change maps.\r\n     */\r\n    updatedRelationMaps: { relation: RelationMetadata, value: ObjectLiteral }[] = [];\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(options: {\r\n        metadata: EntityMetadata,\r\n        parentSubject?: Subject,\r\n        entity?: ObjectLiteral,\r\n        databaseEntity?: ObjectLiteral,\r\n        canBeInserted?: boolean,\r\n        canBeUpdated?: boolean,\r\n        mustBeRemoved?: boolean,\r\n        identifier?: ObjectLiteral,\r\n        changeMaps?: SubjectChangeMap[]\r\n    }) {\r\n        this.metadata = options.metadata;\r\n        this.entity = options.entity;\r\n        this.databaseEntity = options.databaseEntity;\r\n        this.parentSubject = options.parentSubject;\r\n        if (options.canBeInserted !== undefined)\r\n            this.canBeInserted = options.canBeInserted;\r\n        if (options.canBeUpdated !== undefined)\r\n            this.canBeUpdated = options.canBeUpdated;\r\n        if (options.mustBeRemoved !== undefined)\r\n            this.mustBeRemoved = options.mustBeRemoved;\r\n        if (options.identifier !== undefined)\r\n            this.identifier = options.identifier;\r\n        if (options.changeMaps !== undefined)\r\n            this.changeMaps.push(...options.changeMaps);\r\n\r\n        if (this.entity) {\r\n            this.entityWithFulfilledIds = Object.assign({}, this.entity);\r\n            if (this.parentSubject) {\r\n                this.metadata.primaryColumns.forEach(primaryColumn => {\r\n                    if (primaryColumn.relationMetadata && primaryColumn.relationMetadata.inverseEntityMetadata === this.parentSubject!.metadata) {\r\n                        primaryColumn.setEntityValue(this.entityWithFulfilledIds!, this.parentSubject!.entity);\r\n                    }\r\n                });\r\n            }\r\n            this.identifier = this.metadata.getEntityIdMap(this.entityWithFulfilledIds);\r\n\r\n        } else if (this.databaseEntity) {\r\n            this.identifier = this.metadata.getEntityIdMap(this.databaseEntity);\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Checks if this subject must be inserted into the database.\r\n     * Subject can be inserted into the database if it is allowed to be inserted (explicitly persisted or by cascades)\r\n     * and if it does not have database entity set.\r\n     */\r\n    get mustBeInserted() {\r\n        return this.canBeInserted && !this.databaseEntity;\r\n    }\r\n\r\n    /**\r\n     * Checks if this subject must be updated into the database.\r\n     * Subject can be updated in the database if it is allowed to be updated (explicitly persisted or by cascades)\r\n     * and if it does have differentiated columns or relations.\r\n     */\r\n    get mustBeUpdated() {\r\n        return this.canBeUpdated && this.identifier && (this.changeMaps.length > 0 || !!this.metadata.objectIdColumn); // for mongodb we do not compute changes - we always update entity\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a value set needs to be inserted / updated in the database.\r\n     * Value set is based on the entity and change maps of the subject.\r\n     * Important note: this method pops data from this subject's change maps.\r\n     */\r\n    createValueSetAndPopChangeMap(): ObjectLiteral {\r\n        const changeMapsWithoutValues: SubjectChangeMap[] = [];\r\n        const changeSet = this.changeMaps.reduce((updateMap, changeMap) => {\r\n            let value = changeMap.value;\r\n            if (value instanceof Subject) {\r\n\r\n                // referenced columns can refer on values both which were just inserted and which were present in the model\r\n                // if entity was just inserted valueSets must contain all values from the entity and values just inserted in the database\r\n                // so, here we check if we have a value set then we simply use it as value to get our reference column values\r\n                // otherwise simply use an entity which cannot be just inserted at the moment and have all necessary data\r\n                value = value.insertedValueSet ? value.insertedValueSet : value.entity;\r\n            }\r\n            // value = changeMap.valueFactory ? changeMap.valueFactory(value) : changeMap.column.createValueMap(value);\r\n\r\n            let valueMap: ObjectLiteral|undefined;\r\n            if (this.metadata.isJunction && changeMap.column) {\r\n                valueMap = changeMap.column.createValueMap(changeMap.column.referencedColumn!.getEntityValue(value));\r\n\r\n            } else if (changeMap.column) {\r\n                valueMap = changeMap.column.createValueMap(value);\r\n\r\n            } else if (changeMap.relation) {\r\n\r\n                // value can be a related object, for example: post.question = { id: 1 }\r\n                // or value can be a null or direct relation id, e.g. post.question = 1\r\n                // if its a direction relation id then we just set it to the valueMap,\r\n                // however if its an object then we need to extract its relation id map and set it to the valueMap\r\n                if (value instanceof Object) {\r\n\r\n                    // get relation id, e.g. referenced column name and its value,\r\n                    // for example: { id: 1 } which then will be set to relation, e.g. post.category = { id: 1 }\r\n                    const relationId = changeMap.relation!.getRelationIdMap(value);\r\n\r\n                    // but relation id can be empty, for example in the case when you insert a new post with category\r\n                    // and both post and category are newly inserted objects (by cascades) and in this case category will not have id\r\n                    // this means we need to insert post without question id and update post's questionId once question be inserted\r\n                    // that's why we create a new changeMap operation for future updation of the post entity\r\n                    if (relationId === undefined) {\r\n                        changeMapsWithoutValues.push(changeMap);\r\n                        this.canBeUpdated = true;\r\n                        return updateMap;\r\n                    }\r\n                    valueMap = changeMap.relation!.createValueMap(relationId);\r\n                    this.updatedRelationMaps.push({ relation: changeMap.relation, value: relationId });\r\n\r\n                } else { // value can be \"null\" or direct relation id here\r\n                    valueMap = changeMap.relation!.createValueMap(value);\r\n                    this.updatedRelationMaps.push({ relation: changeMap.relation, value: value });\r\n                }\r\n            }\r\n\r\n            OrmUtils.mergeDeep(updateMap, valueMap);\r\n            return updateMap;\r\n        }, {} as ObjectLiteral);\r\n        this.changeMaps = changeMapsWithoutValues;\r\n        return changeSet;\r\n    }\r\n\r\n}"],"sourceRoot":".."}