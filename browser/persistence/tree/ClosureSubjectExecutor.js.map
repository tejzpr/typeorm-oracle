{"version":3,"sources":["../browser/src/persistence/tree/ClosureSubjectExecutor.ts"],"names":[],"mappings":"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","file":"ClosureSubjectExecutor.js","sourcesContent":["import {Subject} from \"../Subject\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {CannotAttachTreeChildrenEntityError} from \"../../error/CannotAttachTreeChildrenEntityError\";\r\n\r\n/**\r\n * Executes subject operations for closure entities.\r\n */\r\nexport class ClosureSubjectExecutor {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected queryRunner: QueryRunner) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Removes all children of the given subject's entity.\r\n\r\n    async deleteChildrenOf(subject: Subject) {\r\n        // const relationValue = subject.metadata.treeParentRelation.getEntityValue(subject.databaseEntity);\r\n        // console.log(\"relationValue: \", relationValue);\r\n        // this.queryRunner.manager\r\n        //     .createQueryBuilder()\r\n        //     .from(subject.metadata.closureJunctionTable.target, \"tree\")\r\n        //     .where(\"tree.\");\r\n    }*/\r\n\r\n    /**\r\n     * Executes operations when subject is being inserted.\r\n     */\r\n    async insert(subject: Subject): Promise<void> {\r\n\r\n        // create values to be inserted into the closure junction\r\n        const closureJunctionInsertMap: ObjectLiteral = {};\r\n        subject.metadata.closureJunctionTable.ancestorColumns.forEach(column => {\r\n            closureJunctionInsertMap[column.databaseName] = subject.identifier;\r\n        });\r\n        subject.metadata.closureJunctionTable.descendantColumns.forEach(column => {\r\n            closureJunctionInsertMap[column.databaseName] = subject.identifier;\r\n        });\r\n\r\n        // insert values into the closure junction table\r\n        await this.queryRunner\r\n            .manager\r\n            .createQueryBuilder()\r\n            .insert()\r\n            .into(subject.metadata.closureJunctionTable.tablePath)\r\n            .values(closureJunctionInsertMap)\r\n            .updateEntity(false)\r\n            .callListeners(false)\r\n            .execute();\r\n\r\n        let parent = subject.metadata.treeParentRelation!.getEntityValue(subject.entity!); // if entity was attached via parent\r\n        if (!parent && subject.parentSubject && subject.parentSubject.entity) // if entity was attached via children\r\n            parent = subject.parentSubject.insertedValueSet ? subject.parentSubject.insertedValueSet : subject.parentSubject.entity;\r\n\r\n        if (parent) {\r\n            const escape = (alias: string) => this.queryRunner.connection.driver.escape(alias);\r\n            const tableName = this.getTableName(subject.metadata.closureJunctionTable.tablePath);\r\n            const ancestorColumnNames = subject.metadata.closureJunctionTable.ancestorColumns.map(column => {\r\n                return escape(column.databaseName);\r\n            });\r\n            const descendantColumnNames = subject.metadata.closureJunctionTable.descendantColumns.map(column => {\r\n                return escape(column.databaseName);\r\n            });\r\n            const firstQueryParameters: any[] = [];\r\n            const childEntityIdValues = subject.metadata.primaryColumns.map(column => column.getEntityValue(subject.insertedValueSet!));\r\n            const childEntityIds1 = subject.metadata.primaryColumns.map((column, index) => {\r\n                firstQueryParameters.push(childEntityIdValues[index]);\r\n                return this.queryRunner.connection.driver.createParameter(\"child_entity_\" + column.databaseName, firstQueryParameters.length - 1);\r\n            });\r\n            const whereCondition = subject.metadata.primaryColumns.map(column => {\r\n                const columnName = escape(column.databaseName + \"_descendant\");\r\n                const parentId = column.getEntityValue(parent);\r\n                if (!parentId)\r\n                    throw new CannotAttachTreeChildrenEntityError(subject.metadata.name);\r\n\r\n                firstQueryParameters.push(parentId);\r\n                const parameterName = this.queryRunner.connection.driver.createParameter(\"parent_entity_\" + column.databaseName, firstQueryParameters.length - 1);\r\n                return columnName + \" = \" + parameterName;\r\n            }).join(\", \");\r\n\r\n            await this.queryRunner.query(\r\n                `INSERT INTO ${tableName} (${[...ancestorColumnNames, ...descendantColumnNames].join(\", \")}) ` +\r\n                `SELECT ${ancestorColumnNames.join(\", \")}, ${childEntityIds1.join(\", \")} FROM ${tableName} WHERE ${whereCondition}`,\r\n                firstQueryParameters\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets escaped table name with schema name if SqlServer or Postgres driver used with custom\r\n     * schema name, otherwise returns escaped table name.\r\n     */\r\n    protected getTableName(tablePath: string): string {\r\n        return tablePath.split(\".\")\r\n            .map(i => {\r\n                // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\r\n                if (i === \"\")\r\n                    return i;\r\n                return this.queryRunner.connection.driver.escape(i);\r\n            }).join(\".\");\r\n    }\r\n\r\n\r\n}"],"sourceRoot":"../.."}