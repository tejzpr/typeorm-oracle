{"version":3,"sources":["../browser/src/decorator/transaction/TransactionRepository.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,sBAAsB,EAAC,MAAM,QAAQ,CAAC;AAE9C,OAAO,EAAC,qCAAqC,EAAC,MAAM,mDAAmD,CAAC;AAExG;;GAEG;AACH,MAAM,gCAAgC,UAAqB;IACvD,OAAO,UAAC,MAAc,EAAE,UAAkB,EAAE,KAAa;QAErD,sBAAsB;QACtB,IAAI,cAAwB,CAAC;QAC7B,IAAI;YACA,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC,mBAAmB,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC;SAC3F;QAAC,OAAO,GAAG,EAAE;YACV,MAAM,IAAI,qCAAqC,CAAC,MAAM,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;SACnF;QAED,sBAAsB,EAAE,CAAC,uBAAuB,CAAC,IAAI,CAAC;YAClD,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,UAAU,YAAA;YACV,KAAK,OAAA;YACL,cAAc,gBAAA;YACd,UAAU,YAAA;SACwB,CAAC,CAAC;IAC5C,CAAC,CAAC;AACN,CAAC","file":"TransactionRepository.js","sourcesContent":["import {getMetadataArgsStorage} from \"../../\";\r\nimport {TransactionRepositoryMetadataArgs} from \"../../metadata-args/TransactionRepositoryMetadataArgs\";\r\nimport {CannotReflectMethodParameterTypeError} from \"../../error/CannotReflectMethodParameterTypeError\";\r\n\r\n/**\r\n * Injects transaction's repository into the method wrapped with @Transaction decorator.\r\n */\r\nexport function TransactionRepository(entityType?: Function): ParameterDecorator {\r\n    return (object: Object, methodName: string, index: number) => {\r\n\r\n        // get repository type\r\n        let repositoryType: Function;\r\n        try {\r\n            repositoryType = Reflect.getOwnMetadata(\"design:paramtypes\", object, methodName)[index];\r\n        } catch (err) {\r\n            throw new CannotReflectMethodParameterTypeError(object.constructor, methodName);\r\n        }\r\n        \r\n        getMetadataArgsStorage().transactionRepositories.push({\r\n            target: object.constructor,\r\n            methodName,\r\n            index,\r\n            repositoryType,\r\n            entityType,\r\n        } as TransactionRepositoryMetadataArgs);\r\n    };\r\n}\r\n"],"sourceRoot":"../.."}