{"version":3,"sources":["../browser/src/decorator/transaction/Transaction.ts"],"names":[],"mappings":"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","file":"Transaction.js","sourcesContent":["import {getConnection, getMetadataArgsStorage, MongoRepository, Repository, TreeRepository, EntityManager} from \"../../\";\r\nimport {TransactionOptions} from \"../options/TransactionOptions\";\r\nimport {IsolationLevel} from \"../../driver/types/IsolationLevel\";\r\n\r\n/**\r\n * Wraps some method into the transaction.\r\n *\r\n * Method result will return a promise if this decorator applied.\r\n * All database operations in the wrapped method should be executed using entity managed passed\r\n * as a first parameter into the wrapped method.\r\n *\r\n * If you want to control at what position in your method parameters entity manager should be injected,\r\n * then use @TransactionEntityManager() decorator.\r\n *\r\n * If you want to use repositories instead of bare entity manager,\r\n * then use @TransactionRepository() decorator.\r\n */\r\nexport function Transaction(connectionName?: string): MethodDecorator;\r\nexport function Transaction(options?: TransactionOptions): MethodDecorator;\r\nexport function Transaction(connectionOrOptions?: string | TransactionOptions): MethodDecorator {\r\n    return function (target: Object, methodName: string, descriptor: PropertyDescriptor) {\r\n\r\n        // save original method - we gonna need it\r\n        const originalMethod = descriptor.value;\r\n\r\n        // override method descriptor with proxy method\r\n        descriptor.value = function(...args: any[]) {\r\n            let connectionName = \"default\";\r\n            let isolationLevel: IsolationLevel | undefined = undefined;\r\n            if (connectionOrOptions) {\r\n                if (typeof connectionOrOptions === \"string\") {\r\n                    connectionName = connectionOrOptions;\r\n                } else {\r\n                    if (connectionOrOptions.hasOwnProperty(\"connectionName\") && connectionOrOptions.connectionName) {\r\n                        connectionName = connectionOrOptions.connectionName;\r\n                    }\r\n                    if (connectionOrOptions.hasOwnProperty(\"isolation\") && connectionOrOptions.isolationLevel) {\r\n                        isolationLevel = connectionOrOptions.isolationLevel;\r\n                    }\r\n                }\r\n            }\r\n\r\n            const transactionCallback = (entityManager: EntityManager) => {\r\n                let argsWithInjectedTransactionManagerAndRepositories: any[];\r\n\r\n                // filter all @TransactionEntityManager() and @TransactionRepository() decorator usages for this method\r\n                const transactionEntityManagerMetadatas = getMetadataArgsStorage()\r\n                    .filterTransactionEntityManagers(target.constructor, methodName)\r\n                    .reverse();\r\n                const transactionRepositoryMetadatas = getMetadataArgsStorage()\r\n                    .filterTransactionRepository(target.constructor, methodName)\r\n                    .reverse();\r\n\r\n                // if there are @TransactionEntityManager() decorator usages the inject them\r\n                if (transactionEntityManagerMetadatas.length > 0) {\r\n                    argsWithInjectedTransactionManagerAndRepositories = [...args];\r\n                    // replace method params with injection of transactionEntityManager\r\n                    transactionEntityManagerMetadatas.forEach(metadata => {\r\n                        argsWithInjectedTransactionManagerAndRepositories.splice(metadata.index, 0, entityManager);\r\n                    });\r\n\r\n                } else if (transactionRepositoryMetadatas.length === 0) { // otherwise if there's no transaction repositories in use, inject it as a first parameter\r\n                    argsWithInjectedTransactionManagerAndRepositories = [entityManager, ...args];\r\n\r\n                } else {\r\n                    argsWithInjectedTransactionManagerAndRepositories = [...args];\r\n                }\r\n\r\n                // for every usage of @TransactionRepository decorator\r\n                transactionRepositoryMetadatas.forEach(metadata => {\r\n                    let repositoryInstance: any;\r\n\r\n                    // detect type of the repository and get instance from transaction entity manager\r\n                    switch (metadata.repositoryType) {\r\n                        case Repository:\r\n                            repositoryInstance = entityManager.getRepository(metadata.entityType!);\r\n                            break;\r\n                        case MongoRepository:\r\n                            repositoryInstance = entityManager.getMongoRepository(metadata.entityType!);\r\n                            break;\r\n                        case TreeRepository:\r\n                            repositoryInstance = entityManager.getTreeRepository(metadata.entityType!);\r\n                            break;\r\n                        // if not the TypeORM's ones, there must be custom repository classes\r\n                        default:\r\n                            repositoryInstance = entityManager.getCustomRepository(metadata.repositoryType);\r\n                    }\r\n\r\n                    // replace method param with injection of repository instance\r\n                    argsWithInjectedTransactionManagerAndRepositories.splice(metadata.index, 0, repositoryInstance);\r\n                });\r\n\r\n                return originalMethod.apply(this, argsWithInjectedTransactionManagerAndRepositories);\r\n            };\r\n            if (isolationLevel) {\r\n                return getConnection(connectionName).manager.transaction(isolationLevel, transactionCallback);\r\n            } else {\r\n                return getConnection(connectionName).manager.transaction(transactionCallback);\r\n            }\r\n        };\r\n    };\r\n}\r\n"],"sourceRoot":"../.."}