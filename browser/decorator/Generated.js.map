{"version":3,"sources":["../browser/src/decorator/Generated.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,sBAAsB,EAAC,MAAM,KAAK,CAAC;AAG3C;;;;;;;GAOG;AACH,MAAM,oBAAoB,QAA0C;IAA1C,yBAAA,EAAA,sBAA0C;IAChE,OAAO,UAAU,MAAc,EAAE,YAAoB;QAEjD,sBAAsB,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC;YACtC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,QAAQ,EAAE,QAAQ;SACI,CAAC,CAAC;IAChC,CAAC,CAAC;AACN,CAAC","file":"Generated.js","sourcesContent":["import {getMetadataArgsStorage} from \"../\";\r\nimport {GeneratedMetadataArgs} from \"../metadata-args/GeneratedMetadataArgs\";\r\n\r\n/**\r\n * Marks a column to generate a value on entity insertion.\r\n * There are two types of generation strategy - increment and uuid.\r\n * Increment uses a number which increases by one on each insertion.\r\n * Uuid generates a special UUID token.\r\n *\r\n * Note, some databases do not support non-primary generation columns.\r\n */\r\nexport function Generated(strategy: \"increment\"|\"uuid\" = \"increment\"): Function {\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        getMetadataArgsStorage().generations.push({\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            strategy: strategy\r\n        } as GeneratedMetadataArgs);\r\n    };\r\n}\r\n"],"sourceRoot":".."}