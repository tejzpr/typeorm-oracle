{"version":3,"sources":["../browser/src/decorator/tree/TreeParent.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,sBAAsB,EAAC,MAAM,QAAQ,CAAC;AAG9C;;;GAGG;AACH,MAAM;IACF,OAAO,UAAU,MAAc,EAAE,YAAoB;QAEjD,4CAA4C;QAC5C,IAAM,aAAa,GAAG,OAAO,IAAK,OAAe,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACrI,IAAM,MAAM,GAAG,CAAC,aAAa,IAAI,OAAO,aAAa,CAAC,IAAI,KAAK,QAAQ,IAAI,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,SAAS,CAAC,IAAI,KAAK,CAAC;QAEpI,sBAAsB,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC;YACpC,YAAY,EAAE,IAAI;YAClB,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,MAAM,EAAE,MAAM;YACd,YAAY,EAAE,aAAa;YAC3B,IAAI,EAAE,cAAM,OAAA,MAAM,CAAC,WAAW,EAAlB,CAAkB;YAC9B,OAAO,EAAE,EAAE;SACU,CAAC,CAAC;IAC/B,CAAC,CAAC;AACN,CAAC","file":"TreeParent.js","sourcesContent":["import {getMetadataArgsStorage} from \"../../\";\r\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\r\n\r\n/**\r\n * Marks a entity property as a parent of the tree.\r\n * \"Tree parent\" indicates who owns (is a parent) of this entity in tree structure.\r\n */\r\nexport function TreeParent(): Function {\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        // now try to determine it its lazy relation\r\n        const reflectedType = Reflect && (Reflect as any).getMetadata ? Reflect.getMetadata(\"design:type\", object, propertyName) : undefined;\r\n        const isLazy = (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\") || false;\r\n\r\n        getMetadataArgsStorage().relations.push({\r\n            isTreeParent: true,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            isLazy: isLazy,\r\n            relationType: \"many-to-one\",\r\n            type: () => object.constructor,\r\n            options: {}\r\n        } as RelationMetadataArgs);\r\n    };\r\n}\r\n"],"sourceRoot":"../.."}