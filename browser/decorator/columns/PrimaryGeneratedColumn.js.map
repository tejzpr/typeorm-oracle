{"version":3,"sources":["../browser/src/decorator/columns/PrimaryGeneratedColumn.ts"],"names":[],"mappings":"AAAA,OAAO,EAAgB,sBAAsB,EAAC,MAAM,QAAQ,CAAC;AAyB7D;;;;GAIG;AACH,MAAM,iCAAiC,iBAA6G,EAC7G,YAAqF;IAExH,uBAAuB;IACvB,IAAM,OAAO,GAAkB,EAAE,CAAC;IAClC,IAAI,QAA4B,CAAC;IACjC,IAAI,iBAAiB,EAAE;QACnB,IAAI,OAAO,iBAAiB,KAAK,QAAQ;YACrC,QAAQ,GAAG,iBAAuC,CAAC;QAEvD,IAAI,iBAAiB,YAAY,MAAM,EAAE;YACrC,QAAQ,GAAG,WAAW,CAAC;YACvB,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;SAC7C;KACJ;SAAM;QACH,QAAQ,GAAG,WAAW,CAAC;KAC1B;IACD,IAAI,YAAY,YAAY,MAAM;QAC9B,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;IAEzC,OAAO,UAAU,MAAc,EAAE,YAAoB;QAEjD,sFAAsF;QACtF,IAAI,CAAC,OAAO,CAAC,IAAI;YACb,OAAO,CAAC,IAAI,GAAG,QAAQ,KAAK,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;QAE9D,2DAA2D;QAC3D,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC;QAEvB,gCAAgC;QAChC,sBAAsB,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC;YAClC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,OAAO;SACnB,CAAC,CAAC;QAEH,mCAAmC;QACnC,sBAAsB,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC;YACtC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,QAAQ,EAAE,QAAQ;SACI,CAAC,CAAC;IAChC,CAAC,CAAC;AACN,CAAC","file":"PrimaryGeneratedColumn.js","sourcesContent":["import {ColumnOptions, getMetadataArgsStorage} from \"../../\";\r\nimport {PrimaryGeneratedColumnNumericOptions} from \"../options/PrimaryGeneratedColumnNumericOptions\";\r\nimport {PrimaryGeneratedColumnUUIDOptions} from \"../options/PrimaryGeneratedColumnUUIDOptions\";\r\nimport {GeneratedMetadataArgs} from \"../../metadata-args/GeneratedMetadataArgs\";\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n */\r\nexport function PrimaryGeneratedColumn(): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n */\r\nexport function PrimaryGeneratedColumn(options: PrimaryGeneratedColumnNumericOptions): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n */\r\nexport function PrimaryGeneratedColumn(strategy: \"increment\", options?: PrimaryGeneratedColumnNumericOptions): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n */\r\nexport function PrimaryGeneratedColumn(strategy: \"uuid\", options?: PrimaryGeneratedColumnUUIDOptions): Function;\r\n\r\n/**\r\n * Column decorator is used to mark a specific class property as a table column.\r\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\r\n * This column creates an integer PRIMARY COLUMN with generated set to true.\r\n */\r\nexport function PrimaryGeneratedColumn(strategyOrOptions?: \"increment\"|\"uuid\"|PrimaryGeneratedColumnNumericOptions|PrimaryGeneratedColumnUUIDOptions,\r\n                                       maybeOptions?: PrimaryGeneratedColumnNumericOptions|PrimaryGeneratedColumnUUIDOptions): Function {\r\n\r\n    // normalize parameters\r\n    const options: ColumnOptions = {};\r\n    let strategy: \"increment\"|\"uuid\";\r\n    if (strategyOrOptions) {\r\n        if (typeof strategyOrOptions === \"string\")\r\n            strategy = strategyOrOptions as \"increment\"|\"uuid\";\r\n\r\n        if (strategyOrOptions instanceof Object) {\r\n            strategy = \"increment\";\r\n            Object.assign(options, strategyOrOptions);\r\n        }\r\n    } else {\r\n        strategy = \"increment\";\r\n    }\r\n    if (maybeOptions instanceof Object)\r\n        Object.assign(options, maybeOptions);\r\n\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        // if column type is not explicitly set then determine it based on generation strategy\r\n        if (!options.type)\r\n            options.type = strategy === \"increment\" ? Number : \"uuid\";\r\n\r\n        // explicitly set a primary and generated to column options\r\n        options.primary = true;\r\n\r\n        // register column metadata args\r\n        getMetadataArgsStorage().columns.push({\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            mode: \"regular\",\r\n            options: options\r\n        });\r\n\r\n        // register generated metadata args\r\n        getMetadataArgsStorage().generations.push({\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            strategy: strategy\r\n        } as GeneratedMetadataArgs);\r\n    };\r\n}\r\n"],"sourceRoot":"../.."}