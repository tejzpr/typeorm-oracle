{"version":3,"sources":["../browser/src/decorator/relations/JoinTable.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,sBAAsB,EAAmB,MAAM,QAAQ,CAAC;AAsBhE;;;GAGG;AACH,MAAM,oBAAoB,OAA0D;IAChF,OAAO,UAAU,MAAc,EAAE,YAAoB;QACjD,OAAO,GAAG,OAAO,IAAI,EAAsD,CAAC;QAC5E,sBAAsB,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC;YACrC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,WAAW,EAAE,CAAC,OAAO,IAAK,OAA4B,CAAC,UAAU,CAAC,CAAC,CAAC,CAAE,OAA4B,CAAC,UAAW,CAAC,CAAC,CAAC,CAAE,OAA2C,CAAC,WAAW,CAAQ;YAClL,kBAAkB,EAAE,CAAC,OAAO,IAAK,OAA4B,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAE,OAA4B,CAAC,iBAAkB,CAAC,CAAC,CAAC,CAAE,OAA2C,CAAC,kBAAkB,CAAQ;YAC9M,MAAM,EAAE,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS;YAC9D,QAAQ,EAAE,OAAO,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS;SAC9C,CAAC,CAAC;IAChC,CAAC,CAAC;AACN,CAAC","file":"JoinTable.js","sourcesContent":["import {getMetadataArgsStorage, JoinTableOptions} from \"../../\";\r\nimport {JoinTableMetadataArgs} from \"../../metadata-args/JoinTableMetadataArgs\";\r\nimport {JoinTableMultipleColumnsOptions} from \"../options/JoinTableMuplipleColumnsOptions\";\r\n\r\n/**\r\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\r\n * Its also used to set a custom junction table's name, column names and referenced columns.\r\n */\r\nexport function JoinTable(): Function;\r\n\r\n/**\r\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\r\n * Its also used to set a custom junction table's name, column names and referenced columns.\r\n */\r\nexport function JoinTable(options: JoinTableOptions): Function;\r\n\r\n/**\r\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\r\n * Its also used to set a custom junction table's name, column names and referenced columns.\r\n */\r\nexport function JoinTable(options: JoinTableMultipleColumnsOptions): Function;\r\n\r\n/**\r\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\r\n * Its also used to set a custom junction table's name, column names and referenced columns.\r\n */\r\nexport function JoinTable(options?: JoinTableOptions|JoinTableMultipleColumnsOptions): Function {\r\n    return function (object: Object, propertyName: string) {\r\n        options = options || {} as JoinTableOptions|JoinTableMultipleColumnsOptions;\r\n        getMetadataArgsStorage().joinTables.push({\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            name: options.name,\r\n            joinColumns: (options && (options as JoinTableOptions).joinColumn ? [(options as JoinTableOptions).joinColumn!] : (options as JoinTableMultipleColumnsOptions).joinColumns) as any,\r\n            inverseJoinColumns: (options && (options as JoinTableOptions).inverseJoinColumn ? [(options as JoinTableOptions).inverseJoinColumn!] : (options as JoinTableMultipleColumnsOptions).inverseJoinColumns) as any,\r\n            schema: options && options.schema ? options.schema : undefined,\r\n            database: options && options.database ? options.database : undefined,\r\n        } as JoinTableMetadataArgs);\r\n    };\r\n}\r\n"],"sourceRoot":"../.."}