{"version":3,"sources":["../browser/src/decorator/relations/RelationId.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,sBAAsB,EAAqB,MAAM,QAAQ,CAAC;AAGlE;;;;GAIG;AACH,MAAM,qBAAwB,QAAqC,EAAE,KAAc,EAAE,mBAA8E;IAC/J,OAAO,UAAU,MAAc,EAAE,YAAoB;QAEjD,sBAAsB,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC;YACtC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,QAAQ,EAAE,QAAQ;YAClB,KAAK,EAAE,KAAK;YACZ,mBAAmB,EAAE,mBAAmB;SACjB,CAAC,CAAC;IACjC,CAAC,CAAC;AACN,CAAC","file":"RelationId.js","sourcesContent":["import {getMetadataArgsStorage, SelectQueryBuilder} from \"../../\";\r\nimport {RelationIdMetadataArgs} from \"../../metadata-args/RelationIdMetadataArgs\";\r\n\r\n/**\r\n * Special decorator used to extract relation id into separate entity property.\r\n *\r\n * @experimental\r\n */\r\nexport function RelationId<T>(relation: string|((object: T) => any), alias?: string, queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>): Function {\r\n    return function (object: Object, propertyName: string) {\r\n\r\n        getMetadataArgsStorage().relationIds.push({\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            relation: relation,\r\n            alias: alias,\r\n            queryBuilderFactory: queryBuilderFactory\r\n        } as RelationIdMetadataArgs);\r\n    };\r\n}\r\n"],"sourceRoot":"../.."}