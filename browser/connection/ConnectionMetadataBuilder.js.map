{"version":3,"sources":["../browser/src/connection/ConnectionMetadataBuilder.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,4BAA4B,EAAC,MAAM,wCAAwC,CAAC;AACpF,OAAO,EAAC,QAAQ,EAAC,MAAM,kBAAkB,CAAC;AAC1C,OAAO,EAAC,gBAAgB,EAAC,MAAM,cAAc,CAAC;AAE9C,OAAO,EAAC,sBAAsB,EAAC,MAAM,UAAU,CAAC;AAChD,OAAO,EAAC,qBAAqB,EAAC,MAAM,2CAA2C,CAAC;AAChF,OAAO,EAAC,uBAAuB,EAAC,MAAM,0CAA0C,CAAC;AAEjF,OAAO,EAAC,YAAY,EAAC,MAAM,+BAA+B,CAAC;AAI3D;;GAEG;AACH;IAEI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,mCAAsB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAC5C,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,mDAAe,GAAf,UAAgB,UAA+B;QACrC,IAAA,gDAAsF,EAArF,wBAAgB,EAAE,4BAAoB,CAAgD;QAC7F,IAAM,mBAAmB,GAAO,gBAAgB,QAAK,4BAA4B,CAAC,oBAAoB,CAAC,CAAC,CAAC;QACzG,OAAO,mBAAmB,CAAC,GAAG,CAAC,UAAA,cAAc,IAAI,OAAA,gBAAgB,CAAqB,cAAc,CAAC,EAApD,CAAoD,CAAC,CAAC;IAC3G,CAAC;IAED;;OAEG;IACH,oDAAgB,GAAhB,UAAiB,WAAgC;QACvC,IAAA,uDAA+F,EAA9F,yBAAiB,EAAE,6BAAqB,CAAuD;QACtG,IAAM,oBAAoB,GAAO,iBAAiB,QAAK,4BAA4B,CAAC,qBAAqB,CAAC,CAAC,CAAC;QAC5G,OAAO,sBAAsB,EAAE;aAC1B,iBAAiB,CAAC,oBAAoB,CAAC;aACvC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,gBAAgB,CAAiC,QAAQ,CAAC,MAAM,CAAC,EAAjE,CAAiE,CAAC,CAAC;IAC5F,CAAC;IAED;;OAEG;IACH,wDAAoB,GAApB,UAAqB,QAA+C;QAChE,iEAAiE;QAE3D,IAAA,oDAA6F,EAA5F,8BAAsB,EAAE,yBAAiB,CAAoD;QACpG,IAAM,aAAa,GAAe,sBAAsB,CAAC,MAAM,CAAC,UAAA,WAAW,IAAI,OAAA,CAAC,WAAW,YAAY,YAAY,CAAC,KAAK,KAAK,EAA/C,CAA+C,CAAQ,CAAC;QACvI,IAAM,aAAa,GAAwB,sBAAsB,CAAC,MAAM,CAAC,UAAA,WAAW,IAAI,OAAA,WAAW,YAAY,YAAY,EAAnC,CAAmC,CAAQ,CAAC;QAEpI,IAAM,gBAAgB,GAAO,aAAa,QAAK,4BAA4B,CAAC,iBAAiB,CAAC,CAAC,CAAC;QAChG,gBAAgB,CAAC,OAAO,CAAC,UAAA,WAAW;YAChC,IAAI,WAAW,YAAY,YAAY,EAAE;gBACrC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAChC,gBAAgB,CAAC,KAAK,CAAC,gBAAgB,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;aACpE;QACL,CAAC,CAAC,CAAC;QACH,IAAM,wBAAwB,GAAG,IAAI,qBAAqB,CAAC,IAAI,CAAC,UAAU,EAAE,sBAAsB,EAAE,CAAC,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;QAE9H,IAAM,6BAA6B,GAAG,IAAI,uBAAuB,EAAE,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;QAC7F,IAAM,qBAAqB,GAAG,IAAI,qBAAqB,CAAC,IAAI,CAAC,UAAU,EAAE,6BAA6B,CAAC,CAAC,KAAK,EAAE,CAAC;QAEhH,OAAW,wBAAwB,QAAK,qBAAqB,EAAE;IACnE,CAAC;IAEL,gCAAC;AAAD,CA1DA,AA0DC,IAAA","file":"ConnectionMetadataBuilder.js","sourcesContent":["import {importClassesFromDirectories} from \"../util/DirectoryExportedClassesLoader\";\r\nimport {OrmUtils} from \"../util/OrmUtils\";\r\nimport {getFromContainer} from \"../container\";\r\nimport {MigrationInterface} from \"../migration/MigrationInterface\";\r\nimport {getMetadataArgsStorage} from \"../index\";\r\nimport {EntityMetadataBuilder} from \"../metadata-builder/EntityMetadataBuilder\";\r\nimport {EntitySchemaTransformer} from \"../entity-schema/EntitySchemaTransformer\";\r\nimport {Connection} from \"./Connection\";\r\nimport {EntitySchema} from \"../entity-schema/EntitySchema\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {EntitySubscriberInterface} from \"../subscriber/EntitySubscriberInterface\";\r\n\r\n/**\r\n * Builds migration instances, subscriber instances and entity metadatas for the given classes.\r\n */\r\nexport class ConnectionMetadataBuilder {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds migration instances for the given classes or directories.\r\n     */\r\n    buildMigrations(migrations: (Function|string)[]): MigrationInterface[] {\r\n        const [migrationClasses, migrationDirectories] = OrmUtils.splitClassesAndStrings(migrations);\r\n        const allMigrationClasses = [...migrationClasses, ...importClassesFromDirectories(migrationDirectories)];\r\n        return allMigrationClasses.map(migrationClass => getFromContainer<MigrationInterface>(migrationClass));\r\n    }\r\n\r\n    /**\r\n     * Builds subscriber instances for the given classes or directories.\r\n     */\r\n    buildSubscribers(subscribers: (Function|string)[]): EntitySubscriberInterface<any>[] {\r\n        const [subscriberClasses, subscriberDirectories] = OrmUtils.splitClassesAndStrings(subscribers || []);\r\n        const allSubscriberClasses = [...subscriberClasses, ...importClassesFromDirectories(subscriberDirectories)];\r\n        return getMetadataArgsStorage()\r\n            .filterSubscribers(allSubscriberClasses)\r\n            .map(metadata => getFromContainer<EntitySubscriberInterface<any>>(metadata.target));\r\n    }\r\n\r\n    /**\r\n     * Builds entity metadatas for the given classes or directories.\r\n     */\r\n    buildEntityMetadatas(entities: (Function|EntitySchema<any>|string)[]): EntityMetadata[] {\r\n        // todo: instead we need to merge multiple metadata args storages\r\n\r\n        const [entityClassesOrSchemas, entityDirectories] = OrmUtils.splitClassesAndStrings(entities || []);\r\n        const entityClasses: Function[] = entityClassesOrSchemas.filter(entityClass => (entityClass instanceof EntitySchema) === false) as any;\r\n        const entitySchemas: EntitySchema<any>[] = entityClassesOrSchemas.filter(entityClass => entityClass instanceof EntitySchema) as any;\r\n\r\n        const allEntityClasses = [...entityClasses, ...importClassesFromDirectories(entityDirectories)];\r\n        allEntityClasses.forEach(entityClass => { // if we have entity schemas loaded from directories\r\n            if (entityClass instanceof EntitySchema) {\r\n                entitySchemas.push(entityClass);\r\n                allEntityClasses.slice(allEntityClasses.indexOf(entityClass), 1);\r\n            }\r\n        });\r\n        const decoratorEntityMetadatas = new EntityMetadataBuilder(this.connection, getMetadataArgsStorage()).build(allEntityClasses);\r\n\r\n        const metadataArgsStorageFromSchema = new EntitySchemaTransformer().transform(entitySchemas);\r\n        const schemaEntityMetadatas = new EntityMetadataBuilder(this.connection, metadataArgsStorageFromSchema).build();\r\n\r\n        return [...decoratorEntityMetadatas, ...schemaEntityMetadatas];\r\n    }\r\n\r\n}"],"sourceRoot":".."}