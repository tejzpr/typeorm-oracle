{"version":3,"sources":["../browser/src/error/DataTypeNotSupportedError.ts"],"names":[],"mappings":";;;;;;;;;;AAIA;IAA+C,6CAAK;IAGhD,mCAAY,MAAsB,EAAE,QAAoB,EAAE,QAAuB;QAAjF,YACI,iBAAO,SAIV;QAPD,UAAI,GAAG,2BAA2B,CAAC;QAI/B,MAAM,CAAC,cAAc,CAAC,KAAI,EAAE,yBAAyB,CAAC,SAAS,CAAC,CAAC;QACjE,IAAM,IAAI,GAAG,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAO,QAAS,CAAC,IAAI,CAAC;QAC5E,KAAI,CAAC,OAAO,GAAG,iBAAc,IAAI,gBAAS,MAAM,CAAC,cAAc,CAAC,UAAU,SAAI,MAAM,CAAC,YAAY,iCAA0B,QAAQ,iBAAa,CAAC;;IACrJ,CAAC;IAEL,gCAAC;AAAD,CAVA,AAUC,CAV8C,KAAK,GAUnD","file":"DataTypeNotSupportedError.js","sourcesContent":["import {ColumnType} from \"../driver/types/ColumnTypes\";\r\nimport {DatabaseType} from \"../driver/types/DatabaseType\";\r\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\r\n\r\nexport class DataTypeNotSupportedError extends Error {\r\n    name = \"DataTypeNotSupportedError\";\r\n\r\n    constructor(column: ColumnMetadata, dataType: ColumnType, database?: DatabaseType) {\r\n        super();\r\n        Object.setPrototypeOf(this, DataTypeNotSupportedError.prototype);\r\n        const type = typeof dataType === \"string\" ? dataType : (<any>dataType).name;\r\n        this.message = `Data type \"${type}\" in \"${column.entityMetadata.targetName}.${column.propertyName}\" is not supported by \"${database}\" database.`;\r\n    }\r\n\r\n}"],"sourceRoot":".."}