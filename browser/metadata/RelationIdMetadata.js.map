{"version":3,"sources":["../browser/src/metadata/RelationIdMetadata.ts"],"names":[],"mappings":"AAMA;;GAEG;AACH;IAyCI,wEAAwE;IACxE,cAAc;IACd,wEAAwE;IAExE,4BAAY,OAGX;QACG,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;QAC7C,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC;QAClC,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC;QAC9C,IAAI,CAAC,qBAAqB,GAAG,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC;QACnD,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;QAChC,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC;IAChE,CAAC;IAED,wEAAwE;IACxE,iBAAiB;IACjB,wEAAwE;IAExE;;;;OAIG;IACH,qCAAQ,GAAR,UAAS,MAAqB;QAA9B,iBAaC;QAZG,IAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAE3D,IAAI,aAAa,YAAY,KAAK,EAAE;YAChC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,aAAa,CAAC,GAAG,CAAC,UAAA,IAAI;gBAC/C,OAAO,KAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;YACxE,CAAC,CAAC,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,SAAS,EAAnC,CAAmC,CAAC,CAAC;SAE1D;aAAM;YACH,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC;YACrF,IAAI,KAAK,KAAK,SAAS;gBACnB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;SACzC;IACL,CAAC;IAED,wEAAwE;IACxE,yBAAyB;IACzB,wEAAwE;IAExE;;;OAGG;IACH,kCAAK,GAAL;QACI,IAAM,YAAY,GAAG,IAAI,CAAC,qBAAqB,YAAY,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC;QACjK,IAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,4BAA4B,CAAC,YAAY,CAAC,CAAC;QAChF,IAAI,CAAC,QAAQ;YACT,MAAM,IAAI,KAAK,CAAC,0BAAwB,YAAY,0DAAuD,CAAC,CAAC;QAEjH,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAGL,yBAAC;AAAD,CAnGA,AAmGC,IAAA","file":"RelationIdMetadata.js","sourcesContent":["import {RelationIdMetadataArgs} from \"../metadata-args/RelationIdMetadataArgs\";\r\nimport {EntityMetadata} from \"./EntityMetadata\";\r\nimport {RelationMetadata} from \"./RelationMetadata\";\r\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\n\r\n/**\r\n * Contains all information about entity's relation count.\r\n */\r\nexport class RelationIdMetadata {\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata where this column metadata is.\r\n     */\r\n    entityMetadata: EntityMetadata;\r\n\r\n    /**\r\n     * Relation from which ids will be extracted.\r\n     */\r\n    relation: RelationMetadata;\r\n\r\n    /**\r\n     * Relation name which need to count.\r\n     */\r\n    relationNameOrFactory: string|((object: any) => any);\r\n\r\n    /**\r\n     * Target class to which metadata is applied.\r\n     */\r\n    target: Function|string;\r\n\r\n    /**\r\n     * Target's property name to which this metadata is applied.\r\n     */\r\n    propertyName: string;\r\n\r\n    /**\r\n     * Alias of the joined (destination) table.\r\n     */\r\n    alias?: string;\r\n\r\n    /**\r\n     * Extra condition applied to \"ON\" section of join.\r\n     */\r\n    queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(options: {\r\n        entityMetadata: EntityMetadata,\r\n        args: RelationIdMetadataArgs\r\n    }) {\r\n        this.entityMetadata = options.entityMetadata;\r\n        this.target = options.args.target;\r\n        this.propertyName = options.args.propertyName;\r\n        this.relationNameOrFactory = options.args.relation;\r\n        this.alias = options.args.alias;\r\n        this.queryBuilderFactory = options.args.queryBuilderFactory;\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Sets relation id value from the given entity.\r\n     *\r\n     * todo: make it to work in embeds as well.\r\n     */\r\n    setValue(entity: ObjectLiteral) {\r\n        const inverseEntity = this.relation.getEntityValue(entity);\r\n\r\n        if (inverseEntity instanceof Array) {\r\n            entity[this.propertyName] = inverseEntity.map(item => {\r\n               return this.relation.inverseEntityMetadata.getEntityIdMixedMap(item);\r\n            }).filter(item => item !== null && item !== undefined);\r\n\r\n        } else {\r\n            const value = this.relation.inverseEntityMetadata.getEntityIdMixedMap(inverseEntity);\r\n            if (value !== undefined)\r\n                entity[this.propertyName] = value;\r\n        }\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Builder Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds some depend relation id properties.\r\n     * This builder method should be used only after entity metadata, its properties map and all relations are build.\r\n     */\r\n    build() {\r\n        const propertyPath = this.relationNameOrFactory instanceof Function ? this.relationNameOrFactory(this.entityMetadata.propertiesMap) : this.relationNameOrFactory;\r\n        const relation = this.entityMetadata.findRelationWithPropertyPath(propertyPath);\r\n        if (!relation)\r\n            throw new Error(`Cannot find relation ${propertyPath}. Wrong relation specified for @RelationId decorator.`);\r\n\r\n        this.relation = relation;\r\n    }\r\n\r\n\r\n}"],"sourceRoot":".."}