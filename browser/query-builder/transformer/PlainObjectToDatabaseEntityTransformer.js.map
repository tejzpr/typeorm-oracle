{"version":3,"sources":["../browser/src/query-builder/transformer/PlainObjectToDatabaseEntityTransformer.ts"],"names":[],"mappings":"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","file":"PlainObjectToDatabaseEntityTransformer.js","sourcesContent":["import {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\r\nimport {EntityManager} from \"../../entity-manager/EntityManager\";\r\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\r\n\r\n/**\r\n */\r\nclass LoadMapItem {\r\n\r\n    entity?: ObjectLiteral;\r\n    plainEntity: ObjectLiteral;\r\n    metadata: EntityMetadata;\r\n    parentLoadMapItem?: LoadMapItem;\r\n    relation?: RelationMetadata;\r\n\r\n    constructor(plainEntity: ObjectLiteral,\r\n                metadata: EntityMetadata,\r\n                parentLoadMapItem?: LoadMapItem,\r\n                relation?: RelationMetadata) {\r\n        this.plainEntity = plainEntity;\r\n        this.metadata = metadata;\r\n        this.parentLoadMapItem = parentLoadMapItem;\r\n        this.relation = relation;\r\n    }\r\n\r\n    get target(): Function|string {\r\n        return this.metadata.target;\r\n    }\r\n\r\n    get id(): any {\r\n        return this.metadata.getEntityIdMixedMap(this.plainEntity);\r\n    }\r\n\r\n}\r\n\r\nclass LoadMap {\r\n\r\n    loadMapItems: LoadMapItem[] = [];\r\n\r\n    get mainLoadMapItem(): LoadMapItem|undefined {\r\n        return this.loadMapItems.find(item => !item.relation && !item.parentLoadMapItem);\r\n    }\r\n\r\n    addLoadMap(newLoadMap: LoadMapItem) {\r\n        const item = this.loadMapItems.find(item => item.target === newLoadMap.target && item.id === newLoadMap.id);\r\n        if (!item)\r\n            this.loadMapItems.push(newLoadMap);\r\n    }\r\n\r\n    fillEntities(target: Function|string, entities: any[]) {\r\n        entities.forEach(entity => {\r\n            const item = this.loadMapItems.find(loadMapItem => {\r\n                return loadMapItem.target === target && loadMapItem.metadata.compareEntities(entity, loadMapItem.plainEntity);\r\n            });\r\n            if (item)\r\n                item.entity = entity;\r\n        });\r\n    }\r\n\r\n    groupByTargetIds(): { target: Function|string, ids: any[] }[] {\r\n        const groups: { target: Function|string, ids: any[] }[] = [];\r\n        this.loadMapItems.forEach(loadMapItem => {\r\n            let group = groups.find(group => group.target === loadMapItem.target);\r\n            if (!group) {\r\n                group = { target: loadMapItem.target, ids: [] };\r\n                groups.push(group);\r\n            }\r\n\r\n            group.ids.push(loadMapItem.id);\r\n        });\r\n        return groups;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Transforms plain old javascript object\r\n * Entity is constructed based on its entity metadata.\r\n */\r\nexport class PlainObjectToDatabaseEntityTransformer {\r\n\r\n    constructor(private manager: EntityManager) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    async transform(plainObject: ObjectLiteral, metadata: EntityMetadata): Promise<ObjectLiteral|undefined> {\r\n\r\n        // if plain object does not have id then nothing to load really\r\n        if (!metadata.hasAllPrimaryKeys(plainObject))\r\n            return Promise.reject(\"Given object does not have a primary column, cannot transform it to database entity.\");\r\n\r\n        // create a special load map that will hold all metadata that will be used to operate with entities easily\r\n        const loadMap = new LoadMap();\r\n        const fillLoadMap = (entity: ObjectLiteral, entityMetadata: EntityMetadata, parentLoadMapItem?: LoadMapItem, relation?: RelationMetadata) => {\r\n            const item = new LoadMapItem(entity, entityMetadata, parentLoadMapItem, relation);\r\n            loadMap.addLoadMap(item);\r\n\r\n            entityMetadata\r\n                .extractRelationValuesFromEntity(entity, metadata.relations)\r\n                .filter(value => value !== null && value !== undefined)\r\n                .forEach(([relation, value, inverseEntityMetadata]) => fillLoadMap(value, inverseEntityMetadata, item, relation));\r\n        };\r\n        fillLoadMap(plainObject, metadata);\r\n        // load all entities and store them in the load map\r\n        await Promise.all(loadMap.groupByTargetIds().map(targetWithIds => { // todo: fix type hinting\r\n            return this.manager\r\n                .findByIds<ObjectLiteral>(targetWithIds.target as any, targetWithIds.ids)\r\n                .then(entities => loadMap.fillEntities(targetWithIds.target, entities));\r\n        }));\r\n\r\n        // go through each item in the load map and set their entity relationship using metadata stored in load map\r\n        loadMap.loadMapItems.forEach(loadMapItem => {\r\n            if (!loadMapItem.relation ||\r\n                !loadMapItem.entity ||\r\n                !loadMapItem.parentLoadMapItem ||\r\n                !loadMapItem.parentLoadMapItem.entity)\r\n                return;\r\n\r\n            if (loadMapItem.relation.isManyToMany || loadMapItem.relation.isOneToMany) {\r\n                if (!loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName])\r\n                    loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = [];\r\n                loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName].push(loadMapItem.entity);\r\n\r\n            } else {\r\n                loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = loadMapItem.entity;\r\n            }\r\n        });\r\n\r\n        return loadMap.mainLoadMapItem ? loadMap.mainLoadMapItem.entity : undefined;\r\n    }\r\n\r\n}"],"sourceRoot":"../.."}