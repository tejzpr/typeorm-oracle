{"version":3,"sources":["../browser/src/query-runner/QueryRunner.ts"],"names":[],"mappings":"","file":"QueryRunner.js","sourcesContent":["import {TableColumn} from \"../schema-builder/table/TableColumn\";\r\nimport {Table} from \"../schema-builder/table/Table\";\r\nimport {TableForeignKey} from \"../schema-builder/table/TableForeignKey\";\r\nimport {TableIndex} from \"../schema-builder/table/TableIndex\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {ReadStream} from \"../platform/PlatformTools\";\r\nimport {EntityManager} from \"../entity-manager/EntityManager\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {SqlInMemory} from \"../driver/SqlInMemory\";\r\nimport {TableUnique} from \"../schema-builder/table/TableUnique\";\r\nimport {Broadcaster} from \"../subscriber/Broadcaster\";\r\nimport {TableCheck} from \"../schema-builder/table/TableCheck\";\r\nimport {IsolationLevel} from \"../driver/types/IsolationLevel\";\r\n\r\n/**\r\n * Runs queries on a single database connection.\r\n */\r\nexport interface QueryRunner {\r\n\r\n    /**\r\n     * Connection used by this query runner.\r\n     */\r\n    readonly connection: Connection;\r\n\r\n    /**\r\n     * Broadcaster used on this query runner to broadcast entity events.\r\n     */\r\n    readonly broadcaster: Broadcaster;\r\n\r\n    /**\r\n     * Entity manager working only with this query runner.\r\n     */\r\n    readonly manager: EntityManager;\r\n\r\n    /**\r\n     * Indicates if connection for this query runner is released.\r\n     * Once its released, query runner cannot run queries anymore.\r\n     */\r\n    readonly isReleased: boolean;\r\n\r\n    /**\r\n     * Indicates if transaction is in progress.\r\n     */\r\n    readonly isTransactionActive: boolean;\r\n\r\n    /**\r\n     * Stores temporarily user data.\r\n     * Useful for sharing data with subscribers.\r\n     */\r\n    data: ObjectLiteral;\r\n\r\n    /**\r\n     * All synchronized tables in the database.\r\n     */\r\n    loadedTables: Table[];\r\n\r\n    /**\r\n     * Creates/uses database connection from the connection pool to perform further operations.\r\n     * Returns obtained database connection.\r\n     */\r\n    connect(): Promise<any>;\r\n\r\n    /**\r\n     * Releases used database connection.\r\n     * You cannot use query runner methods after connection is released.\r\n     */\r\n    release(): Promise<void>;\r\n\r\n    /**\r\n     * Removes all tables from the currently connected database.\r\n     * Be careful with using this method and avoid using it in production or migrations\r\n     * (because it can clear all your database).\r\n     */\r\n    clearDatabase(database?: string): Promise<void>;\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    startTransaction(isolationLevel?: IsolationLevel): Promise<void>;\r\n\r\n    /**\r\n     * Commits transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    commitTransaction(): Promise<void>;\r\n\r\n    /**\r\n     * Ends transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    rollbackTransaction(): Promise<void>;\r\n\r\n    /**\r\n     * Executes a given SQL query and returns raw database results.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any>;\r\n\r\n    /**\r\n     * Returns raw data stream.\r\n     */\r\n    stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream>;\r\n\r\n    /**\r\n     * Returns all available database names including system databases.\r\n     */\r\n    getDatabases(): Promise<string[]>;\r\n\r\n    /**\r\n     * Returns all available schema names including system schemas.\r\n     * If database parameter specified, returns schemas of that database.\r\n     * Useful for SQLServer and Postgres only.\r\n     */\r\n    getSchemas(database?: string): Promise<string[]>;\r\n\r\n    /**\r\n     * Loads a table by a given name from the database.\r\n     */\r\n    getTable(tableName: string): Promise<Table|undefined>;\r\n\r\n    /**\r\n     * Loads all tables from the database and returns them.\r\n     *\r\n     * todo: make tableNames optional\r\n     */\r\n    getTables(tableNames: string[]): Promise<Table[]>;\r\n\r\n    /**\r\n     * Checks if a database with the given name exist.\r\n     */\r\n    hasDatabase(database: string): Promise<boolean>;\r\n\r\n    /**\r\n     * Checks if a schema with the given name exist.\r\n     */\r\n    hasSchema(schema: string): Promise<boolean>;\r\n\r\n    /**\r\n     * Checks if a table with the given name exist.\r\n     */\r\n    hasTable(table: Table|string): Promise<boolean>;\r\n\r\n    /**\r\n     * Checks if a column exist in the table.\r\n     */\r\n    hasColumn(table: Table|string, columnName: string): Promise<boolean>;\r\n\r\n    /**\r\n     * Creates a new database.\r\n     */\r\n    createDatabase(database: string, ifNotExist?: boolean): Promise<void>;\r\n\r\n    /**\r\n     * Drops database.\r\n     */\r\n    dropDatabase(database: string, ifExist?: boolean): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new table schema.\r\n     */\r\n    createSchema(schemaPath: string, ifNotExist?: boolean): Promise<void>;\r\n\r\n    /**\r\n     * Drops table schema.\r\n     * For SqlServer can accept schema path (e.g. 'dbName.schemaName') as parameter.\r\n     * If schema path passed, it will drop schema in specified database.\r\n     */\r\n    dropSchema(schemaPath: string, ifExist?: boolean, isCascade?: boolean): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new table.\r\n     */\r\n    createTable(table: Table, ifNotExist?: boolean, createForeignKeys?: boolean, createIndices?: boolean): Promise<void>;\r\n\r\n    /**\r\n     * Drops a table.\r\n     */\r\n    dropTable(table: Table|string, ifExist?: boolean, dropForeignKeys?: boolean, dropIndices?: boolean): Promise<void>;\r\n\r\n    /**\r\n     * Renames a table.\r\n     */\r\n    renameTable(oldTableOrName: Table|string, newTableName: string): Promise<void>;\r\n\r\n    /**\r\n     * Adds a new column.\r\n     */\r\n    addColumn(table: Table|string, column: TableColumn): Promise<void>;\r\n\r\n    /**\r\n     * Adds new columns.\r\n     */\r\n    addColumns(table: Table|string, columns: TableColumn[]): Promise<void>;\r\n\r\n    /**\r\n     * Renames a column.\r\n     */\r\n    renameColumn(table: Table|string, oldColumnOrName: TableColumn|string, newColumnOrName: TableColumn|string): Promise<void>;\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    changeColumn(table: Table|string, oldColumn: TableColumn|string, newColumn: TableColumn): Promise<void>;\r\n\r\n    /**\r\n     * Changes columns in the table.\r\n     */\r\n    changeColumns(table: Table|string, changedColumns: { oldColumn: TableColumn, newColumn: TableColumn }[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a column in the table.\r\n     */\r\n    dropColumn(table: Table|string, column: TableColumn|string): Promise<void>;\r\n\r\n    /**\r\n     * Drops columns in the table.\r\n     */\r\n    dropColumns(table: Table|string, columns: TableColumn[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new primary key.\r\n     */\r\n    createPrimaryKey(table: Table|string, columnNames: string[]): Promise<void>;\r\n\r\n    /**\r\n     * Updates composite primary keys.\r\n     */\r\n    updatePrimaryKeys(table: Table|string, columns: TableColumn[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a primary key.\r\n     */\r\n    dropPrimaryKey(table: Table|string): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new unique constraint.\r\n     */\r\n    createUniqueConstraint(table: Table|string, uniqueConstraint: TableUnique): Promise<void>;\r\n\r\n    /**\r\n     * Creates new unique constraints.\r\n     */\r\n    createUniqueConstraints(table: Table|string, uniqueConstraints: TableUnique[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops an unique constraint.\r\n     */\r\n    dropUniqueConstraint(table: Table|string, uniqueOrName: TableUnique|string): Promise<void>;\r\n\r\n    /**\r\n     * Drops unique constraints.\r\n     */\r\n    dropUniqueConstraints(table: Table|string, uniqueConstraints: TableUnique[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new check constraint.\r\n     */\r\n    createCheckConstraint(table: Table|string, checkConstraint: TableCheck): Promise<void>;\r\n\r\n    /**\r\n     * Creates new check constraints.\r\n     */\r\n    createCheckConstraints(table: Table|string, checkConstraints: TableCheck[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a check constraint.\r\n     */\r\n    dropCheckConstraint(table: Table|string, checkOrName: TableCheck|string): Promise<void>;\r\n\r\n    /**\r\n     * Drops check constraints.\r\n     */\r\n    dropCheckConstraints(table: Table|string, checkConstraints: TableCheck[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    createForeignKey(table: Table|string, foreignKey: TableForeignKey): Promise<void>;\r\n\r\n    /**\r\n     * Creates new foreign keys.\r\n     */\r\n    createForeignKeys(table: Table|string, foreignKeys: TableForeignKey[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops a foreign key.\r\n     */\r\n    dropForeignKey(table: Table|string, foreignKeyOrName: TableForeignKey|string): Promise<void>;\r\n\r\n    /**\r\n     * Drops foreign keys.\r\n     */\r\n    dropForeignKeys(table: Table|string, foreignKeys: TableForeignKey[]): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    createIndex(table: Table|string, index: TableIndex): Promise<void>;\r\n\r\n    /**\r\n     * Creates new indices.\r\n     */\r\n    createIndices(table: Table|string, indices: TableIndex[]): Promise<void>;\r\n\r\n    /**\r\n     * Drops an index.\r\n     */\r\n    dropIndex(table: Table|string, index: TableIndex|string): Promise<void>;\r\n\r\n    /**\r\n     * Drops indices.\r\n     */\r\n    dropIndices(table: Table|string, indices: TableIndex[]): Promise<void>;\r\n\r\n    /**\r\n     * Clears all table contents.\r\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\r\n     */\r\n    clearTable(tableName: string): Promise<void>;\r\n\r\n    /**\r\n     * Enables special query runner mode in which sql queries won't be executed,\r\n     * instead they will be memorized into a special variable inside query runner.\r\n     * You can get memorized sql using getMemorySql() method.\r\n     */\r\n    enableSqlMemory(): void;\r\n\r\n    /**\r\n     * Disables special query runner mode in which sql queries won't be executed\r\n     * started by calling enableSqlMemory() method.\r\n     *\r\n     * Previously memorized sql will be flushed.\r\n     */\r\n    disableSqlMemory(): void;\r\n\r\n    /**\r\n     * Flushes all memorized sqls.\r\n     */\r\n    clearSqlMemory(): void;\r\n\r\n    /**\r\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\r\n     */\r\n    getMemorySql(): SqlInMemory;\r\n\r\n    /**\r\n     * Executes up sql queries.\r\n     */\r\n    executeMemoryUpSql(): Promise<void>;\r\n\r\n    /**\r\n     * Executes down sql queries.\r\n     */\r\n    executeMemoryDownSql(): Promise<void>;\r\n\r\n}"],"sourceRoot":".."}