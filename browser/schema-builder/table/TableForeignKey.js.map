{"version":3,"sources":["../browser/src/schema-builder/table/TableForeignKey.ts"],"names":[],"mappings":"AAGA;;GAEG;AACH;IAsCI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,yBAAY,OAA+B;QA/B3C;;WAEG;QACH,gBAAW,GAAa,EAAE,CAAC;QAO3B;;WAEG;QACH,0BAAqB,GAAa,EAAE,CAAC;QAmBjC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;QACvC,IAAI,CAAC,qBAAqB,GAAG,OAAO,CAAC,qBAAqB,CAAC;QAC3D,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC,mBAAmB,CAAC;QACvD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QACjC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;IACrC,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,+BAAK,GAAL;QACI,OAAO,IAAI,eAAe,CAAyB;YAC/C,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,WAAW,EAAM,IAAI,CAAC,WAAW,QAAC;YAClC,qBAAqB,EAAM,IAAI,CAAC,qBAAqB,QAAC;YACtD,mBAAmB,EAAE,IAAI,CAAC,mBAAmB;YAC7C,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;SAC1B,CAAC,CAAC;IACP,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACI,sBAAM,GAAb,UAAc,QAA4B;QACtC,OAAO,IAAI,eAAe,CAAyB;YAC/C,IAAI,EAAE,QAAQ,CAAC,IAAI;YACnB,WAAW,EAAE,QAAQ,CAAC,WAAW;YACjC,qBAAqB,EAAE,QAAQ,CAAC,qBAAqB;YACrD,mBAAmB,EAAE,QAAQ,CAAC,mBAAmB;YACjD,QAAQ,EAAE,QAAQ,CAAC,QAAQ;YAC3B,QAAQ,EAAE,QAAQ,CAAC,QAAQ;SAC9B,CAAC,CAAC;IACP,CAAC;IAEL,sBAAC;AAAD,CAvFA,AAuFC,IAAA","file":"TableForeignKey.js","sourcesContent":["import {ForeignKeyMetadata} from \"../../metadata/ForeignKeyMetadata\";\r\nimport {TableForeignKeyOptions} from \"../options/TableForeignKeyOptions\";\r\n\r\n/**\r\n * Foreign key from the database stored in this class.\r\n */\r\nexport class TableForeignKey {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Name of the table which contains this foreign key.\r\n     */\r\n    name?: string;\r\n\r\n    /**\r\n     * Column names which included by this foreign key.\r\n     */\r\n    columnNames: string[] = [];\r\n\r\n    /**\r\n     * Table referenced in the foreign key.\r\n     */\r\n    referencedTableName: string;\r\n\r\n    /**\r\n     * Column names which included by this foreign key.\r\n     */\r\n    referencedColumnNames: string[] = [];\r\n\r\n    /**\r\n     * \"ON DELETE\" of this foreign key, e.g. what action database should perform when\r\n     * referenced stuff is being deleted.\r\n     */\r\n    onDelete?: string;\r\n\r\n    /**\r\n     * \"ON UPDATE\" of this foreign key, e.g. what action database should perform when\r\n     * referenced stuff is being updated.\r\n     */\r\n    onUpdate?: string;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(options: TableForeignKeyOptions) {\r\n        this.name = options.name;\r\n        this.columnNames = options.columnNames;\r\n        this.referencedColumnNames = options.referencedColumnNames;\r\n        this.referencedTableName = options.referencedTableName;\r\n        this.onDelete = options.onDelete;\r\n        this.onUpdate = options.onUpdate;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new copy of this foreign key with exactly same properties.\r\n     */\r\n    clone(): TableForeignKey {\r\n        return new TableForeignKey(<TableForeignKeyOptions>{\r\n            name: this.name,\r\n            columnNames: [...this.columnNames],\r\n            referencedColumnNames: [...this.referencedColumnNames],\r\n            referencedTableName: this.referencedTableName,\r\n            onDelete: this.onDelete,\r\n            onUpdate: this.onUpdate\r\n        });\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new table foreign key from the given foreign key metadata.\r\n     */\r\n    static create(metadata: ForeignKeyMetadata): TableForeignKey {\r\n        return new TableForeignKey(<TableForeignKeyOptions>{\r\n            name: metadata.name,\r\n            columnNames: metadata.columnNames,\r\n            referencedColumnNames: metadata.referencedColumnNames,\r\n            referencedTableName: metadata.referencedTablePath,\r\n            onDelete: metadata.onDelete,\r\n            onUpdate: metadata.onUpdate\r\n        });\r\n    }\r\n\r\n}"],"sourceRoot":"../.."}