{"version":3,"sources":["../../src/metadata/EmbeddedMetadata.ts"],"names":[],"mappings":";;AAOA,6DAA0D;AAI1D;;GAEG;AACH;IAgJI,wEAAwE;IACxE,cAAc;IACd,wEAAwE;IAExE,0BAAY,OAGX;QAtHD;;WAEG;QACH,YAAO,GAAqB,EAAE,CAAC;QAE/B;;WAEG;QACH,cAAS,GAAuB,EAAE,CAAC;QAEnC;;WAEG;QACH,cAAS,GAA6B,EAAE,CAAC;QAEzC;;WAEG;QACH,YAAO,GAAoB,EAAE,CAAC;QAE9B;;WAEG;QACH,gBAAW,GAAyB,EAAE,CAAC;QAEvC;;WAEG;QACH,mBAAc,GAA4B,EAAE,CAAC;QAE7C;;WAEG;QACH,cAAS,GAAuB,EAAE,CAAC;QAEnC;;;;WAIG;QACH,YAAO,GAAY,KAAK,CAAC;QAgBzB;;;;;;WAMG;QACH,wBAAmB,GAAa,EAAE,CAAC;QAEnC;;WAEG;QACH,mBAAc,GAAa,EAAE,CAAC;QAE9B;;;;;WAKG;QACH,yBAAoB,GAAuB,EAAE,CAAC;QAE9C;;;;;WAKG;QACH,oBAAe,GAAqB,EAAE,CAAC;QAEvC;;WAEG;QACH,sBAAiB,GAAuB,EAAE,CAAC;QAE3C;;WAEG;QACH,sBAAiB,GAA6B,EAAE,CAAC;QAEjD;;WAEG;QACH,oBAAe,GAAoB,EAAE,CAAC;QAEtC;;WAEG;QACH,wBAAmB,GAAyB,EAAE,CAAC;QAE/C;;WAEG;QACH,2BAAsB,GAA4B,EAAE,CAAC;QAUjD,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;QAC7C,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QAChC,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC;QAC9C,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC;QACxC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC;IACxC,CAAC;IAED,wEAAwE;IACxE,iBAAiB;IACjB,wEAAwE;IAExE;;OAEG;IACH,iCAAM,GAAN;QACI,OAAO,IAAK,IAAI,CAAC,IAAY,CAAC;IAClC,CAAC;IAED,wEAAwE;IACxE,kBAAkB;IAClB,wEAAwE;IAExE,gCAAK,GAAL,UAAM,UAAsB;QACxB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,EAA1B,CAA0B,CAAC,CAAC;QAC/D,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QAC3C,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;QAC3D,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;QACjD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACvD,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;QAC7D,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;QACnD,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;QACvD,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;QACvD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;QACnD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;QAC3D,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,2BAA2B,EAAE,CAAC;QACjE,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,wEAAwE;IACxE,oBAAoB;IACpB,wEAAwE;IAE9D,sCAAW,GAArB,UAAsB,UAAsB;QACxC,IAAI,UAAU,CAAC,MAAM,YAAY,yBAAW;YACxC,OAAO,IAAI,CAAC,YAAY,CAAC;QAE7B,IAAI,QAAQ,GAAa,EAAE,CAAC;QAC5B,IAAI,IAAI,CAAC,sBAAsB;YAC3B,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC;QAEvE,IAAI,IAAI,CAAC,YAAY,KAAK,SAAS,EAAE;YACjC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SACpC;aAAM,IAAI,OAAO,IAAI,CAAC,YAAY,KAAK,QAAQ,EAAE;YAC9C,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SACpC;QAED,OAAO,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,gDAAgD;IAC/E,CAAC;IAES,mDAAwB,GAAlC;QACI,OAAO,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,wBAAwB,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAChJ,CAAC;IAES,8CAAmB,GAA7B;QACI,OAAO,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC;IAC9C,CAAC;IAES,oDAAyB,GAAnC;QACI,OAAO,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,yBAAyB,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACvH,CAAC;IAES,+CAAoB,GAA9B;QACI,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAC,OAAO,EAAE,QAAQ,IAAK,OAAA,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,oBAAoB,EAAE,CAAC,EAA/C,CAA+C,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IACvH,CAAC;IAES,iDAAsB,GAAhC;QACI,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAC,SAAS,EAAE,QAAQ,IAAK,OAAA,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,sBAAsB,EAAE,CAAC,EAAnD,CAAmD,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IAC/H,CAAC;IAES,iDAAsB,GAAhC;QACI,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAC,SAAS,EAAE,QAAQ,IAAK,OAAA,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,sBAAsB,EAAE,CAAC,EAAnD,CAAmD,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IAC/H,CAAC;IAES,+CAAoB,GAA9B;QACI,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAC,SAAS,EAAE,QAAQ,IAAK,OAAA,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,oBAAoB,EAAE,CAAC,EAAjD,CAAiD,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IAC3H,CAAC;IAES,mDAAwB,GAAlC;QACI,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAC,SAAS,EAAE,QAAQ,IAAK,OAAA,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,wBAAwB,EAAE,CAAC,EAArD,CAAqD,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IACnI,CAAC;IAES,sDAA2B,GAArC;QACI,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAC,SAAS,EAAE,QAAQ,IAAK,OAAA,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,2BAA2B,EAAE,CAAC,EAAxD,CAAwD,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IACzI,CAAC;IAEL,uBAAC;AAAD,CAvPA,AAuPC,IAAA;AAvPY,4CAAgB","file":"EmbeddedMetadata.js","sourcesContent":["import {ColumnMetadata} from \"./ColumnMetadata\";\r\nimport {RelationMetadata} from \"./RelationMetadata\";\r\nimport {EntityMetadata} from \"./EntityMetadata\";\r\nimport {EmbeddedMetadataArgs} from \"../metadata-args/EmbeddedMetadataArgs\";\r\nimport {RelationIdMetadata} from \"./RelationIdMetadata\";\r\nimport {RelationCountMetadata} from \"./RelationCountMetadata\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\r\nimport {EntityListenerMetadata} from \"./EntityListenerMetadata\";\r\nimport {IndexMetadata} from \"./IndexMetadata\";\r\n\r\n/**\r\n * Contains all information about entity's embedded property.\r\n */\r\nexport class EmbeddedMetadata {\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata where this embedded is.\r\n     */\r\n    entityMetadata: EntityMetadata;\r\n\r\n    /**\r\n     * Parent embedded in the case if this embedded inside other embedded.\r\n     */\r\n    parentEmbeddedMetadata?: EmbeddedMetadata;\r\n\r\n    /**\r\n     * Embedded target type.\r\n     */\r\n    type: Function;\r\n\r\n    /**\r\n     * Property name on which this embedded is attached.\r\n     */\r\n    propertyName: string;\r\n\r\n    /**\r\n     * Gets full path to this embedded property (including embedded property name).\r\n     * Full path is relevant when embedded is used inside other embeds (one or multiple nested).\r\n     * For example it will return \"counters.subcounters\".\r\n     */\r\n    propertyPath: string;\r\n\r\n    /**\r\n     * Columns inside this embed.\r\n     */\r\n    columns: ColumnMetadata[] = [];\r\n\r\n    /**\r\n     * Relations inside this embed.\r\n     */\r\n    relations: RelationMetadata[] = [];\r\n\r\n    /**\r\n     * Entity listeners inside this embed.\r\n     */\r\n    listeners: EntityListenerMetadata[] = [];\r\n\r\n    /**\r\n     * Indices applied to the embed columns.\r\n     */\r\n    indices: IndexMetadata[] = [];\r\n\r\n    /**\r\n     * Relation ids inside this embed.\r\n     */\r\n    relationIds: RelationIdMetadata[] = [];\r\n\r\n    /**\r\n     * Relation counts inside this embed.\r\n     */\r\n    relationCounts: RelationCountMetadata[] = [];\r\n\r\n    /**\r\n     * Nested embeddable in this embeddable (which has current embedded as parent embedded).\r\n     */\r\n    embeddeds: EmbeddedMetadata[] = [];\r\n\r\n    /**\r\n     * Indicates if this embedded is in array mode.\r\n     *\r\n     * This option works only in monogodb.\r\n     */\r\n    isArray: boolean = false;\r\n\r\n    /**\r\n     * Prefix of the embedded, used instead of propertyName.\r\n     * If set to empty string, then prefix is not set at all.\r\n     */\r\n    customPrefix: string|boolean|undefined;\r\n\r\n    /**\r\n     * Gets the prefix of the columns.\r\n     * By default its a property name of the class where this prefix is.\r\n     * But if custom prefix is set then it takes its value as a prefix.\r\n     * However if custom prefix is set to empty string prefix to column is not applied at all.\r\n     */\r\n    prefix: string;\r\n\r\n    /**\r\n     * Returns array of property names of current embed and all its parent embeds.\r\n     *\r\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\r\n     * we need to get value of \"id\" column from the post real entity object.\r\n     * this method will return [\"data\", \"information\", \"counters\"]\r\n     */\r\n    parentPropertyNames: string[] = [];\r\n\r\n    /**\r\n     * Returns array of prefixes of current embed and all its parent embeds.\r\n     */\r\n    parentPrefixes: string[] = [];\r\n\r\n    /**\r\n     * Returns embed metadatas from all levels of the parent tree.\r\n     *\r\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\r\n     * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\r\n     */\r\n    embeddedMetadataTree: EmbeddedMetadata[] = [];\r\n\r\n    /**\r\n     * Embed metadatas from all levels of the parent tree.\r\n     *\r\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\r\n     * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\r\n     */\r\n    columnsFromTree: ColumnMetadata[] = [];\r\n\r\n    /**\r\n     * Relations of this embed and all relations from its child embeds.\r\n     */\r\n    relationsFromTree: RelationMetadata[] = [];\r\n\r\n    /**\r\n     * Relations of this embed and all relations from its child embeds.\r\n     */\r\n    listenersFromTree: EntityListenerMetadata[] = [];\r\n\r\n    /**\r\n     * Indices of this embed and all indices from its child embeds.\r\n     */\r\n    indicesFromTree: IndexMetadata[] = [];\r\n\r\n    /**\r\n     * Relation ids of this embed and all relation ids from its child embeds.\r\n     */\r\n    relationIdsFromTree: RelationIdMetadata[] = [];\r\n\r\n    /**\r\n     * Relation counts of this embed and all relation counts from its child embeds.\r\n     */\r\n    relationCountsFromTree: RelationCountMetadata[] = [];\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(options: {\r\n        entityMetadata: EntityMetadata,\r\n        args: EmbeddedMetadataArgs,\r\n    }) {\r\n        this.entityMetadata = options.entityMetadata;\r\n        this.type = options.args.type();\r\n        this.propertyName = options.args.propertyName;\r\n        this.customPrefix = options.args.prefix;\r\n        this.isArray = options.args.isArray;\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new embedded object.\r\n     */\r\n    create(): any {\r\n        return new (this.type as any);\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Builder Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    build(connection: Connection): this {\r\n        this.embeddeds.forEach(embedded => embedded.build(connection));\r\n        this.prefix = this.buildPrefix(connection);\r\n        this.parentPropertyNames = this.buildParentPropertyNames();\r\n        this.parentPrefixes = this.buildParentPrefixes();\r\n        this.propertyPath = this.parentPropertyNames.join(\".\");\r\n        this.embeddedMetadataTree = this.buildEmbeddedMetadataTree();\r\n        this.columnsFromTree = this.buildColumnsFromTree();\r\n        this.relationsFromTree = this.buildRelationsFromTree();\r\n        this.listenersFromTree = this.buildListenersFromTree();\r\n        this.indicesFromTree = this.buildIndicesFromTree();\r\n        this.relationIdsFromTree = this.buildRelationIdsFromTree();\r\n        this.relationCountsFromTree = this.buildRelationCountsFromTree();\r\n        return this;\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Protected Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    protected buildPrefix(connection: Connection): string {\r\n        if (connection.driver instanceof MongoDriver)\r\n            return this.propertyName;\r\n\r\n        let prefixes: string[] = [];\r\n        if (this.parentEmbeddedMetadata)\r\n            prefixes.push(this.parentEmbeddedMetadata.buildPrefix(connection));\r\n\r\n        if (this.customPrefix === undefined) {\r\n            prefixes.push(this.propertyName);\r\n        } else if (typeof this.customPrefix === \"string\") {\r\n            prefixes.push(this.customPrefix);\r\n        }\r\n\r\n        return prefixes.join(\"_\"); // todo: use naming strategy instead of \"_\"  !!!\r\n    }\r\n\r\n    protected buildParentPropertyNames(): string[] {\r\n        return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildParentPropertyNames().concat(this.propertyName) : [this.propertyName];\r\n    }\r\n\r\n    protected buildParentPrefixes(): string[] {\r\n        return [this.prefix || this.propertyName];\r\n    }\r\n\r\n    protected buildEmbeddedMetadataTree(): EmbeddedMetadata[] {\r\n        return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildEmbeddedMetadataTree().concat(this) : [this];\r\n    }\r\n\r\n    protected buildColumnsFromTree(): ColumnMetadata[] {\r\n        return this.embeddeds.reduce((columns, embedded) => columns.concat(embedded.buildColumnsFromTree()), this.columns);\r\n    }\r\n\r\n    protected buildRelationsFromTree(): RelationMetadata[] {\r\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildRelationsFromTree()), this.relations);\r\n    }\r\n\r\n    protected buildListenersFromTree(): EntityListenerMetadata[] {\r\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildListenersFromTree()), this.listeners);\r\n    }\r\n\r\n    protected buildIndicesFromTree(): IndexMetadata[] {\r\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildIndicesFromTree()), this.indices);\r\n    }\r\n\r\n    protected buildRelationIdsFromTree(): RelationIdMetadata[] {\r\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildRelationIdsFromTree()), this.relationIds);\r\n    }\r\n\r\n    protected buildRelationCountsFromTree(): RelationCountMetadata[] {\r\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildRelationCountsFromTree()), this.relationCounts);\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}