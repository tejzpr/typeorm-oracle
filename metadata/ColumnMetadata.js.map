{"version":3,"sources":["../../src/metadata/ColumnMetadata.ts"],"names":[],"mappings":"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","file":"ColumnMetadata.js","sourcesContent":["import {ColumnType} from \"../driver/types/ColumnTypes\";\r\nimport {EntityMetadata} from \"./EntityMetadata\";\r\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\r\nimport {RelationMetadata} from \"./RelationMetadata\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {ColumnMetadataArgs} from \"../metadata-args/ColumnMetadataArgs\";\r\nimport {Connection} from \"../connection/Connection\";\r\nimport {OrmUtils} from \"../util/OrmUtils\";\r\nimport {ValueTransformer} from \"../decorator/options/ValueTransformer\";\r\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\r\nimport {PromiseUtils} from \"../util/PromiseUtils\";\r\nimport {FindOperator} from \"../find-options/FindOperator\";\r\n\r\n/**\r\n * This metadata contains all information about entity's column.\r\n */\r\nexport class ColumnMetadata {\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Target class where column decorator is used.\r\n     * This may not be always equal to entity metadata (for example embeds or inheritance cases).\r\n     */\r\n    target: Function|string;\r\n\r\n    /**\r\n     * Entity metadata where this column metadata is.\r\n     *\r\n     * For example for @Column() name: string in Post, entityMetadata will be metadata of Post entity.\r\n     */\r\n    entityMetadata: EntityMetadata;\r\n\r\n    /**\r\n     * Embedded metadata where this column metadata is.\r\n     * If this column is not in embed then this property value is undefined.\r\n     */\r\n    embeddedMetadata?: EmbeddedMetadata;\r\n\r\n    /**\r\n     * If column is a foreign key of some relation then this relation's metadata will be there.\r\n     * If this column does not have a foreign key then this property value is undefined.\r\n     */\r\n    relationMetadata?: RelationMetadata;\r\n\r\n    /**\r\n     * Class's property name on which this column is applied.\r\n     */\r\n    propertyName: string;\r\n\r\n    /**\r\n     * The database type of the column.\r\n     */\r\n    type: ColumnType;\r\n\r\n    /**\r\n     * Type's length in the database.\r\n     */\r\n    length: string = \"\";\r\n\r\n    /**\r\n     * Type's display width in the database.\r\n     */\r\n    width?: number;\r\n\r\n    /**\r\n     * Defines column character set.\r\n     */\r\n    charset?: string;\r\n\r\n    /**\r\n     * Defines column collation.\r\n     */\r\n    collation?: string;\r\n\r\n    /**\r\n     * Indicates if this column is a primary key.\r\n     */\r\n    isPrimary: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this column is generated (auto increment or generated other way).\r\n     */\r\n    isGenerated: boolean = false;\r\n\r\n    /**\r\n     * Indicates if column can contain nulls or not.\r\n     */\r\n    isNullable: boolean = false;\r\n\r\n    /**\r\n     * Indicates if column is selected by query builder or not.\r\n     */\r\n    isSelect: boolean = true;\r\n\r\n    /**\r\n     * Indicates if column is protected from updates or not.\r\n     */\r\n    isReadonly: boolean = false;\r\n\r\n    /**\r\n     * Specifies generation strategy if this column will use auto increment.\r\n     */\r\n    generationStrategy?: \"uuid\"|\"increment\";\r\n\r\n    /**\r\n     * Column comment.\r\n     * This feature is not supported by all databases.\r\n     */\r\n    comment: string = \"\";\r\n\r\n    /**\r\n     * Default database value.\r\n     */\r\n    default?: any;\r\n\r\n    /**\r\n     * ON UPDATE trigger. Works only for MySQL.\r\n     */\r\n    onUpdate?: string;\r\n\r\n    /**\r\n     * The precision for a decimal (exact numeric) column (applies only for decimal column),\r\n     * which is the maximum number of digits that are stored for the values.\r\n     */\r\n    precision?: number|null;\r\n\r\n    /**\r\n     * The scale for a decimal (exact numeric) column (applies only for decimal column),\r\n     * which represents the number of digits to the right of the decimal point and must not be greater than precision.\r\n     */\r\n    scale?: number;\r\n\r\n    /**\r\n     * Puts ZEROFILL attribute on to numeric column. Works only for MySQL.\r\n     * If you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column\r\n     */\r\n    zerofill: boolean = false;\r\n\r\n    /**\r\n     * Puts UNSIGNED attribute on to numeric column. Works only for MySQL.\r\n     */\r\n    unsigned: boolean = false;\r\n\r\n    /**\r\n     * Array of possible enumerated values.\r\n     */\r\n    enum?: any[];\r\n\r\n    /**\r\n     * Generated column expression. Supports only in MySQL.\r\n     */\r\n    asExpression?: string;\r\n\r\n    /**\r\n     * Generated column type. Supports only in MySQL.\r\n     */\r\n    generatedType?: \"VIRTUAL\"|\"STORED\";\r\n\r\n    /**\r\n     * Return type of HSTORE column.\r\n     * Returns value as string or as object.\r\n     */\r\n    hstoreType?: \"object\"|\"string\";\r\n\r\n    /**\r\n     * Indicates if this column is an array.\r\n     */\r\n    isArray: boolean = false;\r\n\r\n    /**\r\n     * Gets full path to this column property (including column property name).\r\n     * Full path is relevant when column is used in embeds (one or multiple nested).\r\n     * For example it will return \"counters.subcounters.likes\".\r\n     * If property is not in embeds then it returns just property name of the column.\r\n     */\r\n    propertyPath: string;\r\n\r\n    /**\r\n     * Same as property path, but dots are replaced with '_'.\r\n     * Used in query builder statements.\r\n     */\r\n    propertyAliasName: string;\r\n\r\n    /**\r\n     * Gets full path to this column database name (including column database name).\r\n     * Full path is relevant when column is used in embeds (one or multiple nested).\r\n     * For example it will return \"counters.subcounters.likes\".\r\n     * If property is not in embeds then it returns just database name of the column.\r\n     */\r\n    databasePath: string;\r\n\r\n    /**\r\n     * Complete column name in the database including its embedded prefixes.\r\n     */\r\n    databaseName: string;\r\n\r\n    /**\r\n     * Database name in the database without embedded prefixes applied.\r\n     */\r\n    databaseNameWithoutPrefixes: string;\r\n\r\n    /**\r\n     * Database name set by entity metadata builder, not yet passed naming strategy process and without embedded prefixes.\r\n     */\r\n    givenDatabaseName?: string;\r\n\r\n    /**\r\n     * Indicates if column is virtual. Virtual columns are not mapped to the entity.\r\n     */\r\n    isVirtual: boolean = false;\r\n\r\n    /**\r\n     * Indicates if column is discriminator. Discriminator columns are not mapped to the entity.\r\n     */\r\n    isDiscriminator: boolean = false;\r\n\r\n    /**\r\n     * Indicates if column is tree-level column. Tree-level columns are used in closure entities.\r\n     */\r\n    isTreeLevel: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this column contains an entity creation date.\r\n     */\r\n    isCreateDate: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this column contains an entity update date.\r\n     */\r\n    isUpdateDate: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this column contains an entity version.\r\n     */\r\n    isVersion: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this column contains an object id.\r\n     */\r\n    isObjectId: boolean = false;\r\n\r\n    /**\r\n     * If this column is foreign key then it references some other column,\r\n     * and this property will contain reference to this column.\r\n     */\r\n    referencedColumn: ColumnMetadata|undefined;\r\n\r\n    /**\r\n     * Specifies a value transformer that is to be used to (un)marshal\r\n     * this column when reading or writing to the database.\r\n     */\r\n    transformer?: ValueTransformer;\r\n\r\n    /**\r\n     * Column type in the case if this column is in the closure table.\r\n     * Column can be ancestor or descendant in the closure tables.\r\n     */\r\n    closureType?: \"ancestor\"|\"descendant\";\r\n\r\n    /**\r\n     * Indicates if this column is nested set's left column.\r\n     * Used only in tree entities with nested-set type.\r\n     */\r\n    isNestedSetLeft: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this column is nested set's right column.\r\n     * Used only in tree entities with nested-set type.\r\n     */\r\n    isNestedSetRight: boolean = false;\r\n\r\n    /**\r\n     * Indicates if this column is materialized path's path column.\r\n     * Used only in tree entities with materialized path type.\r\n     */\r\n    isMaterializedPath: boolean = false;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(options: {\r\n        connection: Connection,\r\n        entityMetadata: EntityMetadata,\r\n        embeddedMetadata?: EmbeddedMetadata,\r\n        referencedColumn?: ColumnMetadata,\r\n        args: ColumnMetadataArgs,\r\n        closureType?: \"ancestor\"|\"descendant\",\r\n        nestedSetLeft?: boolean,\r\n        nestedSetRight?: boolean,\r\n        materializedPath?: boolean,\r\n    }) {\r\n        this.entityMetadata = options.entityMetadata;\r\n        this.embeddedMetadata = options.embeddedMetadata!;\r\n        this.referencedColumn = options.referencedColumn;\r\n        if (options.args.target)\r\n            this.target = options.args.target;\r\n        if (options.args.propertyName)\r\n            this.propertyName = options.args.propertyName;\r\n        if (options.args.options.name)\r\n            this.givenDatabaseName = options.args.options.name;\r\n        if (options.args.options.type)\r\n            this.type = options.args.options.type;\r\n        if (options.args.options.length)\r\n            this.length = options.args.options.length ? options.args.options.length.toString() : \"\";\r\n        if (options.args.options.width)\r\n            this.width = options.args.options.width;\r\n        if (options.args.options.charset)\r\n            this.charset = options.args.options.charset;\r\n        if (options.args.options.collation)\r\n            this.collation = options.args.options.collation;\r\n        if (options.args.options.primary)\r\n            this.isPrimary = options.args.options.primary;\r\n        if (options.args.options.default === null) // to make sure default: null is the same as nullable: true\r\n            this.isNullable = true;\r\n        if (options.args.options.nullable !== undefined)\r\n            this.isNullable = options.args.options.nullable;\r\n        if (options.args.options.select !== undefined)\r\n            this.isSelect = options.args.options.select;\r\n        if (options.args.options.readonly !== undefined)\r\n            this.isReadonly = options.args.options.readonly;\r\n        if (options.args.options.comment)\r\n            this.comment = options.args.options.comment;\r\n        if (options.args.options.default !== undefined)\r\n            this.default = options.args.options.default;\r\n        if (options.args.options.onUpdate)\r\n            this.onUpdate = options.args.options.onUpdate;\r\n        if (options.args.options.scale !== null && options.args.options.scale !== undefined)\r\n            this.scale = options.args.options.scale;\r\n        if (options.args.options.zerofill) {\r\n            this.zerofill = options.args.options.zerofill;\r\n            this.unsigned = true; // if you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column\r\n        }\r\n        if (options.args.options.unsigned)\r\n            this.unsigned = options.args.options.unsigned;\r\n        if (options.args.options.precision !== undefined)\r\n            this.precision = options.args.options.precision;\r\n        if (options.args.options.enum) {\r\n            if (options.args.options.enum instanceof Object) {\r\n                this.enum = Object.keys(options.args.options.enum).map(key => {\r\n                    return (options.args.options.enum as ObjectLiteral)[key];\r\n                });\r\n\r\n            } else {\r\n                this.enum = options.args.options.enum;\r\n            }\r\n        }\r\n        if (options.args.options.asExpression) {\r\n            this.asExpression = options.args.options.asExpression;\r\n            this.generatedType = options.args.options.generatedType ? options.args.options.generatedType : \"VIRTUAL\";\r\n        }\r\n        if (options.args.options.hstoreType)\r\n            this.hstoreType = options.args.options.hstoreType;\r\n        if (options.args.options.array)\r\n            this.isArray = options.args.options.array;\r\n        if (options.args.mode) {\r\n            this.isVirtual = options.args.mode === \"virtual\";\r\n            this.isTreeLevel = options.args.mode === \"treeLevel\";\r\n            this.isCreateDate = options.args.mode === \"createDate\";\r\n            this.isUpdateDate = options.args.mode === \"updateDate\";\r\n            this.isVersion = options.args.mode === \"version\";\r\n            this.isObjectId = options.args.mode === \"objectId\";\r\n        }\r\n        if (options.args.options.transformer)\r\n            this.transformer = options.args.options.transformer;\r\n        if (this.isTreeLevel)\r\n            this.type = options.connection.driver.mappedDataTypes.treeLevel;\r\n        if (this.isCreateDate) {\r\n            if (!this.type)\r\n                this.type = options.connection.driver.mappedDataTypes.createDate;\r\n            if (!this.default)\r\n                this.default = () => options.connection.driver.mappedDataTypes.createDateDefault;\r\n            if (this.precision === undefined && options.connection.driver.mappedDataTypes.createDatePrecision)\r\n                this.precision = options.connection.driver.mappedDataTypes.createDatePrecision;\r\n        }\r\n        if (this.isUpdateDate) {\r\n            if (!this.type)\r\n                this.type = options.connection.driver.mappedDataTypes.updateDate;\r\n            if (!this.default)\r\n                this.default = () => options.connection.driver.mappedDataTypes.updateDateDefault;\r\n            if (this.precision === undefined && options.connection.driver.mappedDataTypes.updateDatePrecision)\r\n                this.precision = options.connection.driver.mappedDataTypes.updateDatePrecision;\r\n        }\r\n        if (this.isVersion)\r\n            this.type = options.connection.driver.mappedDataTypes.version;\r\n        if (options.closureType)\r\n            this.closureType = options.closureType;\r\n        if (options.nestedSetLeft)\r\n            this.isNestedSetLeft = options.nestedSetLeft;\r\n        if (options.nestedSetRight)\r\n            this.isNestedSetRight = options.nestedSetRight;\r\n        if (options.materializedPath)\r\n            this.isMaterializedPath = options.materializedPath;\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates entity id map from the given entity ids array.\r\n     */\r\n    createValueMap(value: any, useDatabaseName = false) {\r\n\r\n        // extract column value from embeds of entity if column is in embedded\r\n        if (this.embeddedMetadata) {\r\n\r\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\r\n            // we need to get value of \"id\" column from the post real entity object and return it in a\r\n            // { data: { information: { counters: { id: ... } } } } format\r\n\r\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\r\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\r\n\r\n            // now need to access post[data][information][counters] to get column value from the counters\r\n            // and on each step we need to create complex literal object, e.g. first { data },\r\n            // then { data: { information } }, then { data: { information: { counters } } },\r\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\r\n            // this recursive function helps doing that\r\n            const extractEmbeddedColumnValue = (propertyNames: string[], map: ObjectLiteral): any => {\r\n                const propertyName = propertyNames.shift();\r\n                if (propertyName) {\r\n                    map[propertyName] = {};\r\n                    extractEmbeddedColumnValue(propertyNames, map[propertyName]);\r\n                    return map;\r\n                }\r\n\r\n                // this is bugfix for #720 when increment number is bigint we need to make sure its a string\r\n                if (this.generationStrategy === \"increment\" && this.type === \"bigint\")\r\n                    value = String(value);\r\n\r\n                map[useDatabaseName ? this.databaseName : this.propertyName] = value;\r\n                return map;\r\n            };\r\n            return extractEmbeddedColumnValue(propertyNames, {});\r\n\r\n        } else { // no embeds - no problems. Simply return column property name and its value of the entity\r\n\r\n            // this is bugfix for #720 when increment number is bigint we need to make sure its a string\r\n            if (this.generationStrategy === \"increment\" && this.type === \"bigint\")\r\n                value = String(value);\r\n\r\n            return { [useDatabaseName ? this.databaseName : this.propertyName]: value };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Extracts column value and returns its column name with this value in a literal object.\r\n     * If column is in embedded (or recursive embedded) it returns complex literal object.\r\n     *\r\n     * Examples what this method can return depend if this column is in embeds.\r\n     * { id: 1 } or { title: \"hello\" }, { counters: { code: 1 } }, { data: { information: { counters: { code: 1 } } } }\r\n     */\r\n    getEntityValueMap(entity: ObjectLiteral, options?: { skipNulls?: boolean }): ObjectLiteral|undefined {\r\n        const returnNulls = false; // options && options.skipNulls === false ? false : true; // todo: remove if current will not bring problems, uncomment if it will.\r\n\r\n        // extract column value from embeds of entity if column is in embedded\r\n        if (this.embeddedMetadata) {\r\n\r\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\r\n            // we need to get value of \"id\" column from the post real entity object and return it in a\r\n            // { data: { information: { counters: { id: ... } } } } format\r\n\r\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\r\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\r\n\r\n            // now need to access post[data][information][counters] to get column value from the counters\r\n            // and on each step we need to create complex literal object, e.g. first { data },\r\n            // then { data: { information } }, then { data: { information: { counters } } },\r\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\r\n            // this recursive function helps doing that\r\n            const extractEmbeddedColumnValue = (propertyNames: string[], value: ObjectLiteral, map: ObjectLiteral): any => {\r\n                const propertyName = propertyNames.shift();\r\n                if (value === undefined)\r\n                    return map;\r\n\r\n                if (propertyName) {\r\n                    const submap: ObjectLiteral = {};\r\n                    extractEmbeddedColumnValue(propertyNames, value[propertyName], submap);\r\n                    if (Object.keys(submap).length > 0) {\r\n                        map[propertyName] = submap;\r\n                    }\r\n                    return map;\r\n                }\r\n                if (value[this.propertyName] !== undefined && (returnNulls === false || value[this.propertyName] !== null))\r\n                    map[this.propertyName] = value[this.propertyName];\r\n                return map;\r\n            };\r\n            const map: ObjectLiteral = {};\r\n            extractEmbeddedColumnValue(propertyNames, entity, map);\r\n            return Object.keys(map).length > 0 ? map : undefined;\r\n\r\n        } else { // no embeds - no problems. Simply return column property name and its value of the entity\r\n            if (this.relationMetadata && entity[this.propertyName] && entity[this.propertyName] instanceof Object) {\r\n                const map = this.relationMetadata.joinColumns.reduce((map, joinColumn) => {\r\n                    const value = joinColumn.referencedColumn!.getEntityValueMap(entity[this.propertyName]);\r\n                    if (value === undefined) return map;\r\n                    return OrmUtils.mergeDeep(map, value);\r\n                }, {});\r\n                if (Object.keys(map).length > 0)\r\n                    return { [this.propertyName]: map };\r\n\r\n                return undefined;\r\n            } else {\r\n                if (entity[this.propertyName] !== undefined && (returnNulls === false || entity[this.propertyName] !== null))\r\n                    return { [this.propertyName]: entity[this.propertyName] };\r\n\r\n                return undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Extracts column value from the given entity.\r\n     * If column is in embedded (or recursive embedded) it extracts its value from there.\r\n     */\r\n     getEntityValue(entity: ObjectLiteral, transform: boolean = false): any|undefined {\r\n        // if (entity === undefined || entity === null) return undefined; // uncomment if needed\r\n\r\n        // extract column value from embeddeds of entity if column is in embedded\r\n        let value: any = undefined;\r\n        if (this.embeddedMetadata) {\r\n\r\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\r\n            // we need to get value of \"id\" column from the post real entity object\r\n\r\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\r\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames];\r\n\r\n            // next we need to access post[data][information][counters][this.propertyName] to get column value from the counters\r\n            // this recursive function takes array of generated property names and gets the post[data][information][counters] embed\r\n            const extractEmbeddedColumnValue = (propertyNames: string[], value: ObjectLiteral): any => {\r\n                const propertyName = propertyNames.shift();\r\n                return propertyName && value ? extractEmbeddedColumnValue(propertyNames, value[propertyName]) : value;\r\n            };\r\n\r\n            // once we get nested embed object we get its column, e.g. post[data][information][counters][this.propertyName]\r\n            const embeddedObject = extractEmbeddedColumnValue(propertyNames, entity);\r\n            if (embeddedObject) {\r\n                if (this.relationMetadata && this.referencedColumn) {\r\n                    const relatedEntity = this.relationMetadata.getEntityValue(embeddedObject);\r\n                    if (relatedEntity && relatedEntity instanceof Object && !(relatedEntity instanceof FindOperator)) {\r\n                        value = this.referencedColumn.getEntityValue(PromiseUtils.extractValue(relatedEntity));\r\n\r\n                    } else if (embeddedObject[this.propertyName] && embeddedObject[this.propertyName] instanceof Object && !(embeddedObject[this.propertyName] instanceof FindOperator)) {\r\n                        value = this.referencedColumn.getEntityValue(PromiseUtils.extractValue(embeddedObject[this.propertyName]));\r\n\r\n                    } else {\r\n                        value = PromiseUtils.extractValue(embeddedObject[this.propertyName]);\r\n\r\n                    }\r\n\r\n                } else if (this.referencedColumn) {\r\n                    value = this.referencedColumn.getEntityValue(PromiseUtils.extractValue(embeddedObject[this.propertyName]));\r\n\r\n                } else {\r\n                    value = PromiseUtils.extractValue(embeddedObject[this.propertyName]);\r\n                }\r\n            }\r\n\r\n        } else { // no embeds - no problems. Simply return column name by property name of the entity\r\n            if (this.relationMetadata && this.referencedColumn) {\r\n                const relatedEntity = this.relationMetadata.getEntityValue(entity);\r\n                if (relatedEntity && relatedEntity instanceof Object && !(relatedEntity instanceof FindOperator) && !(relatedEntity instanceof Function)) {\r\n                    value = this.referencedColumn.getEntityValue(PromiseUtils.extractValue(relatedEntity));\r\n\r\n                } else if (entity[this.propertyName] && entity[this.propertyName] instanceof Object && !(entity[this.propertyName] instanceof FindOperator) && !(entity[this.propertyName] instanceof Function)) {\r\n                    value = this.referencedColumn.getEntityValue(PromiseUtils.extractValue(entity[this.propertyName]));\r\n\r\n                } else {\r\n                    value = entity[this.propertyName];\r\n                }\r\n\r\n            } else if (this.referencedColumn) {\r\n                value = this.referencedColumn.getEntityValue(PromiseUtils.extractValue(entity[this.propertyName]));\r\n\r\n            } else {\r\n                value = entity[this.propertyName];\r\n            }\r\n        }\r\n\r\n        if (transform && this.transformer)\r\n            value = this.transformer.to(value);\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Sets given entity's column value.\r\n     * Using of this method helps to set entity relation's value of the lazy and non-lazy relations.\r\n     */\r\n    setEntityValue(entity: ObjectLiteral, value: any): void {\r\n        if (this.embeddedMetadata) {\r\n\r\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\r\n            const extractEmbeddedColumnValue = (embeddedMetadatas: EmbeddedMetadata[], map: ObjectLiteral): any => {\r\n                // if (!object[embeddedMetadata.propertyName])\r\n                //     object[embeddedMetadata.propertyName] = embeddedMetadata.create();\r\n\r\n                const embeddedMetadata = embeddedMetadatas.shift();\r\n                if (embeddedMetadata) {\r\n                    if (!map[embeddedMetadata.propertyName])\r\n                        map[embeddedMetadata.propertyName] = embeddedMetadata.create();\r\n\r\n                    extractEmbeddedColumnValue(embeddedMetadatas, map[embeddedMetadata.propertyName]);\r\n                    return map;\r\n                }\r\n                map[this.propertyName] = value;\r\n                return map;\r\n            };\r\n            return extractEmbeddedColumnValue([...this.embeddedMetadata.embeddedMetadataTree], entity);\r\n\r\n        } else {\r\n            entity[this.propertyName] = value;\r\n        }\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Builder Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    build(connection: Connection): this {\r\n        this.propertyPath = this.buildPropertyPath();\r\n        this.propertyAliasName = this.propertyPath.replace(\".\", \"_\");\r\n        this.databaseName = this.buildDatabaseName(connection);\r\n        this.databasePath = this.buildDatabasePath();\r\n        this.databaseNameWithoutPrefixes = connection.namingStrategy.columnName(this.propertyName, this.givenDatabaseName, []);\r\n        return this;\r\n    }\r\n\r\n    protected buildPropertyPath(): string {\r\n        let path = \"\";\r\n        if (this.embeddedMetadata && this.embeddedMetadata.parentPropertyNames.length)\r\n            path = this.embeddedMetadata.parentPropertyNames.join(\".\") + \".\";\r\n\r\n        path += this.propertyName;\r\n\r\n        // we add reference column to property path only if this column is virtual\r\n        // because if its not virtual it means user defined a real column for this relation\r\n        // also we don't do it if column is inside a junction table\r\n        if (!this.entityMetadata.isJunction && this.isVirtual && this.referencedColumn && this.referencedColumn.propertyName !== this.propertyName)\r\n            path += \".\" + this.referencedColumn.propertyName;\r\n\r\n        return path;\r\n    }\r\n\r\n    protected buildDatabasePath(): string {\r\n        let path = \"\";\r\n        if (this.embeddedMetadata && this.embeddedMetadata.parentPropertyNames.length)\r\n            path = this.embeddedMetadata.parentPropertyNames.join(\".\") + \".\";\r\n\r\n        path += this.databaseName;\r\n\r\n        // we add reference column to property path only if this column is virtual\r\n        // because if its not virtual it means user defined a real column for this relation\r\n        // also we don't do it if column is inside a junction table\r\n        if (!this.entityMetadata.isJunction && this.isVirtual && this.referencedColumn && this.referencedColumn.databaseName !== this.databaseName)\r\n            path += \".\" + this.referencedColumn.databaseName;\r\n\r\n        return path;\r\n    }\r\n\r\n    protected buildDatabaseName(connection: Connection): string {\r\n        let propertyNames = this.embeddedMetadata ? this.embeddedMetadata.parentPrefixes : [];\r\n        if (connection.driver instanceof MongoDriver) // we don't need to include embedded name for the mongodb column names\r\n            propertyNames = [];\r\n        return connection.namingStrategy.columnName(this.propertyName, this.givenDatabaseName, propertyNames);\r\n    }\r\n\r\n}"],"sourceRoot":".."}