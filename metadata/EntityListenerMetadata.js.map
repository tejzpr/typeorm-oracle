{"version":3,"sources":["../../src/metadata/EntityListenerMetadata.ts"],"names":[],"mappings":";;AAMA;;GAEG;AACH;IAgCI,wEAAwE;IACxE,cAAc;IACd,wEAAwE;IAExE,gCAAY,OAAkH;QAC1H,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;QAC7C,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,CAAC;QACjD,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC;QAClC,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC;QAC9C,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;IAClC,CAAC;IAED,wEAAwE;IACxE,iBAAiB;IACjB,wEAAwE;IAExE;;OAEG;IACH,0CAAS,GAAT,UAAU,MAAqB;QAC3B,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,KAAK,MAAM,CAAC,WAAW,IAAI,oIAAoI;YAC5L,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,YAAY,QAAQ,IAAI,MAAM,CAAC,WAAW,CAAC,SAAS,YAAY,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,yDAAyD;IACzL,CAAC;IAED;;OAEG;IACH,wCAAO,GAAP,UAAQ,MAAqB;QACzB,IAAI,CAAC,IAAI,CAAC,gBAAgB;YACtB,OAAO,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC;QAEvC,IAAI,CAAC,wBAAwB,CAAC,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IACzF,CAAC;IAED,wEAAwE;IACxE,oBAAoB;IACpB,wEAAwE;IAExE;;OAEG;IACO,yDAAwB,GAAlC,UAAmC,MAAqB,EAAE,aAAuB;QAC7E,IAAM,YAAY,GAAG,aAAa,CAAC,KAAK,EAAE,CAAC;QAC3C,IAAI,CAAC,YAAY;YACb,OAAO;QAEX,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;YAC5B,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC;SAC7C;aAAM;YACH,IAAI,MAAM,CAAC,YAAY,CAAC;gBACpB,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,aAAa,CAAC,CAAC;SAC1E;IACL,CAAC;IAEL,6BAAC;AAAD,CAtFA,AAsFC,IAAA;AAtFY,wDAAsB","file":"EntityListenerMetadata.js","sourcesContent":["import {EventListenerType} from \"./types/EventListenerTypes\";\r\nimport {EntityListenerMetadataArgs} from \"../metadata-args/EntityListenerMetadataArgs\";\r\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {EntityMetadata} from \"./EntityMetadata\";\r\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\r\n\r\n/**\r\n * This metadata contains all information about entity's listeners.\r\n */\r\nexport class EntityListenerMetadata {\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata of the listener.\r\n     */\r\n    entityMetadata: EntityMetadata;\r\n\r\n    /**\r\n     * Embedded metadata of the listener, in the case if listener is in embedded.\r\n     */\r\n    embeddedMetadata?: EmbeddedMetadata;\r\n\r\n    /**\r\n     * Target class to which metadata is applied.\r\n     * This can be different then entityMetadata.target in the case if listener is in the embedded.\r\n     */\r\n    target: Function|string;\r\n\r\n    /**\r\n     * Target's property name to which this metadata is applied.\r\n     */\r\n    propertyName: string;\r\n\r\n    /**\r\n     * The type of the listener.\r\n     */\r\n    type: EventListenerType;\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(options: { entityMetadata: EntityMetadata, embeddedMetadata?: EmbeddedMetadata, args: EntityListenerMetadataArgs }) {\r\n        this.entityMetadata = options.entityMetadata;\r\n        this.embeddedMetadata = options.embeddedMetadata;\r\n        this.target = options.args.target;\r\n        this.propertyName = options.args.propertyName;\r\n        this.type = options.args.type;\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Checks if entity listener is allowed to be executed on the given entity.\r\n     */\r\n    isAllowed(entity: ObjectLiteral) { // todo: create in entity metadata method like isInherited?\r\n        return this.entityMetadata.target === entity.constructor || // todo: .constructor won't work for entity schemas, but there are no entity listeners in schemas since there are no objects, right?\r\n            (this.entityMetadata.target instanceof Function && entity.constructor.prototype instanceof this.entityMetadata.target); // todo: also need to implement entity schema inheritance\r\n    }\r\n\r\n    /**\r\n     * Executes listener method of the given entity.\r\n     */\r\n    execute(entity: ObjectLiteral) {\r\n        if (!this.embeddedMetadata)\r\n            return entity[this.propertyName]();\r\n\r\n        this.callEntityEmbeddedMethod(entity, this.embeddedMetadata.propertyPath.split(\".\"));\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Protected Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Calls embedded entity listener method no matter how nested it is.\r\n     */\r\n    protected callEntityEmbeddedMethod(entity: ObjectLiteral, propertyPaths: string[]): void {\r\n        const propertyPath = propertyPaths.shift();\r\n        if (!propertyPath)\r\n            return;\r\n\r\n        if (propertyPaths.length === 0) {\r\n            entity[propertyPath][this.propertyName]();\r\n        } else {\r\n            if (entity[propertyPath])\r\n                this.callEntityEmbeddedMethod(entity[propertyPath], propertyPaths);\r\n        }\r\n    }\r\n\r\n}"],"sourceRoot":".."}