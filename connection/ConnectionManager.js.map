{"version":3,"sources":["../../src/connection/ConnectionManager.ts"],"names":[],"mappings":";;AAAA,2CAAwC;AACxC,4EAAyE;AAEzE,4FAAyF;AAEzF;;;GAGG;AACH;IAAA;QAEI,4EAA4E;QAC5E,uBAAuB;QACvB,4EAA4E;QAE5E;;WAEG;QACa,gBAAW,GAAiB,EAAE,CAAC;IAkDnD,CAAC;IAhDG,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,+BAAG,GAAH,UAAI,IAAY;QACZ,OAAO,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,KAAK,IAAI,EAAxB,CAAwB,CAAC,CAAC;IAC3E,CAAC;IAED;;;;OAIG;IACH,+BAAG,GAAH,UAAI,IAAwB;QAAxB,qBAAA,EAAA,gBAAwB;QACxB,IAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,KAAK,IAAI,EAAxB,CAAwB,CAAC,CAAC;QACjF,IAAI,CAAC,UAAU;YACX,MAAM,IAAI,iDAAuB,CAAC,IAAI,CAAC,CAAC;QAE5C,OAAO,UAAU,CAAC;IACtB,CAAC;IAED;;;OAGG;IACH,kCAAM,GAAN,UAAO,OAA0B;QAE7B,iDAAiD;QACjD,IAAM,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,IAAI,SAAS,CAAC,EAA/C,CAA+C,CAAC,CAAC;QAC7G,IAAI,eAAe,EAAE;YAEjB,qEAAqE;YACrE,IAAI,eAAe,CAAC,WAAW;gBAC3B,MAAM,IAAI,iEAA+B,CAAC,OAAO,CAAC,IAAI,IAAI,SAAS,CAAC,CAAC;YAEzE,sEAAsE;YACtE,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;SACzE;QAED,0BAA0B;QAC1B,IAAM,UAAU,GAAG,IAAI,uBAAU,CAAC,OAAO,CAAC,CAAC;QAC3C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAClC,OAAO,UAAU,CAAC;IACtB,CAAC;IAEL,wBAAC;AAAD,CA3DA,AA2DC,IAAA;AA3DY,8CAAiB","file":"ConnectionManager.js","sourcesContent":["import {Connection} from \"./Connection\";\r\nimport {ConnectionNotFoundError} from \"../error/ConnectionNotFoundError\";\r\nimport {ConnectionOptions} from \"./ConnectionOptions\";\r\nimport {AlreadyHasActiveConnectionError} from \"../error/AlreadyHasActiveConnectionError\";\r\n\r\n/**\r\n * ConnectionManager is used to store and manage multiple orm connections.\r\n * It also provides useful factory methods to simplify connection creation.\r\n */\r\nexport class ConnectionManager {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * List of connections registered in this connection manager.\r\n     */\r\n    public readonly connections: Connection[] = [];\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Checks if connection with the given name exist in the manager.\r\n     */\r\n    has(name: string): boolean {\r\n        return !!this.connections.find(connection => connection.name === name);\r\n    }\r\n\r\n    /**\r\n     * Gets registered connection with the given name.\r\n     * If connection name is not given then it will get a default connection.\r\n     * Throws error if connection with the given name was not found.\r\n     */\r\n    get(name: string = \"default\"): Connection {\r\n        const connection = this.connections.find(connection => connection.name === name);\r\n        if (!connection)\r\n            throw new ConnectionNotFoundError(name);\r\n\r\n        return connection;\r\n    }\r\n\r\n    /**\r\n     * Creates a new connection based on the given connection options and registers it in the manager.\r\n     * Connection won't be established, you'll need to manually call connect method to establish connection.\r\n     */\r\n    create(options: ConnectionOptions): Connection {\r\n\r\n        // check if such connection is already registered\r\n        const existConnection = this.connections.find(connection => connection.name === (options.name || \"default\"));\r\n        if (existConnection) {\r\n\r\n            // if connection is registered and its not closed then throw an error\r\n            if (existConnection.isConnected)\r\n                throw new AlreadyHasActiveConnectionError(options.name || \"default\");\r\n\r\n            // if its registered but closed then simply remove it from the manager\r\n            this.connections.splice(this.connections.indexOf(existConnection), 1);\r\n        }\r\n\r\n        // create a new connection\r\n        const connection = new Connection(options);\r\n        this.connections.push(connection);\r\n        return connection;\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}