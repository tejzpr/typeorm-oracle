{"version":3,"sources":["../../src/connection/Connection.ts"],"names":[],"mappings":"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","file":"Connection.js","sourcesContent":["import {Driver} from \"../driver/Driver\";\r\nimport {Repository} from \"../repository/Repository\";\r\nimport {EntitySubscriberInterface} from \"../subscriber/EntitySubscriberInterface\";\r\nimport {ObjectType} from \"../common/ObjectType\";\r\nimport {EntityManager} from \"../entity-manager/EntityManager\";\r\nimport {DefaultNamingStrategy} from \"../naming-strategy/DefaultNamingStrategy\";\r\nimport {CannotExecuteNotConnectedError} from \"../error/CannotExecuteNotConnectedError\";\r\nimport {CannotConnectAlreadyConnectedError} from \"../error/CannotConnectAlreadyConnectedError\";\r\nimport {TreeRepository} from \"../repository/TreeRepository\";\r\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\r\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\r\nimport {Logger} from \"../logger/Logger\";\r\nimport {EntityMetadataNotFoundError} from \"../error/EntityMetadataNotFoundError\";\r\nimport {MigrationInterface} from \"../migration/MigrationInterface\";\r\nimport {MigrationExecutor} from \"../migration/MigrationExecutor\";\r\nimport {MongoRepository} from \"../repository/MongoRepository\";\r\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\r\nimport {MongoEntityManager} from \"../entity-manager/MongoEntityManager\";\r\nimport {EntityMetadataValidator} from \"../metadata-builder/EntityMetadataValidator\";\r\nimport {ConnectionOptions} from \"./ConnectionOptions\";\r\nimport {QueryRunnerProviderAlreadyReleasedError} from \"../error/QueryRunnerProviderAlreadyReleasedError\";\r\nimport {EntityManagerFactory} from \"../entity-manager/EntityManagerFactory\";\r\nimport {DriverFactory} from \"../driver/DriverFactory\";\r\nimport {ConnectionMetadataBuilder} from \"./ConnectionMetadataBuilder\";\r\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\r\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\r\nimport {LoggerFactory} from \"../logger/LoggerFactory\";\r\nimport {QueryResultCacheFactory} from \"../cache/QueryResultCacheFactory\";\r\nimport {QueryResultCache} from \"../cache/QueryResultCache\";\r\nimport {SqljsEntityManager} from \"../entity-manager/SqljsEntityManager\";\r\nimport {RelationLoader} from \"../query-builder/RelationLoader\";\r\nimport {RelationIdLoader} from \"../query-builder/RelationIdLoader\";\r\nimport {EntitySchema} from \"../\";\r\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\r\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\r\nimport {PromiseUtils} from \"../\";\r\n\r\n/**\r\n * Connection is a single database ORM connection to a specific database.\r\n * Its not required to be a database connection, depend on database type it can create connection pool.\r\n * You can have multiple connections to multiple databases in your application.\r\n */\r\nexport class Connection {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Readonly Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection name.\r\n     */\r\n    readonly name: string;\r\n\r\n    /**\r\n     * Connection options.\r\n     */\r\n    readonly options: ConnectionOptions;\r\n\r\n    /**\r\n     * Indicates if connection is initialized or not.\r\n     */\r\n    readonly isConnected = false;\r\n\r\n    /**\r\n     * Database driver used by this connection.\r\n     */\r\n    readonly driver: Driver;\r\n\r\n    /**\r\n     * EntityManager of this connection.\r\n     */\r\n    readonly manager: EntityManager;\r\n\r\n    /**\r\n     * Naming strategy used in the connection.\r\n     */\r\n    readonly namingStrategy: NamingStrategyInterface;\r\n\r\n    /**\r\n     * Logger used to log orm events.\r\n     */\r\n    readonly logger: Logger;\r\n\r\n    /**\r\n     * Migration instances that are registered for this connection.\r\n     */\r\n    readonly migrations: MigrationInterface[] = [];\r\n\r\n    /**\r\n     * Entity subscriber instances that are registered for this connection.\r\n     */\r\n    readonly subscribers: EntitySubscriberInterface<any>[] = [];\r\n\r\n    /**\r\n     * All entity metadatas that are registered for this connection.\r\n     */\r\n    readonly entityMetadatas: EntityMetadata[] = [];\r\n\r\n    /**\r\n     * Used to work with query result cache.\r\n     */\r\n    readonly queryResultCache?: QueryResultCache;\r\n\r\n    /**\r\n     * Used to load relations and work with lazy relations.\r\n     */\r\n    readonly relationLoader: RelationLoader;\r\n\r\n    /**\r\n     * Used to load relation ids of specific entity relations.\r\n     */\r\n    readonly relationIdLoader: RelationIdLoader;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(options: ConnectionOptions) {\r\n        this.name = options.name || \"default\";\r\n        this.options = options;\r\n        this.logger = new LoggerFactory().create(this.options.logger, this.options.logging);\r\n        this.driver = new DriverFactory().create(this);\r\n        this.manager = this.createEntityManager();\r\n        this.namingStrategy = options.namingStrategy || new DefaultNamingStrategy();\r\n        this.queryResultCache = options.cache ? new QueryResultCacheFactory(this).create() : undefined;\r\n        this.relationLoader = new RelationLoader(this);\r\n        this.relationIdLoader = new RelationIdLoader(this);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets the mongodb entity manager that allows to perform mongodb-specific repository operations\r\n     * with any entity in this connection.\r\n     *\r\n     * Available only in mongodb connections.\r\n     */\r\n    get mongoManager(): MongoEntityManager {\r\n        if (!(this.manager instanceof MongoEntityManager))\r\n            throw new Error(`MongoEntityManager is only available for MongoDB databases.`);\r\n\r\n        return this.manager as MongoEntityManager;\r\n    }\r\n\r\n    /**\r\n     * Gets a sql.js specific Entity Manager that allows to perform special load and save operations\r\n     *\r\n     * Available only in connection with the sqljs driver.\r\n     */\r\n    get sqljsManager(): SqljsEntityManager {\r\n        if (!(this.manager instanceof SqljsEntityManager))\r\n            throw new Error(`SqljsEntityManager is only available for Sqljs databases.`);\r\n\r\n        return this.manager as SqljsEntityManager;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     * This method should be called once on application bootstrap.\r\n     * This method not necessarily creates database connection (depend on database type),\r\n     * but it also can setup a connection pool with database to use.\r\n     */\r\n    async connect(): Promise<this> {\r\n        if (this.isConnected)\r\n            throw new CannotConnectAlreadyConnectedError(this.name);\r\n\r\n        // connect to the database via its driver\r\n        await this.driver.connect();\r\n\r\n        // connect to the cache-specific database if cache is enabled\r\n        if (this.queryResultCache)\r\n            await this.queryResultCache.connect();\r\n\r\n        // set connected status for the current connection\r\n        Object.assign(this, { isConnected: true });\r\n\r\n        try {\r\n\r\n            // build all metadatas registered in the current connection\r\n            this.buildMetadatas();\r\n\r\n            await this.driver.afterConnect();\r\n\r\n            // if option is set - drop schema once connection is done\r\n            if (this.options.dropSchema)\r\n                await this.dropDatabase();\r\n\r\n            // if option is set - automatically synchronize a schema\r\n            if (this.options.synchronize)\r\n                await this.synchronize();\r\n\r\n            // if option is set - automatically synchronize a schema\r\n            if (this.options.migrationsRun)\r\n                await this.runMigrations();\r\n\r\n        } catch (error) {\r\n\r\n            // if for some reason build metadata fail (for example validation error during entity metadata check)\r\n            // connection needs to be closed\r\n            await this.close();\r\n            throw error;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Closes connection with the database.\r\n     * Once connection is closed, you cannot use repositories or perform any operations except opening connection again.\r\n     */\r\n    async close(): Promise<void> {\r\n        if (!this.isConnected)\r\n            throw new CannotExecuteNotConnectedError(this.name);\r\n\r\n        await this.driver.disconnect();\r\n\r\n        // disconnect from the cache-specific database if cache was enabled\r\n        if (this.queryResultCache)\r\n            await this.queryResultCache.disconnect();\r\n\r\n        Object.assign(this, { isConnected: false });\r\n    }\r\n\r\n    /**\r\n     * Creates database schema for all entities registered in this connection.\r\n     * Can be used only after connection to the database is established.\r\n     *\r\n     * @param dropBeforeSync If set to true then it drops the database with all its tables and data\r\n     */\r\n    async synchronize(dropBeforeSync: boolean = false): Promise<void> {\r\n\r\n        if (!this.isConnected)\r\n            throw new CannotExecuteNotConnectedError(this.name);\r\n\r\n        if (dropBeforeSync)\r\n            await this.dropDatabase();\r\n\r\n        const schemaBuilder = this.driver.createSchemaBuilder();\r\n        await schemaBuilder.build();\r\n    }\r\n\r\n    /**\r\n     * Drops the database and all its data.\r\n     * Be careful with this method on production since this method will erase all your database tables and their data.\r\n     * Can be used only after connection to the database is established.\r\n     */\r\n    // TODO rename\r\n    async dropDatabase(): Promise<void> {\r\n        const queryRunner = await this.createQueryRunner(\"master\");\r\n        if (this.driver instanceof SqlServerDriver || this.driver instanceof MysqlDriver) {\r\n            const databases: string[] = this.driver.database ? [this.driver.database] : [];\r\n            this.entityMetadatas.forEach(metadata => {\r\n                if (metadata.database && databases.indexOf(metadata.database) === -1)\r\n                    databases.push(metadata.database);\r\n            });\r\n            await PromiseUtils.runInSequence(databases, database => queryRunner.clearDatabase(database));\r\n        } else {\r\n            await queryRunner.clearDatabase();\r\n        }\r\n        await queryRunner.release();\r\n    }\r\n\r\n    /**\r\n     * Runs all pending migrations.\r\n     * Can be used only after connection to the database is established.\r\n     */\r\n    async runMigrations(options?: { transaction?: boolean }): Promise<void> {\r\n        if (!this.isConnected)\r\n            throw new CannotExecuteNotConnectedError(this.name);\r\n\r\n        const migrationExecutor = new MigrationExecutor(this);\r\n        if (options && options.transaction === false) {\r\n            migrationExecutor.transaction = false;\r\n        }\r\n        await migrationExecutor.executePendingMigrations();\r\n    }\r\n\r\n    /**\r\n     * Reverts last executed migration.\r\n     * Can be used only after connection to the database is established.\r\n     */\r\n    async undoLastMigration(options?: { transaction?: boolean }): Promise<void> {\r\n\r\n        if (!this.isConnected)\r\n            throw new CannotExecuteNotConnectedError(this.name);\r\n\r\n        const migrationExecutor = new MigrationExecutor(this);\r\n        if (options && options.transaction === false) {\r\n            migrationExecutor.transaction = false;\r\n        }\r\n        await migrationExecutor.undoLastMigration();\r\n    }\r\n\r\n    /**\r\n     * Checks if entity metadata exist for the given entity class, target name or table name.\r\n     */\r\n    hasMetadata(target: Function|EntitySchema<any>|string): boolean {\r\n        return !!this.findMetadata(target);\r\n    }\r\n\r\n    /**\r\n     * Gets entity metadata for the given entity class or schema name.\r\n     */\r\n    getMetadata(target: Function|EntitySchema<any>|string): EntityMetadata {\r\n        const metadata = this.findMetadata(target);\r\n        if (!metadata)\r\n            throw new EntityMetadataNotFoundError(target);\r\n\r\n        return metadata;\r\n    }\r\n\r\n    /**\r\n     * Gets repository for the given entity.\r\n     */\r\n    getRepository<Entity>(target: ObjectType<Entity>|EntitySchema<Entity>|string): Repository<Entity> {\r\n        return this.manager.getRepository(target);\r\n    }\r\n\r\n    /**\r\n     * Gets tree repository for the given entity class or name.\r\n     * Only tree-type entities can have a TreeRepository, like ones decorated with @Tree decorator.\r\n     */\r\n    getTreeRepository<Entity>(target: ObjectType<Entity>|EntitySchema<Entity>|string): TreeRepository<Entity> {\r\n        return this.manager.getTreeRepository(target);\r\n    }\r\n\r\n    /**\r\n     * Gets mongodb-specific repository for the given entity class or name.\r\n     * Works only if connection is mongodb-specific.\r\n     */\r\n    getMongoRepository<Entity>(target: ObjectType<Entity>|EntitySchema<Entity>|string): MongoRepository<Entity> {\r\n        if (!(this.driver instanceof MongoDriver))\r\n            throw new Error(`You can use getMongoRepository only for MongoDB connections.`);\r\n\r\n        return this.manager.getRepository(target) as any;\r\n    }\r\n\r\n    /**\r\n     * Gets custom entity repository marked with @EntityRepository decorator.\r\n     */\r\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\r\n        return this.manager.getCustomRepository(customRepository);\r\n    }\r\n\r\n    /**\r\n     * Wraps given function execution (and all operations made there) into a transaction.\r\n     * All database operations must be executed using provided entity manager.\r\n     */\r\n    async transaction(runInTransaction: (entityManager: EntityManager) => Promise<any>): Promise<any> {\r\n        return this.manager.transaction(runInTransaction);\r\n    }\r\n\r\n    /**\r\n     * Executes raw SQL query and returns raw database results.\r\n     */\r\n    async query(query: string, parameters?: any[], queryRunner?: QueryRunner): Promise<any> {\r\n        if (this instanceof MongoEntityManager)\r\n            throw new Error(`Queries aren't supported by MongoDB.`);\r\n\r\n        if (queryRunner && queryRunner.isReleased)\r\n            throw new QueryRunnerProviderAlreadyReleasedError();\r\n\r\n        const usedQueryRunner = queryRunner || this.createQueryRunner(\"master\");\r\n\r\n        try {\r\n            return await usedQueryRunner.query(query, parameters);  // await is needed here because we are using finally\r\n\r\n        } finally {\r\n            if (!queryRunner)\r\n                await usedQueryRunner.release();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new query builder that can be used to build a sql query.\r\n     */\r\n    createQueryBuilder<Entity>(entityClass: ObjectType<Entity>|EntitySchema<Entity>|Function|string, alias: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity>;\r\n\r\n    /**\r\n     * Creates a new query builder that can be used to build a sql query.\r\n     */\r\n    createQueryBuilder(queryRunner?: QueryRunner): SelectQueryBuilder<any>;\r\n\r\n    /**\r\n     * Creates a new query builder that can be used to build a sql query.\r\n     */\r\n    createQueryBuilder<Entity>(entityOrRunner?: ObjectType<Entity>|EntitySchema<Entity>|Function|string|QueryRunner, alias?: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity> {\r\n        if (this instanceof MongoEntityManager)\r\n            throw new Error(`Query Builder is not supported by MongoDB.`);\r\n\r\n        if (alias) {\r\n            const metadata = this.getMetadata(entityOrRunner as Function|EntitySchema<Entity>|string);\r\n            return new SelectQueryBuilder(this, queryRunner)\r\n                .select(alias)\r\n                .from(metadata.target, alias);\r\n\r\n        } else {\r\n            return new SelectQueryBuilder(this, entityOrRunner as QueryRunner|undefined);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used for perform queries on a single database connection.\r\n     * Using query runners you can control your queries to execute using single database connection and\r\n     * manually control your database transaction.\r\n     *\r\n     * Mode is used in replication mode and indicates whatever you want to connect\r\n     * to master database or any of slave databases.\r\n     * If you perform writes you must use master database,\r\n     * if you perform reads you can use slave databases.\r\n     */\r\n    createQueryRunner(mode: \"master\"|\"slave\" = \"master\"): QueryRunner {\r\n        const queryRunner = this.driver.createQueryRunner(mode);\r\n        const manager = this.createEntityManager(queryRunner);\r\n        Object.assign(queryRunner, { manager: manager });\r\n        return queryRunner;\r\n    }\r\n\r\n    /**\r\n     * Gets entity metadata of the junction table (many-to-many table).\r\n     */\r\n    getManyToManyMetadata(entityTarget: Function|string, relationPropertyPath: string) {\r\n        const relationMetadata = this.getMetadata(entityTarget).findRelationWithPropertyPath(relationPropertyPath);\r\n        if (!relationMetadata)\r\n            throw new Error(`Relation \"${relationPropertyPath}\" was not found in ${entityTarget} entity.`);\r\n        if (!relationMetadata.isManyToMany)\r\n            throw new Error(`Relation \"${entityTarget}#${relationPropertyPath}\" does not have a many-to-many relationship.` +\r\n                `You can use this method only on many-to-many relations.`);\r\n\r\n        return relationMetadata.junctionEntityMetadata;\r\n    }\r\n\r\n    /**\r\n     * Creates an Entity Manager for the current connection with the help of the EntityManagerFactory.\r\n     */\r\n    createEntityManager(queryRunner?: QueryRunner): EntityManager {\r\n        return new EntityManagerFactory().create(this, queryRunner);\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Finds exist entity metadata by the given entity class, target name or table name.\r\n     */\r\n    protected findMetadata(target: Function|EntitySchema<any>|string): EntityMetadata|undefined {\r\n        return this.entityMetadatas.find(metadata => {\r\n            if (metadata.target === target)\r\n                return true;\r\n            if (target instanceof EntitySchema) {\r\n                return metadata.name === target.options.name;\r\n            }\r\n            if (typeof target === \"string\") {\r\n                if (target.indexOf(\".\") !== -1) {\r\n                    return metadata.tablePath === target;\r\n                } else {\r\n                    return metadata.name === target || metadata.tableName === target;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Builds metadatas for all registered classes inside this connection.\r\n     */\r\n    protected buildMetadatas(): void {\r\n\r\n        const connectionMetadataBuilder = new ConnectionMetadataBuilder(this);\r\n        const entityMetadataValidator = new EntityMetadataValidator();\r\n\r\n        // create subscribers instances if they are not disallowed from high-level (for example they can disallowed from migrations run process)\r\n        const subscribers = connectionMetadataBuilder.buildSubscribers(this.options.subscribers || []);\r\n        Object.assign(this, { subscribers: subscribers });\r\n\r\n        // build entity metadatas\r\n        const entityMetadatas = connectionMetadataBuilder.buildEntityMetadatas(this.options.entities || []);\r\n        Object.assign(this, { entityMetadatas: entityMetadatas });\r\n\r\n        // create migration instances\r\n        const migrations = connectionMetadataBuilder.buildMigrations(this.options.migrations || []);\r\n        Object.assign(this, { migrations: migrations });\r\n\r\n        // validate all created entity metadatas to make sure user created entities are valid and correct\r\n        entityMetadataValidator.validateMany(this.entityMetadatas, this.driver);\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}