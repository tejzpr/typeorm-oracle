{"version":3,"sources":["../../src/connection/BaseConnectionOptions.ts"],"names":[],"mappings":"","file":"BaseConnectionOptions.js","sourcesContent":["import {EntitySchema} from \"../entity-schema/EntitySchema\";\r\nimport {LoggerOptions} from \"../logger/LoggerOptions\";\r\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\r\nimport {DatabaseType} from \"../driver/types/DatabaseType\";\r\nimport {Logger} from \"../logger/Logger\";\r\n\r\n/**\r\n * BaseConnectionOptions is set of connection options shared by all database types.\r\n */\r\nexport interface BaseConnectionOptions {\r\n\r\n    /**\r\n     * Database type. This value is required.\r\n     */\r\n    readonly type: DatabaseType;\r\n\r\n    /**\r\n     * Connection name. If connection name is not given then it will be called \"default\".\r\n     * Different connections must have different names.\r\n     */\r\n    readonly name?: string;\r\n\r\n    /**\r\n     * Entities to be loaded for this connection.\r\n     * Accepts both entity classes and directories where from entities need to be loaded.\r\n     * Directories support glob patterns.\r\n     */\r\n    readonly entities?: ((Function|string|EntitySchema<any>))[];\r\n\r\n    /**\r\n     * Subscribers to be loaded for this connection.\r\n     * Accepts both subscriber classes and directories where from subscribers need to be loaded.\r\n     * Directories support glob patterns.\r\n     */\r\n    readonly subscribers?: (Function|string)[];\r\n\r\n    /**\r\n     * Migrations to be loaded for this connection.\r\n     * Accepts both migration classes and directories where from migrations need to be loaded.\r\n     * Directories support glob patterns.\r\n     */\r\n    readonly migrations?: (Function|string)[];\r\n\r\n    /**\r\n     * Migrations table name, in case of different name from \"migrations\".\r\n     * Accepts single string name.\r\n     */\r\n    readonly migrationsTableName?: string;\r\n\r\n    /**\r\n     * Naming strategy to be used to name tables and columns in the database.\r\n     */\r\n    readonly namingStrategy?: NamingStrategyInterface;\r\n\r\n    /**\r\n     * Logging options.\r\n     */\r\n    readonly logging?: LoggerOptions;\r\n\r\n    /**\r\n     * Logger instance used to log queries and events in the ORM.\r\n     */\r\n    readonly logger?: \"advanced-console\"|\"simple-console\"|\"file\"|\"debug\"|Logger;\r\n\r\n    /**\r\n     * Maximum number of milliseconds query should be executed before logger log a warning.\r\n     */\r\n    readonly maxQueryExecutionTime?: number;\r\n\r\n    /**\r\n     * Indicates if database schema should be auto created on every application launch.\r\n     * Be careful with this option and don't use this in production - otherwise you can lose production data.\r\n     * This option is useful during debug and development.\r\n     * Alternative to it, you can use CLI and run schema:sync command.\r\n     *\r\n     * Note that for MongoDB database it does not create schema, because MongoDB is schemaless.\r\n     * Instead, it syncs just by creating indices.\r\n     */\r\n    readonly synchronize?: boolean;\r\n\r\n    /**\r\n     * Indicates if migrations should be auto run on every application launch.\r\n     * Alternative to it, you can use CLI and run migrations:run command.\r\n     */\r\n    readonly migrationsRun?: boolean;\r\n\r\n    /**\r\n     * Drops the schema each time connection is being established.\r\n     * Be careful with this option and don't use this in production - otherwise you'll lose all production data.\r\n     * This option is useful during debug and development.\r\n     */\r\n    readonly dropSchema?: boolean;\r\n\r\n    /**\r\n     * Prefix to use on all tables (collections) of this connection in the database.\r\n     */\r\n    readonly entityPrefix?: string;\r\n\r\n    /**\r\n     * Extra connection options to be passed to the underlying driver.\r\n     *\r\n     * todo: deprecate this and move all database-specific types into hts own connection options object.\r\n     */\r\n    readonly extra?: any;\r\n\r\n    /**\r\n     * Allows to setup cache options.\r\n     */\r\n    readonly cache?: boolean|{\r\n\r\n        /**\r\n         * Type of caching.\r\n         *\r\n         * - \"database\" means cached values will be stored in the separate table in database. This is default value.\r\n         * - \"redis\" means cached values will be stored inside redis. You must provide redis connection options.\r\n         */\r\n        readonly type?: \"database\"|\"redis\"; // todo: add mongodb and other cache providers as well in the future\r\n\r\n        /**\r\n         * Used to provide redis connection options.\r\n         */\r\n        readonly options?: any;\r\n\r\n        /**\r\n         * If set to true then queries (using find methods and QueryBuilder's methods) will always be cached.\r\n         */\r\n        readonly alwaysEnabled?: boolean;\r\n\r\n        /**\r\n         * Time in milliseconds in which cache will expire.\r\n         * This can be setup per-query.\r\n         * Default value is 1000 which is equivalent to 1 second.\r\n         */\r\n        readonly duration?: number;\r\n\r\n    };\r\n\r\n    /**\r\n     * CLI settings.\r\n     */\r\n    readonly cli?: {\r\n\r\n        /**\r\n         * Directory where entities should be created by default.\r\n         */\r\n        readonly entitiesDir?: string;\r\n\r\n        /**\r\n         * Directory where migrations should be created by default.\r\n         */\r\n        readonly migrationsDir?: string;\r\n\r\n        /**\r\n         * Directory where subscribers should be created by default.\r\n         */\r\n        readonly subscribersDir?: string;\r\n\r\n    };\r\n\r\n}\r\n"],"sourceRoot":".."}